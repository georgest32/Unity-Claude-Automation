workflows:
  ios-tca-dashboard:
    name: iOS TCA Dashboard
    max_build_duration: 60
    instance_type: mac_mini_m2

    environment:
      xcode: 16.4
      cocoapods: default
      vars:
        PROJECT_PATH: "iOS-App/AgentDashboard/AgentDashboard.xcodeproj"
        SCHEME: "AgentDashboard"

    scripts:
      - name: Toolchain info
        script: |
          #!/usr/bin/env bash
          set -e
          xcodebuild -version
          swift --version
          xcrun simctl list runtimes

      - name: Clean DerivedData & resolve packages (with logs)
        script: |
          #!/usr/bin/env bash
          set -euo pipefail
          
          echo "=== Cleaning DerivedData ==="
          rm -rf "$CM_BUILD_DIR/DerivedData" || true
          
          echo "=== xcodebuild toolchain ==="
          xcodebuild -version
          swift --version || true
          
          echo "=== Resolve Swift packages ==="
          xcodebuild -resolvePackageDependencies \
            -project "$PROJECT_PATH" \
            -scheme "$SCHEME" \
            -clonedSourcePackagesDirPath "$CM_BUILD_DIR/SourcePackages" \
            -verbose || true
          
          echo "=== Show build settings (captures SPM locations) ==="
          xcodebuild -showBuildSettings \
            -project "$PROJECT_PATH" \
            -scheme "$SCHEME" | tee "$CM_BUILD_DIR/build-settings.txt"
          
          echo "=== Find Package.resolved files ==="
          find iOS-App -name Package.resolved -print -exec cat {} \; || true

      - name: Select iOS 18.x simulator, set SIM_UDID for xcodebuild
        script: |
          #!/usr/bin/env bash
          set -euo pipefail

          # Help TCA macro host compile
          export MACOSX_DEPLOYMENT_TARGET=13.0

          echo "=== Selecting iOS 18.x simulator ==="
          # Use self-contained external script
          SIM_UDID="$(python3 ci/select_simulator.py "18.5" "iPhone 16 Pro")"
          if [[ -z "${SIM_UDID:-}" ]]; then
            echo "ERROR: Could not find an iOS 18.x simulator UDID" >&2
            echo "== Devices =="; xcrun simctl list devices
            exit 1
          fi

          echo "Selected simulator UDID: $SIM_UDID"
          echo "export SIM_UDID=$SIM_UDID" >> "$CM_ENV"

      - name: Build for iOS Simulator (arm64, single device, with result bundle)
        script: |
          #!/usr/bin/env bash
          set -euo pipefail
          source "$CM_ENV" || true

          DERIVED="$CM_BUILD_DIR/DerivedData"
          BUNDLE="$CM_BUILD_DIR/build.xcresult"
          LOG="$CM_BUILD_DIR/xcodebuild.log"

          echo "=== Building Debug for simulator id=$SIM_UDID ==="
          xcodebuild \
            -project "$PROJECT_PATH" \
            -scheme "$SCHEME" \
            -sdk iphonesimulator \
            -configuration Debug \
            -destination "platform=iOS Simulator,id=$SIM_UDID" \
            -derivedDataPath "$DERIVED" \
            -resultBundlePath "$BUNDLE" \
            -showBuildTimingSummary \
            -skipMacroValidation \
            -skipPackagePluginValidation \
            ONLY_ACTIVE_ARCH=YES \
            "EXCLUDED_ARCHS[sdk=iphonesimulator*]=i386 x86_64" \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            build | tee "$LOG"

      # ---------- Diagnostics: richer error reporting ----------
      - name: Extract Swift errors from xcresult (always)
        script: |
          #!/usr/bin/env bash
          set +e
          BUNDLE="$CM_BUILD_DIR/build.xcresult"
          if [[ -d "$BUNDLE" ]]; then
            echo "=== Swift errors (xcresult) ==="
            python3 ci/extract_build_errors.py "$BUNDLE"
          else
            echo "No build.xcresult present."
          fi
          true

      - name: Show failing source context (best effort)
        script: |
          #!/usr/bin/env bash
          set +e
          python3 ci/show_source_context.py
          true
          
      - name: Detect dependency graph issues
        script: |
          #!/usr/bin/env bash
          set +e
          python3 ci/detect_dependency_errors.py "$CM_BUILD_DIR/xcodebuild.log"
          true

      - name: Publish diagnostics & build settings
        script: |
          #!/usr/bin/env bash
          set -euo pipefail
          DERIVED="$CM_BUILD_DIR/DerivedData"
          mkdir -p "$CM_ARTIFACTS"
          [[ -f "$CM_BUILD_DIR/xcodebuild.log" ]] && cp "$CM_BUILD_DIR/xcodebuild.log" "$CM_ARTIFACTS/"
          [[ -f "$CM_BUILD_DIR/xcresult.json"   ]] && cp "$CM_BUILD_DIR/xcresult.json"   "$CM_ARTIFACTS/"
          if [[ -d "$DERIVED" ]]; then
            (cd "$DERIVED" && zip -qry "$CM_ARTIFACTS/deriveddata-logs.zip" Logs Build/Intermediates.noindex || true)
            xcodebuild -project "$PROJECT_PATH" -scheme "$SCHEME" -showBuildSettings > "$CM_ARTIFACTS/build-settings.txt" || true
          fi
          echo "Artifacts:"
          ls -lah "$CM_ARTIFACTS"

      # ---------- Package a Preview artifact, only if the .app is real ----------
      - name: Validate and package app for Codemagic Preview (conditional)
        script: |
          #!/usr/bin/env bash
          set -euo pipefail
          DERIVED="$CM_BUILD_DIR/DerivedData/Build/Products/Debug-iphonesimulator"
          APP_DIR="$(find "$DERIVED" -maxdepth 1 -type d -name '*.app' -print -quit || true)"

          if [[ -z "${APP_DIR:-}" ]]; then
            echo "❌ No .app produced (build failed). Skipping preview packaging."
            exit 0
          fi

          PLIST="$APP_DIR/Info.plist"
          if [[ ! -f "$PLIST" ]]; then
            echo "❌ $APP_DIR has no Info.plist — invalid app. Skipping."
            exit 0
          fi

          EXEC=$(/usr/libexec/PlistBuddy -c 'Print :CFBundleExecutable' "$PLIST" 2>/dev/null || true)
          if [[ -z "${EXEC:-}" || ! -f "$APP_DIR/$EXEC" ]]; then
            echo "❌ Missing main executable — app wasn’t linked. Skipping."
            exit 0
          fi

          mkdir -p "$CM_ARTIFACTS"
          ZIP="$CM_ARTIFACTS/app-preview.zip"
          ( cd "$(dirname "$APP_DIR")" && /usr/bin/zip -qry "$ZIP" "$(basename "$APP_DIR")" )
          cp -R "$APP_DIR" "$CM_ARTIFACTS/"

          echo "✅ Preview artifact: $ZIP"
          du -sh "$APP_DIR" || true
          ls -lah "$CM_ARTIFACTS"

    artifacts:
      - $CM_ARTIFACTS/**