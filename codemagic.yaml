workflows:
  ios-tca-dashboard:
    name: iOS TCA Dashboard Build  
    max_build_duration: 120
    instance_type: mac_mini_m2  # Required for Xcode 16.x
    
    environment:
      vars:
        XCODE_PROJECT: "iOS-App/AgentDashboard/AgentDashboard.xcodeproj"
        XCODE_SCHEME: "AgentDashboard"
        BUNDLE_ID: "com.unity.claude.automation.dashboard"
        MACOSX_DEPLOYMENT_TARGET: "13.0"
      # CRITICAL FIX: Upgrade to 16.4+ to support -enablePackageFeature for TCA macros
      xcode: latest  
      
    triggering:
      events:
        - push
        - tag
        - pull_request
      branch_patterns:
        - pattern: 'main'
          include: true
          source: true
          
    scripts:
      - name: Set environment for simulator builds
        script: |
          export DEVELOPER_DIR=/Applications/Xcode.app
          export SDKROOT=$(xcrun --sdk iphonesimulator --show-sdk-path)
          export DYLD_ROOT_PATH="$SDKROOT"
          echo "DEVELOPER_DIR=$DEVELOPER_DIR" >> $CM_ENV
          echo "SDKROOT=$SDKROOT" >> $CM_ENV
          echo "DYLD_ROOT_PATH=$DYLD_ROOT_PATH" >> $CM_ENV
          
      - name: Select iOS 18.5 simulator matching SDK
        script: |
          #!/usr/bin/env bash
          set -euo pipefail
          
          echo "=== Selecting iOS 18.5 simulator using JSON ==="
          
          # Use the CoreSimulator runtime identifier form
          RUNTIME="iOS-18-5"
          PREFERRED_NAMES=("iPhone 16 Pro" "iPhone 16 Pro Max" "iPhone 16" "iPhone 16 Plus")
          
          # Get devices in JSON format
          JSON="$(xcrun simctl list devices available -j)"
          
          # Parse JSON to find the best matching device - use python -c to avoid heredoc issues
          UDID="$(echo "$JSON" | python3 -c "
import json, sys
runtime = '$RUNTIME'
prefs = ['iPhone 16 Pro', 'iPhone 16 Pro Max', 'iPhone 16', 'iPhone 16 Plus']
j = json.load(sys.stdin)

candidates = []
for key, group in j.get('devices', {}).items():
    for d in group:
        if not d.get('isAvailable', True): 
            continue
        # Check if this is an iOS 18.5 device
        # The key format is like 'com.apple.CoreSimulator.SimRuntime.iOS-18-5'
        if runtime in key or key.endswith(runtime):
            if d.get('availabilityError'): 
                continue
            candidates.append((d['name'], d['udid']))
            print(f\"Found candidate: {d['name']} ({d['udid']})\", file=sys.stderr)

# Prefer named devices in order
for p in prefs:
    for name, udid in candidates:
        if name == p:
            print(f'Selected preferred device: {name}', file=sys.stderr)
            print(udid)
            sys.exit(0)

# Else use first available iOS 18.5 device
if candidates:
    print(f'Using first available: {candidates[0][0]}', file=sys.stderr)
    print(candidates[0][1])
    sys.exit(0)

print('No iOS 18.5 devices found', file=sys.stderr)
sys.exit(1)
          ")"
          
          if [[ -z "${UDID:-}" ]]; then
            echo "ERROR: No iOS 18.5 simulator found!"
            xcrun simctl list devices
            exit 1
          fi
          
          echo "Selected simulator UDID: $UDID"
          echo "export SIM_UDID=$UDID" >> "$CM_ENV"
          
          # Ensure it's ready before building
          echo "Booting simulator..."
          xcrun simctl bootstatus "$UDID" -b || true

      - name: Build with full diagnostics
        script: |
          set -o pipefail
          source $CM_ENV
          # Build with selected simulator using its UDID
          xcodebuild \
            -project iOS-App/AgentDashboard/AgentDashboard.xcodeproj \
            -scheme AgentDashboard \
            -sdk iphonesimulator \
            -destination "id=$SIM_UDID" \
            -configuration Debug \
            -resolvePackageDependencies \
            -skipMacroValidation \
            -skipPackagePluginValidation \
            -resultBundlePath "$CM_BUILD_DIR/build.xcresult" \
            clean build \
            | tee $CM_BUILD_DIR/xcodebuild.log || true

      - name: Extract compiler errors from result bundle
        script: |
          RESULT="${CM_BUILD_DIR:-$PWD}/build.xcresult"
          
          if [ -d "$RESULT" ] || [ -f "$RESULT" ]; then
            echo "=== Extracting compilation errors ==="
            # Xcode 16.4+ uses 'get object' with --legacy flag
            xcrun xcresulttool get object --legacy --path "$RESULT" --format json 2>/dev/null | python3 -c "
          import json, sys, urllib.parse
          try:
              j = json.load(sys.stdin)
          except:
              print('No JSON data received from xcresulttool')
              sys.exit(0)
          
          errors = []
          def walk(x):
              if isinstance(x, dict):
                  # Check for error in multiple possible formats
                  if (x.get('issueType') == 'error' or 
                      (x.get('_type','').endswith('IssueSummary') and x.get('issueType') == 'error')):
                      msg = x.get('message', {}).get('text', '') if isinstance(x.get('message'), dict) else x.get('message', '')
                      loc = x.get('documentLocationInCreatingWorkspace', {}) or {}
                      url = loc.get('url') or x.get('documentURL', '')
                      if url.startswith('file://'):
                          url = urllib.parse.unquote(url[7:])
                      line = loc.get('line') or loc.get('startingLineNumber') or ''
                      if msg:
                          errors.append((msg.strip(), url, str(line) if line else ''))
                  for v in x.values():
                      walk(v)
              elif isinstance(x, list):
                  for v in x:
                      walk(v)
          
          walk(j)
          if not errors:
              print('No compilation errors found in result bundle')
          else:
              print('=== Compilation Errors ===')
              for i, (msg, url, line) in enumerate(errors, 1):
                  print(f'{i}) {msg}')
                  if url:  print(f'    File: {url}')
                  if line: print(f'    Line: {line}')
                  print()
          " || true
          else
            echo "No result bundle found at $RESULT"
          fi

      - name: Dump Swift diagnostics
        script: |
          find ~/Library/Developer/Xcode/DerivedData -name "*.dia" -exec strings {} \; | tee $CM_BUILD_DIR/diagnostics.txt || true

      - name: Grep APIClient errors from log
        script: |
          echo "=== APIClient.swift compilation context ==="
          grep -n "APIClient.swift" $CM_BUILD_DIR/xcodebuild.log -C10 || true

      - name: Skip Xcode Macro Fingerprint Validation
        script: |
          # Required for TCA macros to work in CI/CD environment 
          # Research confirmed this resolves "CasePathsMacros must be enabled" errors
          defaults write com.apple.dt.Xcode IDESkipMacroFingerprintValidation -bool YES
          
      - name: Force Complete Cache Reset
        script: |
          # Comprehensive cache clearing to force fresh build with latest git changes
          rm -rf ~/Library/Caches/org.swift.swiftpm
          rm -rf ~/Library/Developer/Xcode/DerivedData
          rm -rf ~/Library/org.swift.swiftpm  
          rm -rf ~/.swiftpm/xcode/
          rm -rf ~/Library/Caches/com.apple.dt.Xcode
          # Verify git changes are present
          cd iOS-App/AgentDashboard
          echo "=== Current Git Status ==="
          git log --oneline -3
          echo "=== Verifying SystemStatus removal ==="
          grep -n "struct SystemStatus" AgentDashboard/Models/Models.swift || echo "SystemStatus successfully removed from Models.swift"
          echo "=== Force fresh checkout ==="  
          git checkout HEAD -- AgentDashboard/Models/Models.swift
          
      - name: Resolve Swift Package Dependencies (allow macros/plugins)
        script: |
          # Fix working directory issue - use absolute paths
          cd $CM_BUILD_DIR/iOS-App/AgentDashboard  
          pwd
          ls -la AgentDashboard.xcodeproj
          # Resolve packages with macro/plugin validation skipped for CI
          xcodebuild -resolvePackageDependencies \
            -project AgentDashboard.xcodeproj \
            -scheme AgentDashboard \
            -skipMacroValidation \
            -skipPackagePluginValidation
            
      - name: Clean DerivedData to avoid stale state
        script: |
          echo "Cleaning DerivedData to ensure fresh build..."
          rm -rf ~/Library/Developer/Xcode/DerivedData
            
      - name: Build for iOS Simulator (No Code Signing)
        script: |
          # Fix working directory issue - use absolute paths
          cd $CM_BUILD_DIR/iOS-App/AgentDashboard
          # Load environment variables including SIM_UDID
          source $CM_ENV
          # CRITICAL: Set macOS 13.0 target for TCA macro host compilation
          export MACOSX_DEPLOYMENT_TARGET=13.0
          echo "Building with simulator ID: $SIM_UDID"
          pwd
          # Build using the same simulator UDID
          xcodebuild build \
            -project AgentDashboard.xcodeproj \
            -scheme AgentDashboard \
            -sdk iphonesimulator \
            -destination "id=$SIM_UDID" \
            -configuration Debug \
            -skipMacroValidation \
            -skipPackagePluginValidation \
            -derivedDataPath "$CM_BUILD_DIR/DerivedData" \
            -resultBundlePath "$CM_BUILD_DIR/main-build.xcresult" \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO || true
            
      - name: Extract main build errors
        script: |
          RESULT="${CM_BUILD_DIR:-$PWD}/main-build.xcresult"
          
          if [ -d "$RESULT" ] || [ -f "$RESULT" ]; then
            echo "=== Extracting main build errors ==="
            # Xcode 16.4+ uses 'get object' with --legacy flag
            xcrun xcresulttool get object --legacy --path "$RESULT" --format json 2>/dev/null | python3 -c "
          import json, sys, urllib.parse
          try:
              j = json.load(sys.stdin)
          except:
              print('No JSON data received from xcresulttool')
              sys.exit(0)
          
          errors = []
          def walk(x):
              if isinstance(x, dict):
                  # Check for error in multiple possible formats
                  if (x.get('issueType') == 'error' or 
                      (x.get('_type','').endswith('IssueSummary') and x.get('issueType') == 'error')):
                      msg = x.get('message', {}).get('text', '') if isinstance(x.get('message'), dict) else x.get('message', '')
                      loc = x.get('documentLocationInCreatingWorkspace', {}) or {}
                      url = loc.get('url') or x.get('documentURL', '')
                      if url.startswith('file://'):
                          url = urllib.parse.unquote(url[7:])
                      line = loc.get('line') or loc.get('startingLineNumber') or ''
                      if msg:
                          errors.append((msg.strip(), url, str(line) if line else ''))
                  for v in x.values():
                      walk(v)
              elif isinstance(x, list):
                  for v in x:
                      walk(v)
          
          walk(j)
          if not errors:
              print('No compilation errors found in main build')
          else:
              print('=== Main Build Compilation Errors ===')
              for i, (msg, url, line) in enumerate(errors, 1):
                  print(f'{i}) {msg}')
                  if url:  print(f'    File: {url}')
                  if line: print(f'    Line: {line}')
                  print()
          " || true
          else
            echo "No result bundle found at $RESULT"
          fi
            
      - name: Archive Build Artifacts for Preview
        script: |
          cd $CM_BUILD_DIR
          
          # Find the .app in our custom DerivedData location
          echo "=== Searching for built .app bundle ==="
          APP_PATH=$(find "$CM_BUILD_DIR/DerivedData" -name "AgentDashboard.app" -type d | head -1)
          
          if [ ! -z "$APP_PATH" ]; then
            echo "✅ Found app at: $APP_PATH"
            
            # Create a Payload directory for Codemagic preview
            mkdir -p Payload
            cp -r "$APP_PATH" Payload/
            
            # Create an IPA for better preview support
            zip -r AgentDashboard.ipa Payload
            
            # Also keep the .app for direct access
            mkdir -p artifacts
            cp -r "$APP_PATH" artifacts/
            mv AgentDashboard.ipa artifacts/
            
            echo "📱 iOS app successfully prepared for Codemagic preview!"
            echo "Contents of artifacts:"
            ls -la artifacts/
          else
            echo "⚠️ Build succeeded but .app bundle not found in DerivedData"
            echo "Searching for .app in all possible locations..."
            find "$CM_BUILD_DIR" -name "*.app" -type d 2>/dev/null | head -10
          fi
          
    artifacts:
      - artifacts/*.ipa
      - artifacts/*.app
      - artifacts/**/*
      - $CM_BUILD_DIR/DerivedData/**/Build/**/*.app
      - $CM_BUILD_DIR/xcodebuild.log
      - $CM_BUILD_DIR/diagnostics.txt
      - $CM_BUILD_DIR/build.xcresult
      - $CM_BUILD_DIR/main-build.xcresult
      - $CM_BUILD_DIR/DerivedData/**/Build/**/*.dSYM
      - /tmp/xcodebuild_logs/*.log
      
    publishing:
      email:
        recipients:
          - developer@unity-claude-automation.com
        notify:
          success: true
          failure: true