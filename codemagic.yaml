workflows:
  ios-master:
    name: AgentDashboard - iOS Build & Preview
    max_build_duration: 120
    instance_type: mac_mini_m2
    
    environment:
      xcode: latest
      vars:
        XCODE_PROJECT: "iOS-App/AgentDashboard/AgentDashboard.xcodeproj"
        XCODE_SCHEME: "AgentDashboard"
        BUNDLE_ID: "com.unity.claude.automation.dashboard"
        DERIVED_DATA: "$CM_BUILD_DIR/DerivedData"
        MACOSX_DEPLOYMENT_TARGET: "13.0"
      
    triggering:
      events:
        - push
        - tag
        - pull_request
      branch_patterns:
        - pattern: 'main'
          include: true
          source: true
          
    scripts:
      - name: Set environment for simulator builds
        script: |
          export DEVELOPER_DIR=/Applications/Xcode.app
          export SDKROOT=$(xcrun --sdk iphonesimulator --show-sdk-path)
          export DYLD_ROOT_PATH="$SDKROOT"
          echo "DEVELOPER_DIR=$DEVELOPER_DIR" >> $CM_ENV
          echo "SDKROOT=$SDKROOT" >> $CM_ENV
          echo "DYLD_ROOT_PATH=$DYLD_ROOT_PATH" >> $CM_ENV
          
      - name: Clean DerivedData
        script: |
          rm -rf "$CM_BUILD_DIR/DerivedData" || true
          rm -rf "$HOME/Library/Developer/Xcode/DerivedData" || true
          
      - name: Skip Xcode Macro Fingerprint Validation
        script: |
          defaults write com.apple.dt.Xcode IDESkipMacroFingerprintValidation -bool YES
          
      - name: Resolve Swift Package Dependencies
        script: |
          cd $CM_BUILD_DIR/iOS-App/AgentDashboard  
          xcodebuild -resolvePackageDependencies \
            -project AgentDashboard.xcodeproj \
            -scheme AgentDashboard \
            -skipMacroValidation \
            -skipPackagePluginValidation
            
      - name: Build for iOS Simulator (arm64 only)
        script: |
          set -euo pipefail
          
          cd $CM_BUILD_DIR/iOS-App/AgentDashboard
          export MACOSX_DEPLOYMENT_TARGET=13.0
          
          DERIVED="$CM_BUILD_DIR/DerivedData"
          BUNDLE="$CM_BUILD_DIR/build.xcresult"
          LOG="$CM_BUILD_DIR/xcodebuild.log"
          
          echo "Building iOS Simulator app (arm64 only)..."
          xcodebuild \
            -project AgentDashboard.xcodeproj \
            -scheme AgentDashboard \
            -sdk iphonesimulator \
            -configuration Debug \
            -destination "platform=iOS Simulator,arch=arm64" \
            -arch arm64 \
            -derivedDataPath "$DERIVED" \
            -resultBundlePath "$BUNDLE" \
            -skipMacroValidation \
            -skipPackagePluginValidation \
            ARCHS=arm64 \
            EXCLUDED_ARCHS="i386 x86_64" \
            ONLY_ACTIVE_ARCH=YES \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            build | tee "$LOG"
            
      - name: Extract Swift compiler errors
        script: |
          BUNDLE="$CM_BUILD_DIR/build.xcresult"
          
          if [[ -e "$BUNDLE" ]]; then
            echo "=== Swift compiler errors ==="
            if out=$(xcrun xcresulttool get object --legacy --path "$BUNDLE" --format json 2>/dev/null); then
              echo "$out" > errors.json
              cat > parse_errors.py << 'EOF'
import json
with open('errors.json') as f:
    j = json.load(f)
def walk(x):
    if isinstance(x, dict):
        if x.get('issueType') == 'error':
            m = x.get('message',{}).get('text','')
            loc = x.get('documentLocationInCreatingWorkspace',{})
            print("✖︎", m)
            if loc.get('url'):  print("    file:", loc['url'])
            if loc.get('line'): print("    line:", loc['line'])
            print()
        for v in x.values(): 
            walk(v)
    elif isinstance(x, list):
        for v in x: 
            walk(v)
walk(j)
EOF
              python3 parse_errors.py
            else
              echo "xcresulttool failed; dumping xcodebuild.log fallback"
              grep -nE " error: " "$CM_BUILD_DIR/xcodebuild.log" || true
            fi
          else
            echo "No result bundle at $BUNDLE"
          fi
          
      - name: Create preview artifacts (with validation)
        script: |
          set -euo pipefail
          
          DERIVED="$CM_BUILD_DIR/DerivedData/Build/Products/Debug-iphonesimulator"
          APP_DIR="$(find "$DERIVED" -maxdepth 1 -type d -name '*.app' -print -quit || true)"
          
          [[ -n "${APP_DIR:-}" ]] || { echo "❌ No .app produced (build failed)."; exit 1; }
          
          PLIST="$APP_DIR/Info.plist"
          [[ -f "$PLIST" ]] || { echo "❌ $APP_DIR has no Info.plist — invalid app."; exit 1; }
          
          EXEC=$(/usr/libexec/PlistBuddy -c 'Print :CFBundleExecutable' "$PLIST" 2>/dev/null || true)
          [[ -n "${EXEC:-}" && -f "$APP_DIR/$EXEC" ]] || { echo "❌ Missing main executable — app wasn't linked."; exit 1; }
          
          echo "✅ Valid app found: $APP_DIR"
          echo "   Executable: $EXEC"
          echo "   Size: $(du -sh "$APP_DIR" | cut -f1)"
          
          # Create artifacts directory
          mkdir -p artifacts
          
          # Package for Codemagic Preview
          ZIP="artifacts/app-preview.zip"
          (
            cd "$(dirname "$APP_DIR")"
            /usr/bin/zip -qry "$ZIP" "$(basename "$APP_DIR")"
          )
          
          # Also copy the .app directly
          cp -r "$APP_DIR" artifacts/
          
          echo "✅ Preview artifact: $ZIP"
          ls -lah artifacts/
            
    artifacts:
      - artifacts/*.ipa
      - artifacts/*.app
      - artifacts/*.zip
      - artifacts/**/*
      - $CM_BUILD_DIR/build.xcresult
      - $CM_BUILD_DIR/diagnostics.txt
      - $CM_BUILD_DIR/DerivedData/**/Build/**/*.dSYM
      
    publishing:
      email:
        recipients:
          - developer@unity-claude-automation.com
        notify:
          success: true
          failure: true