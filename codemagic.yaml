workflows:
  ios-master:
    name: AgentDashboard - iOS Build & Preview
    instance_type: mac_mini_m2
    max_build_duration: 120

    environment:
      xcode: 16.4
      vars:
        XCODE_PROJECT: "iOS-App/AgentDashboard/AgentDashboard.xcodeproj"
        XCODE_SCHEME: "AgentDashboard"
        BUNDLE_ID: "com.unity.claude.automation.dashboard"
        DERIVED_DATA: "$CM_BUILD_DIR/DerivedData"
        MACOSX_DEPLOYMENT_TARGET: "13.0"

    # (Optional) run on push / tag if you want
    # triggering:
    #   events:
    #     - push
    #   branch_patterns:
    #     - pattern: "main"
    #       include: true
    #       source: true

    scripts:
      - name: Clean DerivedData (hygiene)
        script: |
          #!/usr/bin/env bash
          set -euo pipefail
          rm -rf "$DERIVED_DATA" ~/Library/Developer/Xcode/DerivedData

      - name: Resolve Swift Package Dependencies (allow macros/plugins)
        script: |
          #!/usr/bin/env bash
          set -euo pipefail
          xcodebuild -resolvePackageDependencies \
            -project "$XCODE_PROJECT" \
            -clonedSourcePackagesDirPath "$DERIVED_DATA/SourcePackages" \
            -skipMacroValidation \
            -skipPackagePluginValidation

      - name: Build for iOS Simulator (arm64 only, with result bundle)
        script: |
          #!/usr/bin/env bash
          set -euo pipefail
          export MACOSX_DEPLOYMENT_TARGET=${MACOSX_DEPLOYMENT_TARGET:-13.0}
          BUNDLE="$CM_BUILD_DIR/build.xcresult"
          LOG="$CM_BUILD_DIR/xcodebuild.log"

          xcodebuild \
            -project "$XCODE_PROJECT" \
            -scheme "$XCODE_SCHEME" \
            -sdk iphonesimulator \
            -configuration Debug \
            -destination "platform=iOS Simulator,OS=18.5,name=iPhone 16 Pro" \
            -arch arm64 \
            -derivedDataPath "$DERIVED_DATA" \
            -resultBundlePath "$BUNDLE" \
            -skipMacroValidation \
            -skipPackagePluginValidation \
            ARCHS=arm64 \
            EXCLUDED_ARCHS="i386 x86_64" \
            ONLY_ACTIVE_ARCH=YES \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            build | tee "$LOG"

      - name: Extract Swift compiler errors (if any)
        script: |
          #!/usr/bin/env bash
          set -euo pipefail
          BUNDLE="$CM_BUILD_DIR/build.xcresult"

          if [[ -e "$BUNDLE" ]]; then
            echo "=== Swift compiler errors ==="
            if out=$(xcrun xcresulttool get object --legacy --path "$BUNDLE" --format json 2>/dev/null); then
              python3 - <<'PY'
          import json, sys
          j = json.loads(sys.stdin.read())
          def walk(x):
              if isinstance(x, dict):
                  if x.get('issueType') == 'error':
                      m = x.get('message',{}).get('text','')
                      loc = x.get('documentLocationInCreatingWorkspace',{})
                      print("✖︎", m)
                      if loc.get('url'):  print("    file:", loc['url'])
                      if loc.get('line'): print("    line:", loc['line'])
                      print()
                  for v in x.values(): walk(v)
              elif isinstance(x, list):
                  for v in x: walk(v)
          walk(j)
          PY
            else
              echo "xcresulttool failed; dumping xcodebuild.log fallback"
              grep -nE " error: " "$CM_BUILD_DIR/xcodebuild.log" || true
            fi
          else
            echo "No result bundle at $BUNDLE"
          fi

      - name: Find built app and export path
        script: |
          #!/usr/bin/env bash
          set -euo pipefail
          APP_DIR="$(find "$DERIVED_DATA/Build/Products/Debug-iphonesimulator" -maxdepth 1 -type d -name '*.app' -print -quit || true)"
          if [[ -z "${APP_DIR:-}" ]]; then
            echo "❌ No .app produced"
            exit 1
          fi

          PLIST="$APP_DIR/Info.plist"
          if [[ ! -f "$PLIST" ]]; then
            echo "❌ $APP_DIR has no Info.plist"
            exit 1
          fi

          EXEC=$(/usr/libexec/PlistBuddy -c 'Print :CFBundleExecutable' "$PLIST" 2>/dev/null || true)
          if [[ -z "${EXEC:-}" || ! -f "$APP_DIR/$EXEC" ]]; then
            echo "❌ Missing main executable — app wasn’t linked"
            exit 1
          fi

          echo "✅ Built app: $APP_DIR"
          echo "export APP_PATH='$APP_DIR'" >> "$CM_ENV"

      - name: Create preview artifacts (validated)
        script: |
          #!/usr/bin/env bash
          set -euo pipefail
          source "$CM_ENV"
          mkdir -p artifacts

          # Zip the .app with the .app at the root (Codemagic Preview)
          (cd "$(dirname "$APP_PATH")" && /usr/bin/zip -qry "$CM_BUILD_DIR/artifacts/app-preview.zip" "$(basename "$APP_PATH")")

          # Also copy raw .app
          cp -R "$APP_PATH" "$CM_BUILD_DIR/artifacts/"

          # Optional: simple .ipa-like zip (simulator IPAs aren't installable, but keep for reference)
          mkdir -p Payload
          cp -R "$APP_PATH" Payload/
          (cd Payload && zip -qry "$CM_BUILD_DIR/artifacts/AgentDashboard.ipa" .)
          rm -rf Payload

          echo "export CM_PREVIEW_IOS_ARTIFACT=$CM_BUILD_DIR/artifacts/app-preview.zip" >> "$CM_ENV"
          echo "✅ Preview artifact: $CM_BUILD_DIR/artifacts/app-preview.zip"

    artifacts:
      - artifacts/*.zip
      - artifacts/*.app
      - $CM_BUILD_DIR/build.xcresult
      - $CM_BUILD_DIR/xcodebuild.log
      - $CM_BUILD_DIR/diagnostics.txt
      - $CM_BUILD_DIR/DerivedData/**/Build/**/*.dSYM

    publishing:
      email:
        recipients:
          - developer@unity-claude-automation.com
        notify:
          success: true
          failure: true
