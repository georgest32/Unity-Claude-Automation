workflows:
  ios-tca-dashboard:
    name: iOS TCA Dashboard
    max_build_duration: 60
    instance_type: mac_mini_m2

    environment:
      xcode: 16.4
      cocoapods: default
      vars:
        PROJECT_PATH: "iOS-App/AgentDashboard/AgentDashboard.xcodeproj"
        SCHEME: "AgentDashboard"

    scripts:
      - name: Toolchain info
        script: |
          #!/usr/bin/env bash
          set -e
          xcodebuild -version
          swift --version
          xcrun simctl list runtimes

      - name: Resolve Swift Package dependencies (optional)
        script: |
          #!/usr/bin/env bash
          set -e
          xcodebuild \
            -resolvePackageDependencies \
            -project "$PROJECT_PATH" \
            -scheme "$SCHEME"

      - name: Select iOS 18.x simulator, set SIM_UDID for xcodebuild
        script: |
          #!/usr/bin/env bash
          set -euo pipefail

          # Help TCA macro host compile
          export MACOSX_DEPLOYMENT_TARGET=13.0

          echo "=== Selecting iOS 18.x simulator ==="
          # Use external script to avoid YAML heredoc conflicts completely
          SIM_UDID="$(python3 ci/select_simulator.py "18.5" "iPhone 16 Pro")"
          if [[ -z "${SIM_UDID:-}" ]]; then
            echo "ERROR: Could not find an iOS 18.x simulator UDID" >&2
            echo "== Devices =="; xcrun simctl list devices
            exit 1
          fi

          echo "Selected simulator UDID: $SIM_UDID"
          echo "export SIM_UDID=$SIM_UDID" >> "$CM_ENV"

      - name: Build for iOS Simulator (arm64, single device, with result bundle)
        script: |
          #!/usr/bin/env bash
          set -euo pipefail
          source "$CM_ENV" || true

          DERIVED="$CM_BUILD_DIR/DerivedData"
          BUNDLE="$CM_BUILD_DIR/build.xcresult"
          LOG="$CM_BUILD_DIR/xcodebuild.log"

          echo "=== Building Debug for simulator id=$SIM_UDID ==="
          xcodebuild \
            -project "$PROJECT_PATH" \
            -scheme "$SCHEME" \
            -sdk iphonesimulator \
            -configuration Debug \
            -destination "platform=iOS Simulator,id=$SIM_UDID" \
            -derivedDataPath "$DERIVED" \
            -resultBundlePath "$BUNDLE" \
            EXCLUDED_ARCHS="i386 x86_64" \
            ONLY_ACTIVE_ARCH=YES \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGN_IDENTITY="" \
            build | tee "$LOG"

      # ---------- Diagnostics: richer error reporting ----------
      - name: Extract Swift errors from xcresult (always)
        script: |
          #!/usr/bin/env bash
          set +e
          BUNDLE="$CM_BUILD_DIR/build.xcresult"
          if [[ -d "$BUNDLE" ]]; then
            echo "=== Swift errors (xcresult) ==="
            xcrun xcresulttool get object --path "$BUNDLE" --format json > "$CM_BUILD_DIR/xcresult.json" 2>/dev/null
            python3 - <<'PY'
import json, os, sys
p = os.path.join(os.environ['CM_BUILD_DIR'], 'xcresult.json')
try:
    j = json.load(open(p))
except Exception as e:
    print("Failed to read xcresult JSON:", e)
    sys.exit(0)

errors = []
def walk(x):
    if isinstance(x, dict):
        if x.get('issueType') == 'error':
            m = x.get('message', {}).get('text', '')
            loc = x.get('documentLocationInCreatingWorkspace', {})
            errors.append((m, loc.get('url',''), loc.get('line')))
        for v in x.values(): walk(v)
    elif isinstance(x, list):
        for v in x: walk(v)
walk(j)

if not errors:
    print("No error issues found in xcresult.")
for i,(m,u,l) in enumerate(errors,1):
    print(f"\n[{i}] ✖︎ {m}")
    if u: print("    file:", u)
    if l: print("    line:", l)
PY
          else
            echo "No build.xcresult present."
          fi
          true

      - name: Show failing source context (best effort)
        script: |
          #!/usr/bin/env bash
          set +e
          J="$CM_BUILD_DIR/xcresult.json"
          [[ -f "$J" ]] || { echo "No xcresult.json to read"; exit 0; }
          python3 - <<'PY'
import json, os, sys
j = json.load(open(os.path.join(os.environ['CM_BUILD_DIR'], 'xcresult.json')))
def show(path, line):
    if not (path and path.startswith('file://')): return
    path = path[7:]
    if not (os.path.exists(path) and isinstance(line,int)): return
    start = max(1, line-15); end = line+15
    print(f"\n--- {path}:{line} ---")
    with open(path) as f:
        for i, ln in enumerate(f, 1):
            if i < start: continue
            if i > end: break
            mark = ">>" if i == line else "  "
            print(f"{mark} {i:5d}: {ln.rstrip()}")

def walk(x):
    if isinstance(x, dict):
        if x.get('issueType') == 'error':
            loc = x.get('documentLocationInCreatingWorkspace', {})
            show(loc.get('url'), loc.get('line'))
        for v in x.values(): walk(v)
    elif isinstance(x, list):
        for v in x: walk(v)
walk(j)
PY
          true

      - name: Publish diagnostics & build settings
        script: |
          #!/usr/bin/env bash
          set -euo pipefail
          DERIVED="$CM_BUILD_DIR/DerivedData"
          mkdir -p "$CM_ARTIFACTS"
          [[ -f "$CM_BUILD_DIR/xcodebuild.log" ]] && cp "$CM_BUILD_DIR/xcodebuild.log" "$CM_ARTIFACTS/"
          [[ -f "$CM_BUILD_DIR/xcresult.json"   ]] && cp "$CM_BUILD_DIR/xcresult.json"   "$CM_ARTIFACTS/"
          if [[ -d "$DERIVED" ]]; then
            (cd "$DERIVED" && zip -qry "$CM_ARTIFACTS/deriveddata-logs.zip" Logs Build/Intermediates.noindex || true)
            xcodebuild -project "$PROJECT_PATH" -scheme "$SCHEME" -showBuildSettings > "$CM_ARTIFACTS/build-settings.txt" || true
          fi
          echo "Artifacts:"
          ls -lah "$CM_ARTIFACTS"

      # ---------- Package a Preview artifact, only if the .app is real ----------
      - name: Validate and package app for Codemagic Preview (conditional)
        script: |
          #!/usr/bin/env bash
          set -euo pipefail
          DERIVED="$CM_BUILD_DIR/DerivedData/Build/Products/Debug-iphonesimulator"
          APP_DIR="$(find "$DERIVED" -maxdepth 1 -type d -name '*.app' -print -quit || true)"

          if [[ -z "${APP_DIR:-}" ]]; then
            echo "❌ No .app produced (build failed). Skipping preview packaging."
            exit 0
          fi

          PLIST="$APP_DIR/Info.plist"
          if [[ ! -f "$PLIST" ]]; then
            echo "❌ $APP_DIR has no Info.plist — invalid app. Skipping."
            exit 0
          fi

          EXEC=$(/usr/libexec/PlistBuddy -c 'Print :CFBundleExecutable' "$PLIST" 2>/dev/null || true)
          if [[ -z "${EXEC:-}" || ! -f "$APP_DIR/$EXEC" ]]; then
            echo "❌ Missing main executable — app wasn’t linked. Skipping."
            exit 0
          fi

          mkdir -p "$CM_ARTIFACTS"
          ZIP="$CM_ARTIFACTS/app-preview.zip"
          ( cd "$(dirname "$APP_DIR")" && /usr/bin/zip -qry "$ZIP" "$(basename "$APP_DIR")" )
          cp -R "$APP_DIR" "$CM_ARTIFACTS/"

          echo "✅ Preview artifact: $ZIP"
          du -sh "$APP_DIR" || true
          ls -lah "$CM_ARTIFACTS"

    artifacts:
      - $CM_ARTIFACTS/**