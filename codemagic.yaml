workflows:
  ios-tca-dashboard:
    name: iOS TCA Dashboard
    instance_type: mac_mini_m2
    max_build_duration: 60
    environment:
      xcode: 16.4
      vars:
        XCODE_PROJECT: iOS-App/AgentDashboard/AgentDashboard.xcodeproj
        XCODE_SCHEME: AgentDashboard
        MACOSX_DEPLOYMENT_TARGET: "13.0"

    scripts:
      - name: Show Xcode & SDK
        script: |
          #!/usr/bin/env bash
          set -euo pipefail
          xcodebuild -version
          xcodebuild -showsdks

      - name: Select iOS simulator (18.5 preferred — iPhone 16 Pro)
        script: |
          #!/usr/bin/env bash
          set -euo pipefail

          pick_sim() {
            xcrun simctl list devices --json | python3 - <<'PY'
import json, sys
data=json.load(sys.stdin)

def choose(runtime_filter, name_pred):
    for runtime, devices in data.get('devices', {}).items():
        if runtime_filter not in runtime:
            continue
        for d in devices:
            if d.get('isAvailable') and name_pred(d.get('name','')):
                print(d['udid']); print(d['name']); print('18.5')
                return True
    return False

if choose('iOS-18-5', lambda n: n=='iPhone 16 Pro'): sys.exit(0)
if choose('iOS-18-5', lambda n: n.startswith('iPhone 16')): sys.exit(0)
if choose('iOS-18-5', lambda n: True): sys.exit(0)
sys.exit(1)
PY
          }

          if out=$(pick_sim 2>/dev/null); then
            IFS=$'\n' read -r SIM_UDID SIM_NAME SIM_OS <<<"$out"
            echo "✅ Using $SIM_NAME (iOS $SIM_OS) — $SIM_UDID"
            {
              echo "export SIM_UDID=$SIM_UDID"
              echo "export SIM_NAME=$SIM_NAME"
              echo "export SIM_OS=$SIM_OS"
            } >> "$CM_ENV"
          else
            echo "⚠️ No iOS 18.5 simulator found; falling back to generic simulator."
            echo "export SIM_UDID=" >> "$CM_ENV"
          fi

      - name: Resolve Swift Package Dependencies (allow macros/plugins)
        script: |
          #!/usr/bin/env bash
          set -euo pipefail
          xcodebuild \
            -resolvePackageDependencies \
            -project "$XCODE_PROJECT" \
            -skipMacroValidation \
            -skipPackagePluginValidation

      - name: Build for iOS Simulator (arm64 only, with result bundle)
        script: |
          #!/usr/bin/env bash
          set -euo pipefail
          source "$CM_ENV" || true

          DERIVED="$CM_BUILD_DIR/DerivedData"
          BUNDLE="$CM_BUILD_DIR/build.xcresult"
          LOG="$CM_BUILD_DIR/xcodebuild.log"

          if [[ -n "${SIM_UDID:-}" ]]; then
            DESTINATION_OPT=(-destination "id=${SIM_UDID}")
            ARCH_OPTS=(ARCHS=arm64 EXCLUDED_ARCHS="i386 x86_64" ONLY_ACTIVE_ARCH=YES)
          else
            DESTINATION_OPT=(-destination "generic/platform=iOS Simulator")
            ARCH_OPTS=(-arch arm64 ARCHS=arm64 EXCLUDED_ARCHS="i386 x86_64" ONLY_ACTIVE_ARCH=YES)
          fi

          echo "🛠️  Building $XCODE_SCHEME from $XCODE_PROJECT"
          set +e
          xcodebuild \
            -project "$XCODE_PROJECT" \
            -scheme "$XCODE_SCHEME" \
            -sdk iphonesimulator \
            -configuration Debug \
            "${DESTINATION_OPT[@]}" \
            -derivedDataPath "$DERIVED" \
            -resultBundlePath "$BUNDLE" \
            -skipMacroValidation \
            -skipPackagePluginValidation \
            "${ARCH_OPTS[@]}" \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            build | tee "$LOG"
          XC_STATUS=${PIPESTATUS[0]}
          set -e

          if [[ $XC_STATUS -ne 0 ]]; then
            echo "❌ xcodebuild failed (exit $XC_STATUS). Extracting compiler errors…"
            if [[ -e "$BUNDLE" ]] && xcrun xcresulttool get object --legacy --path "$BUNDLE" --format json >/tmp/xc.json 2>/dev/null; then
              python3 - <<'PY'
import json, sys
j=json.load(open("/tmp/xc.json"))
def walk(x):
    if isinstance(x, dict):
        if x.get('issueType') == 'error':
            msg=x.get('message',{}).get('text','')
            loc=x.get('documentLocationInCreatingWorkspace',{})
            print("✖︎", msg)
            if loc.get('url'):  print("    file:", loc['url'])
            if loc.get('line'): print("    line:", loc['line'])
            print()
        for v in x.values(): walk(v)
    elif isinstance(x, list):
        for v in x: walk(v)
walk(j)
PY
            else
              echo "xcresulttool unavailable; grepping build log:"
              grep -nE " error: " "$LOG" || true
            fi
            exit $XC_STATUS
          fi

      - name: Create preview artifacts (validated)
        script: |
          #!/usr/bin/env bash
          set -euo pipefail

          DERIVED="$CM_BUILD_DIR/DerivedData/Build/Products/Debug-iphonesimulator"
          APP_DIR="$(find "$DERIVED" -maxdepth 1 -type d -name '*.app' -print -quit || true)"

          [[ -n "${APP_DIR:-}" ]] || { echo "❌ No .app produced (build failed)."; exit 1; }

          PLIST="$APP_DIR/Info.plist"
          [[ -f "$PLIST" ]] || { echo "❌ $APP_DIR has no Info.plist — invalid app."; exit 1; }

          EXEC=$(/usr/libexec/PlistBuddy -c 'Print :CFBundleExecutable' "$PLIST" 2>/dev/null || true)
          [[ -n "${EXEC:-}" && -f "$APP_DIR/$EXEC" ]] || { echo "❌ Missing main executable — app wasn’t linked."; exit 1; }

          echo "✅ Valid app found: $APP_DIR"
          echo "   Executable: $EXEC"
          echo "   Size: $(du -sh "$APP_DIR" | cut -f1)"

          mkdir -p artifacts

          APP_ZIP="artifacts/AgentDashboard.app.zip"
          (
            cd "$(dirname "$APP_DIR")"
            /usr/bin/zip -qry "$APP_ZIP" "$(basename "$APP_DIR")"
          )

          PREVIEW_ZIP="artifacts/app-preview.zip"
          cp "$APP_ZIP" "$PREVIEW_ZIP"
          cp -R "$APP_DIR" artifacts/

          echo "✅ Preview artifact: $PREVIEW_ZIP"
          echo "export CM_PREVIEW_IOS_ARTIFACT=$PREVIEW_ZIP" >> "$CM_ENV"
          ls -lah artifacts/

    artifacts:
      - artifacts/app-preview.zip
      - artifacts/AgentDashboard.app.zip
      - artifacts/AgentDashboard.app
      - $CM_BUILD_DIR/build.xcresult
      - $CM_BUILD_DIR/xcodebuild.log
      - $CM_BUILD_DIR/DerivedData/Logs/**/*
      
    publishing:
      email:
        recipients:
          - developer@unity-claude-automation.com
        notify:
          success: true
          failure: true
