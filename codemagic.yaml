workflows:
  ios-tca-dashboard:
    name: iOS TCA Dashboard Build  
    max_build_duration: 120
    instance_type: mac_mini_m2  # Required for Xcode 16.x
    
    environment:
      vars:
        XCODE_PROJECT: "iOS-App/AgentDashboard/AgentDashboard.xcodeproj"
        XCODE_SCHEME: "AgentDashboard"
        BUNDLE_ID: "com.unity.claude.automation.dashboard"
        MACOSX_DEPLOYMENT_TARGET: "13.0"
      # CRITICAL FIX: Upgrade to 16.4+ to support -enablePackageFeature for TCA macros
      xcode: latest  
      
    triggering:
      events:
        - push
        - tag
        - pull_request
      branch_patterns:
        - pattern: 'main'
          include: true
          source: true
          
    scripts:
      - name: Select an available iPhone simulator
        script: |
          set -e
          DEVICE_ID=$(xcrun simctl list devices available | \
            awk -F '[()]' '/iPhone 1[4-9]|iPhone SE \(3rd generation\)/ {print $2; exit}')
          if [ -z "$DEVICE_ID" ]; then
            echo "No suitable iPhone simulator found"
            exit 70
          fi
          echo "Using simulator id: $DEVICE_ID"
          xcrun simctl bootstatus "$DEVICE_ID" -b
          echo "$DEVICE_ID" > $CM_BUILD_DIR/sim_id.txt

      - name: Build with full diagnostics
        script: |
          set -o pipefail
          DEVICE_ID=$(cat $CM_BUILD_DIR/sim_id.txt)
          # Build with result bundle for better error capture
          xcodebuild \
            -project iOS-App/AgentDashboard/AgentDashboard.xcodeproj \
            -scheme AgentDashboard \
            -sdk iphonesimulator \
            -destination "id=$DEVICE_ID" \
            -configuration Debug \
            -skipMacroValidation \
            -skipPackagePluginValidation \
            -resultBundlePath "$CM_BUILD_DIR/build.xcresult" \
            | tee $CM_BUILD_DIR/xcodebuild.log

      - name: Extract compiler errors from result bundle
        script: |
          echo "=== Extracting Swift compiler errors ==="
          xcrun xcresulttool get --path "$CM_BUILD_DIR/build.xcresult" --format json \
            | python3 - <<'PY'
          import json, sys
          j=json.load(sys.stdin)
          def walk(x):
            if isinstance(x, dict):
              if x.get('issueType') == 'error':
                msg = x.get('message',{}).get('text','')
                doc = x.get('documentLocationInCreatingWorkspace',{}).get('url','') or x.get('documentURL','')
                print(msg, "\n->", doc, "\n")
              for v in x.values(): walk(v)
            elif isinstance(x, list):
              for v in x: walk(v)
          walk(j)
          PY

      - name: Dump Swift diagnostics
        script: |
          find ~/Library/Developer/Xcode/DerivedData -name "*.dia" -exec strings {} \; | tee $CM_BUILD_DIR/diagnostics.txt || true

      - name: Grep APIClient errors from log
        script: |
          echo "=== APIClient.swift compilation context ==="
          grep -n "APIClient.swift" $CM_BUILD_DIR/xcodebuild.log -C10 || true

      - name: Skip Xcode Macro Fingerprint Validation
        script: |
          # Required for TCA macros to work in CI/CD environment 
          # Research confirmed this resolves "CasePathsMacros must be enabled" errors
          defaults write com.apple.dt.Xcode IDESkipMacroFingerprintValidation -bool YES
          
      - name: Force Complete Cache Reset
        script: |
          # Comprehensive cache clearing to force fresh build with latest git changes
          rm -rf ~/Library/Caches/org.swift.swiftpm
          rm -rf ~/Library/Developer/Xcode/DerivedData
          rm -rf ~/Library/org.swift.swiftpm  
          rm -rf ~/.swiftpm/xcode/
          rm -rf ~/Library/Caches/com.apple.dt.Xcode
          # Verify git changes are present
          cd iOS-App/AgentDashboard
          echo "=== Current Git Status ==="
          git log --oneline -3
          echo "=== Verifying SystemStatus removal ==="
          grep -n "struct SystemStatus" AgentDashboard/Models/Models.swift || echo "SystemStatus successfully removed from Models.swift"
          echo "=== Force fresh checkout ==="  
          git checkout HEAD -- AgentDashboard/Models/Models.swift
          
      - name: Resolve Swift Package Dependencies (allow macros/plugins)
        script: |
          # Fix working directory issue - use absolute paths
          cd $CM_BUILD_DIR/iOS-App/AgentDashboard  
          pwd
          ls -la AgentDashboard.xcodeproj
          # Resolve packages with macro/plugin validation skipped for CI
          xcodebuild -resolvePackageDependencies \
            -project AgentDashboard.xcodeproj \
            -scheme AgentDashboard \
            -skipMacroValidation \
            -skipPackagePluginValidation
            
      - name: Clean DerivedData to avoid stale state
        script: |
          echo "Cleaning DerivedData to ensure fresh build..."
          rm -rf ~/Library/Developer/Xcode/DerivedData
            
      - name: Build for iOS Simulator (No Code Signing)
        script: |
          # Fix working directory issue - use absolute paths
          cd $CM_BUILD_DIR/iOS-App/AgentDashboard
          # CRITICAL: Set macOS 13.0 target for TCA macro host compilation
          export MACOSX_DEPLOYMENT_TARGET=13.0
          # Use the previously selected simulator
          DEVICE_ID=$(cat $CM_BUILD_DIR/sim_id.txt)
          echo "Building with simulator ID: $DEVICE_ID"
          pwd
          # Build with result bundle for error capture
          xcodebuild build \
            -project AgentDashboard.xcodeproj \
            -scheme AgentDashboard \
            -sdk iphonesimulator \
            -destination "id=$DEVICE_ID" \
            -configuration Debug \
            -skipMacroValidation \
            -skipPackagePluginValidation \
            -derivedDataPath "$CM_BUILD_DIR/DerivedData" \
            -resultBundlePath "$CM_BUILD_DIR/main-build.xcresult" \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO || true
            
      - name: Extract main build errors
        script: |
          if [ -d "$CM_BUILD_DIR/main-build.xcresult" ]; then
            echo "=== Main build compiler errors ==="
            xcrun xcresulttool get --path "$CM_BUILD_DIR/main-build.xcresult" --format json \
              | python3 - <<'PY'
            import json, sys
            j=json.load(sys.stdin)
            def walk(x):
              if isinstance(x, dict):
                if x.get('issueType') == 'error':
                  msg = x.get('message',{}).get('text','')
                  doc = x.get('documentLocationInCreatingWorkspace',{}).get('url','') or x.get('documentURL','')
                  print(msg, "\n->", doc, "\n")
                for v in x.values(): walk(v)
              elif isinstance(x, list):
                for v in x: walk(v)
            walk(j)
            PY
          fi
            
      - name: Archive Build Artifacts
        script: |
          cd $CM_BUILD_DIR/iOS-App/AgentDashboard
          mkdir -p build/artifacts
          
          # Find and copy the built app
          DERIVED_DATA=$(find ~/Library/Developer/Xcode/DerivedData -name "AgentDashboard-*" -type d | head -1)
          if [ ! -z "$DERIVED_DATA" ]; then
            find "$DERIVED_DATA" -name "AgentDashboard.app" -type d | head -1 | xargs -I {} cp -r {} build/artifacts/
            echo "TCA iOS app successfully built and archived!"
          else
            echo "Build completed but no app bundle found"
          fi
          
    artifacts:
      - iOS-App/AgentDashboard/build/artifacts/**/*
      - $CM_BUILD_DIR/xcodebuild.log
      - $CM_BUILD_DIR/diagnostics.txt
      - $CM_BUILD_DIR/build.xcresult
      - $CM_BUILD_DIR/main-build.xcresult
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
      - /tmp/xcodebuild_logs/*.log
      
    publishing:
      email:
        recipients:
          - developer@unity-claude-automation.com
        notify:
          success: true
          failure: true