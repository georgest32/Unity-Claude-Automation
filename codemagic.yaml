workflows:
  ios-tca-dashboard:
    name: iOS TCA Dashboard
    max_build_duration: 60
    instance_type: mac_mini_m2

    environment:
      xcode: 16.4
      cocoapods: default
      vars:
        PROJECT_PATH: "iOS-App/AgentDashboard/AgentDashboard.xcodeproj"
        SCHEME: "AgentDashboard"

    scripts:
      - name: Toolchain info
        script: |
          #!/usr/bin/env bash
          set -e
          xcodebuild -version
          swift --version
          xcrun simctl list runtimes

      - name: Clean DerivedData & resolve packages (with logs)
        script: |
          #!/usr/bin/env bash
          set -euo pipefail
          
          echo "=== Cleaning DerivedData ==="
          rm -rf "$CM_BUILD_DIR/DerivedData" || true
          
          echo "=== xcodebuild toolchain ==="
          xcodebuild -version
          swift --version || true
          
          echo "=== Resolve Swift packages ==="
          xcodebuild -resolvePackageDependencies \
            -project "$PROJECT_PATH" \
            -scheme "$SCHEME" \
            -clonedSourcePackagesDirPath "$CM_BUILD_DIR/SourcePackages" \
            -verbose || true
          
          echo "=== Show build settings (captures SPM locations) ==="
          xcodebuild -showBuildSettings \
            -project "$PROJECT_PATH" \
            -scheme "$SCHEME" | tee "$CM_BUILD_DIR/build-settings.txt"
          
          echo "=== Find Package.resolved files ==="
          find iOS-App -name Package.resolved -print -exec cat {} \; || true

      - name: Select iOS 18.x simulator, set SIM_UDID for xcodebuild
        script: |
          #!/usr/bin/env bash
          set -euo pipefail

          # Help TCA macro host compile
          export MACOSX_DEPLOYMENT_TARGET=13.0

          echo "=== Selecting iOS 18.x simulator ==="
          # Use self-contained external script
          SIM_UDID="$(python3 ci/select_simulator.py "18.5" "iPhone 16 Pro")"
          if [[ -z "${SIM_UDID:-}" ]]; then
            echo "ERROR: Could not find an iOS 18.x simulator UDID" >&2
            echo "== Devices =="; xcrun simctl list devices
            exit 1
          fi

          echo "Selected simulator UDID: $SIM_UDID"
          echo "export SIM_UDID=$SIM_UDID" >> "$CM_ENV"

      - name: Sanity - ensure single @main App
        script: |
          #!/usr/bin/env bash
          set -euo pipefail
          
          echo "=== Checking for single @main App ==="
          if command -v rg &> /dev/null; then
            hits=$(rg -n --no-heading -g 'iOS-App/**/*.swift' '@main\s+struct\s+[A-Za-z_][A-Za-z0-9_]*\s*:\s*App' | wc -l | tr -d ' ')
          else
            hits=$(grep -r "@main.*struct.*App" iOS-App --include="*.swift" | wc -l | tr -d ' ')
          fi
          
          echo "@main App count: $hits"
          if [ "$hits" -gt 1 ]; then
            echo "‚ùå Multiple @main apps found"
            exit 1
          fi
          echo "‚úÖ Single @main App"

      - name: Sanity - verify key files are in Xcode project
        script: |
          #!/usr/bin/env bash
          set -euo pipefail
          PROJ="iOS-App/AgentDashboard/AgentDashboard.xcodeproj/project.pbxproj"
          
          echo "=== Checking target membership ==="
          
          # Critical files that MUST be in project
          critical=( ContentView.swift DashboardView.swift )
          for f in "${critical[@]}"; do
            if ! grep -q "$f" "$PROJ"; then
              echo "‚ùå CRITICAL: Not in project: $f"
              exit 1
            else
              echo "‚úÖ Found: $f"
            fi
          done
          
          # Optional files (okay if missing due to temp wrappers)
          optional=( AgentsView.swift TerminalView.swift AnalyticsView.swift SettingsView.swift )
          for f in "${optional[@]}"; do
            if ! grep -q "$f" "$PROJ"; then
              echo "‚ö†Ô∏è  Not in project: $f (using temp wrapper)"
            else
              echo "‚úÖ Found: $f"
            fi
          done

      - name: Project integrity check
        script: |
          #!/usr/bin/env bash
          set -euo pipefail
          PBX="iOS-App/AgentDashboard/AgentDashboard.xcodeproj/project.pbxproj"

          echo "=== Sanity check pbxproj ==="
          head -n 10 "$PBX" || true
          echo

          # Check if it's a valid plist
          if ! plutil -lint "$PBX" 2>/dev/null; then
            echo "‚ùå project.pbxproj is not a valid plist. Restore it before building."
            exit 74
          fi

          echo "=== List targets (quick parse) ==="
          xcodebuild -list -project iOS-App/AgentDashboard/AgentDashboard.xcodeproj || true
          
          echo "‚úÖ Project file is valid"

      - name: Build for iOS Simulator (arm64, single device, with result bundle)
        script: |
          #!/usr/bin/env bash
          set -euo pipefail
          source "$CM_ENV" || true

          DERIVED="$CM_BUILD_DIR/DerivedData"
          BUNDLE="$CM_BUILD_DIR/build.xcresult"
          LOG="$CM_BUILD_DIR/xcodebuild.log"

          # Macro plugins run on the macOS host; set a modern host target
          export MACOSX_DEPLOYMENT_TARGET=13.0

          echo "=== Building Debug for simulator id=$SIM_UDID ==="
          xcodebuild \
            -project "$PROJECT_PATH" \
            -scheme "$SCHEME" \
            -sdk iphonesimulator \
            -configuration Debug \
            -destination "platform=iOS Simulator,id=$SIM_UDID,arch=arm64" \
            -derivedDataPath "$DERIVED" \
            -resultBundlePath "$BUNDLE" \
            ONLY_ACTIVE_ARCH=YES \
            EXCLUDED_ARCHS="i386 x86_64" \
            SWIFT_MACRO_PLUGIN_ENABLE=YES \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGN_IDENTITY="" \
            -showBuildTimingSummary \
            -skipPackagePluginValidation \
            -skipMacroValidation \
            build | tee "$LOG"

      # ---------- Diagnostics: richer error reporting -----------
      - name: Extract ALL Swift diagnostics (file + line)
        script: |
          #!/usr/bin/env bash
          set -euo pipefail
          BUNDLE="$CM_BUILD_DIR/build.xcresult"
          
          if [[ ! -d "$BUNDLE" ]]; then
            echo "No xcresult bundle at: $BUNDLE"
            exit 0
          fi
          
          echo "========================================="
          echo "=== EXTRACTING REAL SWIFT ERRORS ==="
          echo "========================================="
          echo
          
          echo "=== High-level issues (xcresult JSON) ==="
          xcrun xcresulttool get --format json --path "$BUNDLE" | python3 - <<'PY'
import json,sys
j=json.load(sys.stdin)

def walk(x,out):
  if isinstance(x,dict):
    if x.get('issueType') in ('error','warning'):
      msg=x.get('message',{}).get('text','')
      loc=x.get('documentLocationInCreatingWorkspace',{}) or {}
      url=loc.get('url',''); line=loc.get('line')
      out.append((x.get('issueType'), msg, url, line))
    for v in x.values(): walk(v,out)
  elif isinstance(x,list):
    for v in x: walk(v,out)

out=[]; walk(j,out)
errors = [x for x in out if x[0] == 'error']

if errors:
  print(f"\nüî¥ FOUND {len(errors)} ERRORS:\n")
  for i,(kind,msg,url,line) in enumerate(errors[:20],1):
    print(f"ERROR #{i}:")
    print(f"  ‚úñ {msg}")
    if url:  print(f"  üìÅ file: {url}")
    if line: print(f"  üìç line: {line}")
    print()
else:
  print("‚úÖ No errors in xcresult")
PY
          
          echo
          echo "=== Swift serialized diagnostics (if present) ==="
          # Some errors only show up in .dia files
          mapfile -t swiftdiags < <(find "$BUNDLE" -type f \( -name "*.dia" -o -name "*.diagnostics" \) 2>/dev/null || true)
          
          if (( ${#swiftdiags[@]} )); then
            echo "Found ${#swiftdiags[@]} diagnostic files"
            for d in "${swiftdiags[@]}"; do
              echo "--- DIAG: $(basename "$d") ---"
              xcrun swift-diagnostics tool parse "$d" 2>/dev/null || echo "(could not parse)"
              echo
            done
          else
            echo "(no serialized diagnostics found)"
          fi
          
          echo
          echo "========================================="
          
          # Also try the original script if it exists
          if [[ -f "ci/extract_build_errors.py" ]]; then
            echo "=== Using ci/extract_build_errors.py ==="
            python3 ci/extract_build_errors.py "$BUNDLE" || true
          fi
          
          exit 0

      - name: Show failing source context (best effort)
        script: |
          #!/usr/bin/env bash
          set +e
          python3 ci/show_source_context.py
          true
          
      - name: Detect dependency graph issues
        script: |
          #!/usr/bin/env bash
          set +e
          python3 ci/detect_dependency_errors.py "$CM_BUILD_DIR/xcodebuild.log"
          true

      - name: Publish diagnostics & build settings
        script: |
          #!/usr/bin/env bash
          set -euo pipefail
          DERIVED="$CM_BUILD_DIR/DerivedData"
          mkdir -p "$CM_ARTIFACTS"
          [[ -f "$CM_BUILD_DIR/xcodebuild.log" ]] && cp "$CM_BUILD_DIR/xcodebuild.log" "$CM_ARTIFACTS/"
          [[ -f "$CM_BUILD_DIR/xcresult.json"   ]] && cp "$CM_BUILD_DIR/xcresult.json"   "$CM_ARTIFACTS/"
          if [[ -d "$DERIVED" ]]; then
            (cd "$DERIVED" && zip -qry "$CM_ARTIFACTS/deriveddata-logs.zip" Logs Build/Intermediates.noindex || true)
            xcodebuild -project "$PROJECT_PATH" -scheme "$SCHEME" -showBuildSettings > "$CM_ARTIFACTS/build-settings.txt" || true
          fi
          echo "Artifacts:"
          ls -lah "$CM_ARTIFACTS"

      # ---------- Package a Preview artifact, only if the .app is real ----------
      - name: Validate and package app for Codemagic Preview (conditional)
        script: |
          #!/usr/bin/env bash
          set -euo pipefail
          DERIVED="$CM_BUILD_DIR/DerivedData/Build/Products/Debug-iphonesimulator"
          APP_DIR="$(find "$DERIVED" -maxdepth 1 -type d -name '*.app' -print -quit || true)"

          if [[ -z "${APP_DIR:-}" ]]; then
            echo "‚ùå No .app produced (build failed). Skipping preview packaging."
            exit 0
          fi

          PLIST="$APP_DIR/Info.plist"
          if [[ ! -f "$PLIST" ]]; then
            echo "‚ùå $APP_DIR has no Info.plist ‚Äî invalid app. Skipping."
            exit 0
          fi

          EXEC=$(/usr/libexec/PlistBuddy -c 'Print :CFBundleExecutable' "$PLIST" 2>/dev/null || true)
          if [[ -z "${EXEC:-}" || ! -f "$APP_DIR/$EXEC" ]]; then
            echo "‚ùå Missing main executable ‚Äî app wasn‚Äôt linked. Skipping."
            exit 0
          fi

          mkdir -p "$CM_ARTIFACTS"
          ZIP="$CM_ARTIFACTS/app-preview.zip"
          ( cd "$(dirname "$APP_DIR")" && /usr/bin/zip -qry "$ZIP" "$(basename "$APP_DIR")" )
          cp -R "$APP_DIR" "$CM_ARTIFACTS/"

          echo "‚úÖ Preview artifact: $ZIP"
          du -sh "$APP_DIR" || true
          ls -lah "$CM_ARTIFACTS"

    artifacts:
      - $CM_ARTIFACTS/**