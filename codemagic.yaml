workflows:
  ios-tca-dashboard:
    name: iOS TCA Dashboard
    instance_type: mac_mini_m2
    max_build_duration: 60
    environment:
      xcode: 16.4
      vars:
        XCODE_PROJECT: iOS-App/AgentDashboard/AgentDashboard.xcodeproj
        XCODE_SCHEME: AgentDashboard
        MACOSX_DEPLOYMENT_TARGET: "13.0"

    scripts:
      - name: Show Xcode & SDK
        script: |
          #!/usr/bin/env bash
          set -euo pipefail
          xcodebuild -version
          xcodebuild -showsdks

      - name: Select iOS 18.5 simulator (prefer iPhone 16 Pro)
        script: |
          #!/usr/bin/env bash
          set -euo pipefail

          # Try exact 18.5 iPhone 16 Pro, then any iPhone 16 on 18.5, then any iOS 18.5 device.
          SIM_UDID="$(xcrun simctl list devices 'iOS 18.5' 2>/dev/null | awk -F'[()]' '/iPhone 16 Pro/{print $2; exit}' || true)"
          if [[ -z "${SIM_UDID:-}" ]]; then
            SIM_UDID="$(xcrun simctl list devices 'iOS 18.5' 2>/dev/null | awk -F'[()]' '/iPhone 16 /{print $2; exit}' || true)"
          fi
          if [[ -z "${SIM_UDID:-}" ]]; then
            SIM_UDID="$(xcrun simctl list devices 2>/dev/null | awk -F'[()]' '/iOS 18\.5/ {print $2; exit}' || true)"
          fi

          if [[ -n "${SIM_UDID:-}" ]]; then
            echo "✅ Using simulator $SIM_UDID"
          else
            echo "⚠️  No iOS 18.5 simulator found; will use generic destination."
          fi

          {
            echo "export SIM_UDID=${SIM_UDID:-}"
          } >> "$CM_ENV"

      - name: Resolve Swift Package Dependencies (allow macros/plugins)
        script: |
          #!/usr/bin/env bash
          set -euo pipefail
          xcodebuild \
            -resolvePackageDependencies \
            -project "$XCODE_PROJECT" \
            -skipMacroValidation \
            -skipPackagePluginValidation

      - name: Build for iOS Simulator (arm64 only, with result bundle)
        script: |
          #!/usr/bin/env bash
          set -euo pipefail
          source "$CM_ENV" || true

          DERIVED="$CM_BUILD_DIR/DerivedData"
          BUNDLE="$CM_BUILD_DIR/build.xcresult"
          LOG="$CM_BUILD_DIR/xcodebuild.log"

          if [[ -n "${SIM_UDID:-}" ]]; then
            DEST=(-destination "id=$SIM_UDID")                                   # NO -arch here
            ARCH_OPTS=(ARCHS=arm64 EXCLUDED_ARCHS="i386 x86_64" ONLY_ACTIVE_ARCH=YES)
          else
            DEST=(-destination "generic/platform=iOS Simulator")
            ARCH_OPTS=(-arch arm64 ARCHS=arm64 EXCLUDED_ARCHS="i386 x86_64" ONLY_ACTIVE_ARCH=YES)
          fi

          echo "🛠️  Building $XCODE_SCHEME from $XCODE_PROJECT"
          set +e
          xcodebuild \
            -project "$XCODE_PROJECT" \
            -scheme "$XCODE_SCHEME" \
            -sdk iphonesimulator \
            -configuration Debug \
            "${DEST[@]}" \
            -derivedDataPath "$DERIVED" \
            -resultBundlePath "$BUNDLE" \
            -skipMacroValidation \
            -skipPackagePluginValidation \
            "${ARCH_OPTS[@]}" \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            build | tee "$LOG"
          XC_STATUS=${PIPESTATUS[0]}
          set -e

          if [[ $XC_STATUS -ne 0 ]]; then
            echo "❌ xcodebuild failed (exit $XC_STATUS). Showing compiler errors from log:"
            grep -nE " error: " "$LOG" || true
            exit $XC_STATUS
          fi

      - name: Create preview artifacts (validated)
        script: |
          #!/usr/bin/env bash
          set -euo pipefail

          DERIVED="$CM_BUILD_DIR/DerivedData/Build/Products/Debug-iphonesimulator"
          APP_DIR="$(find "$DERIVED" -maxdepth 1 -type d -name '*.app' -print -quit || true)"
          [[ -n "${APP_DIR:-}" ]] || { echo "❌ No .app produced (build failed)."; exit 1; }

          PLIST="$APP_DIR/Info.plist"
          [[ -f "$PLIST" ]] || { echo "❌ $APP_DIR has no Info.plist — invalid app."; exit 1; }

          EXEC=$(/usr/libexec/PlistBuddy -c 'Print :CFBundleExecutable' "$PLIST" 2>/dev/null || true)
          [[ -n "${EXEC:-}" && -f "$APP_DIR/$EXEC" ]] || { echo "❌ Missing main executable — app wasn’t linked."; exit 1; }

          echo "✅ Valid app found: $APP_DIR"
          echo "   Executable: $EXEC"
          echo "   Size: $(du -sh "$APP_DIR" | cut -f1)"

          mkdir -p artifacts

          APP_ZIP="artifacts/AgentDashboard.app.zip"
          ( cd "$(dirname "$APP_DIR")" && /usr/bin/zip -qry "$APP_ZIP" "$(basename "$APP_DIR")" )

          PREVIEW_ZIP="artifacts/app-preview.zip"
          cp "$APP_ZIP" "$PREVIEW_ZIP"
          cp -R "$APP_DIR" artifacts/

          echo "✅ Preview artifact: $PREVIEW_ZIP"
          echo "export CM_PREVIEW_IOS_ARTIFACT=$PREVIEW_ZIP" >> "$CM_ENV"
          ls -lah artifacts/

    artifacts:
      - artifacts/app-preview.zip
      - artifacts/AgentDashboard.app.zip
      - artifacts/AgentDashboard.app
      - build.xcresult
      - DerivedData/Logs/**/*
