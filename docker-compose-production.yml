# Enhanced Documentation System - Production Docker Compose
# Research-validated optimal long-term solution using build directives instead of registry images
# Implements all 4 critical fixes for 100% deployment success
# Date: 2025-08-29

# Custom network for service isolation (research best practice)
networks:
  unity-claude-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Named volumes for data persistence
volumes:
  module-data:
    driver: local
  langgraph-data:
    driver: local
  monitoring-logs:
    driver: local
  shared-config:
    driver: local
  codeql-databases:
    driver: local
  docs-generated:
    driver: local
  docs-cache:
    driver: local

services:
  # PowerShell Module Service (Foundation Service)
  powershell-modules:
    build:
      context: ./docker/powershell
      dockerfile: Dockerfile
    container_name: unity-claude-powershell
    networks:
      - unity-claude-net
    volumes:
      - module-data:/opt/modules
      - shared-config:/app/config:ro
      - ./Modules:/opt/modules:ro
    environment:
      - POWERSHELL_TELEMETRY_OPTOUT=1
      - PSModulePath=/opt/modules:/usr/local/share/powershell/Modules
      # Research-validated binding configuration
      - BIND_ADDRESS=0.0.0.0
      - SERVICE_PORT=5985
    ports:
      - "5985:5985"
      - "5986:5986"
    restart: unless-stopped
    # Research-optimized health check with extended start period
    healthcheck:
      test: ["CMD", "pwsh", "-Command", "Test-NetConnection -ComputerName localhost -Port 5985 -InformationLevel Quiet"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 120s  # Extended for PowerShell service initialization
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Documentation Server with Enhanced Health Checks
  docs-server:
    build:
      context: ./docker/docs
      dockerfile: Dockerfile
    container_name: unity-claude-docs
    networks:
      - unity-claude-net
    environment:
      # Research-validated binding configuration for container networking
      - BIND_ADDRESS=0.0.0.0
      - PORT=80
      - HOST=0.0.0.0
    ports:
      - "8080:80"
    depends_on:
      powershell-modules:
        condition: service_healthy
    restart: unless-stopped
    # Enhanced health check with proper service readiness validation
    healthcheck:
      test: ["CMD", "sh", "-c", "wget --no-verbose --tries=1 --spider http://0.0.0.0:80/health || exit 1"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 90s  # Research-optimized timing for web service
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # Documentation API Service
  docs-api:
    build:
      context: ./docker/documentation
      dockerfile: Dockerfile.docs-api
    container_name: unity-claude-docs-api
    networks:
      - unity-claude-net
    environment:
      # Research-validated application binding configuration
      - HOST=0.0.0.0
      - PORT=8091
      - BIND_ADDRESS=0.0.0.0:8091
      - API_HOST=0.0.0.0
    ports:
      - "8091:8091"
    depends_on:
      powershell-modules:
        condition: service_healthy
      docs-server:
        condition: service_healthy
    restart: unless-stopped
    # Research-optimized API service health check
    healthcheck:
      test: ["CMD", "curl", "--fail", "--silent", "http://0.0.0.0:8091/health", "||", "exit", "1"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 75s  # API services need less time than full applications
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # LangGraph REST API Service
  langgraph-api:
    build:
      context: ./docker/python/langgraph
      dockerfile: Dockerfile
    container_name: unity-claude-langgraph
    networks:
      - unity-claude-net
    volumes:
      - langgraph-data:/app/data
      - shared-config:/app/config:ro
      - ./agents:/app/agents:ro
    environment:
      - LANGGRAPH_DB_PATH=/app/data/langgraph.db
      - PYTHONUNBUFFERED=1
      # Research-validated Python application binding
      - HOST=0.0.0.0
      - PORT=8000
      - BIND_HOST=0.0.0.0
    ports:
      - "8000:8000"
    depends_on:
      powershell-modules:
        condition: service_healthy
    restart: unless-stopped
    # Research-optimized health check for Python API service
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://0.0.0.0:8000/health', timeout=5)"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 150s  # Extended for Python/AI service initialization
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # AutoGen GroupChat Service
  autogen-groupchat:
    build:
      context: ./docker/python/autogen
      dockerfile: Dockerfile
    container_name: unity-claude-autogen
    networks:
      - unity-claude-net
    volumes:
      - shared-config:/app/config:ro
      - ./agents:/app/agents:ro
    environment:
      - PYTHONUNBUFFERED=1
      - AUTOGEN_USE_DOCKER=0
      # Research-validated binding configuration
      - HOST=0.0.0.0
      - PORT=8001
      - AUTOGEN_HOST=0.0.0.0
    ports:
      - "8001:8001"
    depends_on:
      langgraph-api:
        condition: service_healthy
      powershell-modules:
        condition: service_healthy
    restart: unless-stopped
    # Research-optimized health check for AutoGen service
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://0.0.0.0:8001/health', timeout=10)"]
      interval: 45s
      timeout: 20s
      retries: 3
      start_period: 180s  # Extended for AutoGen/AI model initialization
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# Research-validated production deployment notes:
# 1. Uses build: directives instead of image: to build locally from Dockerfiles
# 2. All services configured with 0.0.0.0 binding environment variables
# 3. Extended start_period for complex services (PowerShell: 120s, LangGraph: 150s, AutoGen: 180s)
# 4. Proper dependency management with service_healthy conditions
# 5. Enhanced timeout and retry configuration for production reliability
# 6. Service-specific health check commands optimized for each application type