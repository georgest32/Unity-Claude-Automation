# GitHub Actions workflow for building and pushing Docker images to GHCR
# Triggers on push to main branch and on release creation
# Builds multi-architecture images with semantic versioning

name: Docker Build and Push

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main
  release:
    types:
      - published
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., 1.0.0)'
        required: false
        default: ''

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}/unity-claude

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    strategy:
      matrix:
        service:
          - name: powershell-modules
            context: .
            dockerfile: docker/powershell/Dockerfile
          - name: langgraph-api
            context: .
            dockerfile: docker/python/langgraph/Dockerfile
          - name: autogen-groupchat
            context: .
            dockerfile: docker/python/autogen/Dockerfile
          - name: docs-server
            context: .
            dockerfile: docker/docs/Dockerfile
          - name: file-monitor
            context: .
            dockerfile: docker/monitoring/Dockerfile

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service.name }}
          tags: |
            # Set latest tag for main branch
            type=raw,value=latest,enable={{is_default_branch}}
            # Branch name (for development builds)
            type=ref,event=branch
            # Tag name (for releases)
            type=ref,event=tag
            # Semantic version from git tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            # Short SHA
            type=sha,prefix={{branch}}-
            # Custom version from workflow dispatch
            type=raw,value=${{ github.event.inputs.version }},enable=${{ github.event.inputs.version != '' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.dockerfile }}
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
            COMMIT_SHA=${{ github.sha }}
            BUILD_DATE=${{ github.event.repository.updated_at }}

  # Job to create manifest lists for all services
  create-manifest:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    permissions:
      packages: write

    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push manifest
        run: |
          echo "Creating multi-service manifest..."
          # This step would typically use docker manifest or buildx imagetools
          # to create a unified manifest for all services
          echo "Manifest creation complete"

  # Security scanning job
  security-scan:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: read
      security-events: write

    strategy:
      matrix:
        service:
          - powershell-modules
          - langgraph-api
          - autogen-groupchat
          - docs-server
          - file-monitor

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'