{
  "Summary": {
    "StartTime": "2025-08-28T19:57:22.6300839-04:00",
    "Failed": 0,
    "Passed": 1,
    "SuccessRate": 3.6,
    "TotalTests": 28,
    "TestScope": "All",
    "Duration": 0.4838669,
    "TestScript": "Test-EnhancedDocumentationSystem.ps1",
    "Skipped": 27
  },
  "FailedTests": [],
  "TestResults": {
    "Containers": [
      {
        "Name": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "Type": "File",
        "Item": {
          "Name": "Test-EnhancedDocumentationSystem.ps1",
          "Length": 36156,
          "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
          "Directory": {
            "Name": "Unity-Claude-Automation",
            "Parent": "C:\\UnityProjects\\Sound-and-Shoal",
            "Root": "C:\\",
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Extension": "",
            "CreationTime": "2025-08-16T18:37:14.6080817-04:00",
            "CreationTimeUtc": "2025-08-16T22:37:14.6080817Z",
            "LastAccessTime": "2025-08-28T19:57:22.2190708-04:00",
            "LastAccessTimeUtc": "2025-08-28T23:57:22.2190708Z",
            "LastWriteTime": "2025-08-28T19:30:50.560646-04:00",
            "LastWriteTimeUtc": "2025-08-28T23:30:50.560646Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 16
          },
          "IsReadOnly": false,
          "Exists": true,
          "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "Extension": ".ps1",
          "CreationTime": "2025-08-28T19:30:10.2339054-04:00",
          "CreationTimeUtc": "2025-08-28T23:30:10.2339054Z",
          "LastAccessTime": "2025-08-28T19:55:05.745542-04:00",
          "LastAccessTimeUtc": "2025-08-28T23:55:05.745542Z",
          "LastWriteTime": "2025-08-28T19:30:10.2339054-04:00",
          "LastWriteTimeUtc": "2025-08-28T23:30:10.2339054Z",
          "LinkTarget": null,
          "UnixFileMode": -1,
          "Attributes": 32
        },
        "Data": {},
        "Blocks": [
          {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.0446447",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Passed": true,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.8460832-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0437822",
            "UserDuration": "00:00:00.0008625",
            "OwnDuration": "-00:00:00.0511809",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 122,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0646703",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.8907373-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0634426",
            "UserDuration": "00:00:00.0012277",
            "OwnDuration": "00:00:00.0341818",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 294,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[!] Language-Specific Templates [!] Automation Triggers",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.1023904",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Language-Specific Templates [!] Automation Triggers",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.9107542-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1007996",
            "UserDuration": "00:00:00.0015908",
            "OwnDuration": "00:00:00.0423986",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 447,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Tests": "",
            "Result": "Passed",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 4,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:00.2420494",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Passed": true,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.9484705-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1235608",
            "UserDuration": "00:00:00.1184886",
            "OwnDuration": "00:00:00.0923743",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                    Set-ItResult -Skipped -Because \"ParallelProcessing module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 570,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          }
        ],
        "Result": "Passed",
        "Duration": {
          "Ticks": 4838669,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 483,
          "Microseconds": 866,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.600311342592593E-06,
          "TotalHours": 0.00013440747222222222,
          "TotalMilliseconds": 483.8669,
          "TotalMicroseconds": 483866.9,
          "TotalNanoseconds": 483866900.0,
          "TotalMinutes": 0.008064448333333333,
          "TotalSeconds": 0.4838669
        },
        "FailedCount": 0,
        "PassedCount": 1,
        "SkippedCount": 27,
        "InconclusiveCount": 0,
        "NotRunCount": 0,
        "TotalCount": 28,
        "ErrorRecord": [],
        "Passed": true,
        "OwnPassed": true,
        "Skip": false,
        "ShouldRun": true,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
        "DiscoveryDuration": {
          "Ticks": 775850,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 77,
          "Microseconds": 585,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 8.97974537037037E-07,
          "TotalHours": 2.155138888888889E-05,
          "TotalMilliseconds": 77.585,
          "TotalMicroseconds": 77585.0,
          "TotalNanoseconds": 77585000.0,
          "TotalMinutes": 0.0012930833333333334,
          "TotalSeconds": 0.077585
        },
        "UserDuration": {
          "Ticks": 1212140,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 121,
          "Microseconds": 214,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.4029398148148147E-06,
          "TotalHours": 3.3670555555555553E-05,
          "TotalMilliseconds": 121.214,
          "TotalMicroseconds": 121214.0,
          "TotalNanoseconds": 121214000.0,
          "TotalMinutes": 0.0020202333333333333,
          "TotalSeconds": 0.121214
        },
        "FrameworkDuration": {
          "Ticks": 2850679,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 285,
          "Microseconds": 67,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.299396990740741E-06,
          "TotalHours": 7.918552777777777E-05,
          "TotalMilliseconds": 285.0679,
          "TotalMicroseconds": 285067.9,
          "TotalNanoseconds": 285067900.0,
          "TotalMinutes": 0.004751131666666667,
          "TotalSeconds": 0.2850679
        },
        "StandardOutput": null
      }
    ],
    "Result": "Passed",
    "FailedCount": 0,
    "FailedBlocksCount": 0,
    "FailedContainersCount": 0,
    "PassedCount": 1,
    "SkippedCount": 27,
    "InconclusiveCount": 0,
    "NotRunCount": 0,
    "TotalCount": 28,
    "Duration": {
      "Ticks": 4838669,
      "Days": 0,
      "Hours": 0,
      "Milliseconds": 483,
      "Microseconds": 866,
      "Nanoseconds": 900,
      "Minutes": 0,
      "Seconds": 0,
      "TotalDays": 5.600311342592593E-06,
      "TotalHours": 0.00013440747222222222,
      "TotalMilliseconds": 483.8669,
      "TotalMicroseconds": 483866.9,
      "TotalNanoseconds": 483866900.0,
      "TotalMinutes": 0.008064448333333333,
      "TotalSeconds": 0.4838669
    },
    "Executed": true,
    "ExecutedAt": "2025-08-28T19:57:21.6013472-04:00",
    "Version": "5.7.1",
    "PSVersion": "7.5.2",
    "PSBoundParameters": {
      "Configuration": {
        "Run": {
          "Path": {
            "Default": ".",
            "Description": "Directories to be searched for tests, paths directly to test files, or combination of both.",
            "Value": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsModified": true
          },
          "ExcludePath": {
            "Default": "",
            "Description": "Directories or files to be excluded from the run.",
            "Value": "",
            "IsModified": false
          },
          "ScriptBlock": {
            "Default": "",
            "Description": "ScriptBlocks containing tests to be executed.",
            "Value": "",
            "IsModified": false
          },
          "Container": {
            "Default": "",
            "Description": "ContainerInfo objects containing tests to be executed.",
            "Value": "",
            "IsModified": false
          },
          "TestExtension": {
            "Default": ".Tests.ps1",
            "Description": "Filter used to identify test files.",
            "Value": ".Tests.ps1",
            "IsModified": false
          },
          "Exit": {
            "Default": false,
            "Description": "Exit with non-zero exit code when the test run fails. Exit code is always set to `$LASTEXITCODE` even when this option is `$false`. When used together with Throw, throwing an exception is preferred.",
            "Value": false,
            "IsModified": false
          },
          "Throw": {
            "Default": false,
            "Description": "Throw an exception when test run fails. When used together with Exit, throwing an exception is preferred.",
            "Value": false,
            "IsModified": false
          },
          "PassThru": {
            "Default": false,
            "Description": "Return result object to the pipeline after finishing the test run.",
            "Value": true,
            "IsModified": true
          },
          "SkipRun": {
            "Default": false,
            "Description": "Runs the discovery phase but skips run. Use it with PassThru to get object populated with all tests.",
            "Value": false,
            "IsModified": false
          },
          "SkipRemainingOnFailure": {
            "Default": "None",
            "Description": "Skips remaining tests after failure for selected scope, options are None, Run, Container and Block.",
            "Value": "None",
            "IsModified": false
          }
        },
        "Filter": {
          "Tag": {
            "Default": "",
            "Description": "Tags of Describe, Context or It to be run.",
            "Value": "",
            "IsModified": false
          },
          "ExcludeTag": {
            "Default": "",
            "Description": "Tags of Describe, Context or It to be excluded from the run.",
            "Value": "",
            "IsModified": false
          },
          "Line": {
            "Default": "",
            "Description": "Filter by file and scriptblock start line, useful to run parsed tests programmatically to avoid problems with expanded names. Example: 'C:\\tests\\file1.Tests.ps1:37'",
            "Value": "",
            "IsModified": false
          },
          "ExcludeLine": {
            "Default": "",
            "Description": "Exclude by file and scriptblock start line, takes precedence over Line.",
            "Value": "",
            "IsModified": false
          },
          "FullName": {
            "Default": "",
            "Description": "Full name of test with -like wildcards, joined by dot. Example: '*.describe Get-Item.test1'",
            "Value": "",
            "IsModified": false
          }
        },
        "CodeCoverage": {
          "Enabled": {
            "Default": false,
            "Description": "Enable CodeCoverage.",
            "Value": false,
            "IsModified": false
          },
          "OutputFormat": {
            "Default": "JaCoCo",
            "Description": "Format to use for code coverage report. Possible values: JaCoCo, CoverageGutters, Cobertura",
            "Value": "JaCoCo",
            "IsModified": false
          },
          "OutputPath": {
            "Default": "coverage.xml",
            "Description": "Path relative to the current directory where code coverage report is saved.",
            "Value": "coverage.xml",
            "IsModified": false
          },
          "OutputEncoding": {
            "Default": "UTF8",
            "Description": "Encoding of the output file.",
            "Value": "UTF8",
            "IsModified": false
          },
          "Path": {
            "Default": "",
            "Description": "Directories or files to be used for code coverage, by default the Path(s) from general settings are used, unless overridden here.",
            "Value": "",
            "IsModified": false
          },
          "ExcludeTests": {
            "Default": true,
            "Description": "Exclude tests from code coverage. This uses the TestFilter from general configuration.",
            "Value": true,
            "IsModified": false
          },
          "RecursePaths": {
            "Default": true,
            "Description": "Will recurse through directories in the Path option.",
            "Value": true,
            "IsModified": false
          },
          "CoveragePercentTarget": {
            "Default": 75.0,
            "Description": "Target percent of code coverage that you want to achieve, default 75%.",
            "Value": 75.0,
            "IsModified": false
          },
          "UseBreakpoints": {
            "Default": true,
            "Description": "EXPERIMENTAL: When false, use Profiler based tracer to do CodeCoverage instead of using breakpoints.",
            "Value": true,
            "IsModified": false
          },
          "SingleHitBreakpoints": {
            "Default": true,
            "Description": "Remove breakpoint when it is hit.",
            "Value": true,
            "IsModified": false
          }
        },
        "TestResult": {
          "Enabled": {
            "Default": false,
            "Description": "Enable TestResult.",
            "Value": true,
            "IsModified": true
          },
          "OutputFormat": {
            "Default": "NUnitXml",
            "Description": "Format to use for test result report. Possible values: NUnitXml, NUnit2.5, NUnit3 or JUnitXml",
            "Value": "NUnitXml",
            "IsModified": false
          },
          "OutputPath": {
            "Default": "testResults.xml",
            "Description": "Path relative to the current directory where test result report is saved.",
            "Value": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\TestResults\\EnhancedDocumentationSystem-UnitTests-20250828-195721.xml",
            "IsModified": true
          },
          "OutputEncoding": {
            "Default": "UTF8",
            "Description": "Encoding of the output file.",
            "Value": "UTF8",
            "IsModified": false
          },
          "TestSuiteName": {
            "Default": "Pester",
            "Description": "Set the name assigned to the root 'test-suite' element.",
            "Value": "Pester",
            "IsModified": false
          }
        },
        "Should": {
          "ErrorAction": {
            "Default": "Stop",
            "Description": "Controls if Should throws on error. Use 'Stop' to throw on error, or 'Continue' to fail at the end of the test.",
            "Value": "Stop",
            "IsModified": false
          }
        },
        "Debug": {
          "ShowFullErrors": {
            "Default": false,
            "Description": "Show full errors including Pester internal stack. This property is deprecated, and if set to true it will override Output.StackTraceVerbosity to 'Full'.",
            "Value": false,
            "IsModified": false
          },
          "WriteDebugMessages": {
            "Default": false,
            "Description": "Write Debug messages to screen.",
            "Value": false,
            "IsModified": false
          },
          "WriteDebugMessagesFrom": {
            "Default": "Discovery Skip Mock CodeCoverage",
            "Description": "Write Debug messages from a given source, WriteDebugMessages must be set to true for this to work. You can use like wildcards to get messages from multiple sources, as well as * to get everything.",
            "Value": "Discovery Skip Mock CodeCoverage",
            "IsModified": false
          },
          "ShowNavigationMarkers": {
            "Default": false,
            "Description": "Write paths after every block and test, for easy navigation in VSCode.",
            "Value": false,
            "IsModified": false
          },
          "ReturnRawResultObject": {
            "Default": false,
            "Description": "Returns unfiltered result object, this is for development only. Do not rely on this object for additional properties, non-public properties will be renamed without previous notice.",
            "Value": false,
            "IsModified": false
          }
        },
        "Output": {
          "Verbosity": {
            "Default": "Normal",
            "Description": "The verbosity of output, options are None, Normal, Detailed and Diagnostic.",
            "Value": "Normal",
            "IsModified": true
          },
          "StackTraceVerbosity": {
            "Default": "Filtered",
            "Description": "The verbosity of stacktrace output, options are None, FirstLine, Filtered and Full.",
            "Value": "Filtered",
            "IsModified": false
          },
          "CIFormat": {
            "Default": "Auto",
            "Description": "The CI format of error output in build logs, options are None, Auto, AzureDevops and GithubActions.",
            "Value": "Auto",
            "IsModified": false
          },
          "CILogLevel": {
            "Default": "Error",
            "Description": "The CI log level in build logs, options are Error and Warning.",
            "Value": "Error",
            "IsModified": false
          },
          "RenderMode": {
            "Default": "Auto",
            "Description": "The mode used to render console output, options are Auto, Ansi, ConsoleColor and Plaintext.",
            "Value": "Auto",
            "IsModified": false
          }
        },
        "TestDrive": {
          "Enabled": {
            "Default": true,
            "Description": "Enable TestDrive.",
            "Value": true,
            "IsModified": false
          }
        },
        "TestRegistry": {
          "Enabled": {
            "Default": true,
            "Description": "Enable TestRegistry.",
            "Value": true,
            "IsModified": false
          }
        }
      }
    },
    "Plugins": null,
    "PluginConfiguration": null,
    "PluginData": null,
    "Configuration": {
      "Run": {
        "Path": {
          "Default": [
            "."
          ],
          "Description": "Directories to be searched for tests, paths directly to test files, or combination of both.",
          "Value": [
            "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1"
          ],
          "IsModified": true
        },
        "ExcludePath": {
          "Default": [],
          "Description": "Directories or files to be excluded from the run.",
          "Value": [],
          "IsModified": false
        },
        "ScriptBlock": {
          "Default": [],
          "Description": "ScriptBlocks containing tests to be executed.",
          "Value": [],
          "IsModified": false
        },
        "Container": {
          "Default": [],
          "Description": "ContainerInfo objects containing tests to be executed.",
          "Value": [],
          "IsModified": false
        },
        "TestExtension": {
          "Default": ".Tests.ps1",
          "Description": "Filter used to identify test files.",
          "Value": ".Tests.ps1",
          "IsModified": false
        },
        "Exit": {
          "Default": false,
          "Description": "Exit with non-zero exit code when the test run fails. Exit code is always set to `$LASTEXITCODE` even when this option is `$false`. When used together with Throw, throwing an exception is preferred.",
          "Value": false,
          "IsModified": false
        },
        "Throw": {
          "Default": false,
          "Description": "Throw an exception when test run fails. When used together with Exit, throwing an exception is preferred.",
          "Value": false,
          "IsModified": false
        },
        "PassThru": {
          "Default": false,
          "Description": "Return result object to the pipeline after finishing the test run.",
          "Value": true,
          "IsModified": true
        },
        "SkipRun": {
          "Default": false,
          "Description": "Runs the discovery phase but skips run. Use it with PassThru to get object populated with all tests.",
          "Value": false,
          "IsModified": false
        },
        "SkipRemainingOnFailure": {
          "Default": "None",
          "Description": "Skips remaining tests after failure for selected scope, options are None, Run, Container and Block.",
          "Value": "None",
          "IsModified": false
        }
      },
      "Filter": {
        "Tag": {
          "Default": [],
          "Description": "Tags of Describe, Context or It to be run.",
          "Value": [],
          "IsModified": false
        },
        "ExcludeTag": {
          "Default": [],
          "Description": "Tags of Describe, Context or It to be excluded from the run.",
          "Value": [],
          "IsModified": false
        },
        "Line": {
          "Default": [],
          "Description": "Filter by file and scriptblock start line, useful to run parsed tests programmatically to avoid problems with expanded names. Example: 'C:\\tests\\file1.Tests.ps1:37'",
          "Value": [],
          "IsModified": false
        },
        "ExcludeLine": {
          "Default": [],
          "Description": "Exclude by file and scriptblock start line, takes precedence over Line.",
          "Value": [],
          "IsModified": false
        },
        "FullName": {
          "Default": [],
          "Description": "Full name of test with -like wildcards, joined by dot. Example: '*.describe Get-Item.test1'",
          "Value": [],
          "IsModified": false
        }
      },
      "CodeCoverage": {
        "Enabled": {
          "Default": false,
          "Description": "Enable CodeCoverage.",
          "Value": false,
          "IsModified": false
        },
        "OutputFormat": {
          "Default": "JaCoCo",
          "Description": "Format to use for code coverage report. Possible values: JaCoCo, CoverageGutters, Cobertura",
          "Value": "JaCoCo",
          "IsModified": false
        },
        "OutputPath": {
          "Default": "coverage.xml",
          "Description": "Path relative to the current directory where code coverage report is saved.",
          "Value": "coverage.xml",
          "IsModified": false
        },
        "OutputEncoding": {
          "Default": "UTF8",
          "Description": "Encoding of the output file.",
          "Value": "UTF8",
          "IsModified": false
        },
        "Path": {
          "Default": [],
          "Description": "Directories or files to be used for code coverage, by default the Path(s) from general settings are used, unless overridden here.",
          "Value": [],
          "IsModified": false
        },
        "ExcludeTests": {
          "Default": true,
          "Description": "Exclude tests from code coverage. This uses the TestFilter from general configuration.",
          "Value": true,
          "IsModified": false
        },
        "RecursePaths": {
          "Default": true,
          "Description": "Will recurse through directories in the Path option.",
          "Value": true,
          "IsModified": false
        },
        "CoveragePercentTarget": {
          "Default": 75.0,
          "Description": "Target percent of code coverage that you want to achieve, default 75%.",
          "Value": 75.0,
          "IsModified": false
        },
        "UseBreakpoints": {
          "Default": true,
          "Description": "EXPERIMENTAL: When false, use Profiler based tracer to do CodeCoverage instead of using breakpoints.",
          "Value": true,
          "IsModified": false
        },
        "SingleHitBreakpoints": {
          "Default": true,
          "Description": "Remove breakpoint when it is hit.",
          "Value": true,
          "IsModified": false
        }
      },
      "TestResult": {
        "Enabled": {
          "Default": false,
          "Description": "Enable TestResult.",
          "Value": true,
          "IsModified": true
        },
        "OutputFormat": {
          "Default": "NUnitXml",
          "Description": "Format to use for test result report. Possible values: NUnitXml, NUnit2.5, NUnit3 or JUnitXml",
          "Value": "NUnitXml",
          "IsModified": false
        },
        "OutputPath": {
          "Default": "testResults.xml",
          "Description": "Path relative to the current directory where test result report is saved.",
          "Value": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\TestResults\\EnhancedDocumentationSystem-UnitTests-20250828-195721.xml",
          "IsModified": true
        },
        "OutputEncoding": {
          "Default": "UTF8",
          "Description": "Encoding of the output file.",
          "Value": "UTF8",
          "IsModified": false
        },
        "TestSuiteName": {
          "Default": "Pester",
          "Description": "Set the name assigned to the root 'test-suite' element.",
          "Value": "Pester",
          "IsModified": false
        }
      },
      "Should": {
        "ErrorAction": {
          "Default": "Stop",
          "Description": "Controls if Should throws on error. Use 'Stop' to throw on error, or 'Continue' to fail at the end of the test.",
          "Value": "Stop",
          "IsModified": false
        }
      },
      "Debug": {
        "ShowFullErrors": {
          "Default": false,
          "Description": "Show full errors including Pester internal stack. This property is deprecated, and if set to true it will override Output.StackTraceVerbosity to 'Full'.",
          "Value": false,
          "IsModified": false
        },
        "WriteDebugMessages": {
          "Default": false,
          "Description": "Write Debug messages to screen.",
          "Value": false,
          "IsModified": false
        },
        "WriteDebugMessagesFrom": {
          "Default": [
            "Discovery",
            "Skip",
            "Mock",
            "CodeCoverage"
          ],
          "Description": "Write Debug messages from a given source, WriteDebugMessages must be set to true for this to work. You can use like wildcards to get messages from multiple sources, as well as * to get everything.",
          "Value": [
            "Discovery",
            "Skip",
            "Mock",
            "CodeCoverage"
          ],
          "IsModified": false
        },
        "ShowNavigationMarkers": {
          "Default": false,
          "Description": "Write paths after every block and test, for easy navigation in VSCode.",
          "Value": false,
          "IsModified": false
        },
        "ReturnRawResultObject": {
          "Default": false,
          "Description": "Returns unfiltered result object, this is for development only. Do not rely on this object for additional properties, non-public properties will be renamed without previous notice.",
          "Value": false,
          "IsModified": false
        }
      },
      "Output": {
        "Verbosity": {
          "Default": "Normal",
          "Description": "The verbosity of output, options are None, Normal, Detailed and Diagnostic.",
          "Value": "Normal",
          "IsModified": true
        },
        "StackTraceVerbosity": {
          "Default": "Filtered",
          "Description": "The verbosity of stacktrace output, options are None, FirstLine, Filtered and Full.",
          "Value": "Filtered",
          "IsModified": false
        },
        "CIFormat": {
          "Default": "Auto",
          "Description": "The CI format of error output in build logs, options are None, Auto, AzureDevops and GithubActions.",
          "Value": "None",
          "IsModified": true
        },
        "CILogLevel": {
          "Default": "Error",
          "Description": "The CI log level in build logs, options are Error and Warning.",
          "Value": "Error",
          "IsModified": false
        },
        "RenderMode": {
          "Default": "Auto",
          "Description": "The mode used to render console output, options are Auto, Ansi, ConsoleColor and Plaintext.",
          "Value": "Ansi",
          "IsModified": true
        }
      },
      "TestDrive": {
        "Enabled": {
          "Default": true,
          "Description": "Enable TestDrive.",
          "Value": true,
          "IsModified": false
        }
      },
      "TestRegistry": {
        "Enabled": {
          "Default": true,
          "Description": "Enable TestRegistry.",
          "Value": true,
          "IsModified": false
        }
      }
    },
    "DiscoveryDuration": {
      "Ticks": 775850,
      "Days": 0,
      "Hours": 0,
      "Milliseconds": 77,
      "Microseconds": 585,
      "Nanoseconds": 0,
      "Minutes": 0,
      "Seconds": 0,
      "TotalDays": 8.97974537037037E-07,
      "TotalHours": 2.155138888888889E-05,
      "TotalMilliseconds": 77.585,
      "TotalMicroseconds": 77585.0,
      "TotalNanoseconds": 77585000.0,
      "TotalMinutes": 0.0012930833333333334,
      "TotalSeconds": 0.077585
    },
    "UserDuration": {
      "Ticks": 1212140,
      "Days": 0,
      "Hours": 0,
      "Milliseconds": 121,
      "Microseconds": 214,
      "Nanoseconds": 0,
      "Minutes": 0,
      "Seconds": 0,
      "TotalDays": 1.4029398148148147E-06,
      "TotalHours": 3.3670555555555553E-05,
      "TotalMilliseconds": 121.214,
      "TotalMicroseconds": 121214.0,
      "TotalNanoseconds": 121214000.0,
      "TotalMinutes": 0.0020202333333333333,
      "TotalSeconds": 0.121214
    },
    "FrameworkDuration": {
      "Ticks": 2850679,
      "Days": 0,
      "Hours": 0,
      "Milliseconds": 285,
      "Microseconds": 67,
      "Nanoseconds": 900,
      "Minutes": 0,
      "Seconds": 0,
      "TotalDays": 3.299396990740741E-06,
      "TotalHours": 7.918552777777777E-05,
      "TotalMilliseconds": 285.0679,
      "TotalMicroseconds": 285067.9,
      "TotalNanoseconds": 285067900.0,
      "TotalMinutes": 0.004751131666666667,
      "TotalSeconds": 0.2850679
    },
    "Failed": [],
    "FailedBlocks": [],
    "FailedContainers": [],
    "Passed": [
      {
        "Name": "Should process files at 100+ files per second",
        "Path": [
          "Enhanced Documentation System - Performance",
          "File Processing Performance",
          "Should process files at 100+ files per second"
        ],
        "Data": null,
        "ExpandedName": "Should process files at 100+ files per second",
        "ExpandedPath": "Enhanced Documentation System - Performance.File Processing Performance.Should process files at 100+ files per second",
        "Result": "Passed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 336167,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 33,
          "Microseconds": 616,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.890821759259259E-07,
          "TotalHours": 9.337972222222222E-06,
          "TotalMilliseconds": 33.6167,
          "TotalMicroseconds": 33616.7,
          "TotalNanoseconds": 33616700.0,
          "TotalMinutes": 0.0005602783333333334,
          "TotalSeconds": 0.0336167
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }",
            "Type": 19,
            "Start": 32406,
            "Length": 1019,
            "StartLine": 690,
            "StartColumn": 64,
            "EndLine": 709,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "af6eba28-5ce5-4418-9768-56a1fbe3c3b2",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }",
            "Parent": "{\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "File Processing Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "File Processing Performance"
          ],
          "Data": null,
          "ExpandedName": "File Processing Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.File Processing Performance",
          "Blocks": [],
          "Tests": [
            "[+] Should process files at 100+ files per second",
            "[!] Should handle incremental updates efficiently"
          ],
          "Result": "Passed",
          "FailedCount": 0,
          "PassedCount": 1,
          "SkippedCount": 1,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 698023,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 69,
            "Microseconds": 802,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.078969907407407E-07,
            "TotalHours": 1.9389527777777777E-05,
            "TotalMilliseconds": 69.8023,
            "TotalMicroseconds": 69802.3,
            "TotalNanoseconds": 69802300.0,
            "TotalMinutes": 0.0011633716666666666,
            "TotalSeconds": 0.0698023
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Tests": "",
            "Result": "Passed",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 4,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:00.2420494",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Passed": true,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.9484705-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1235608",
            "UserDuration": "00:00:00.1184886",
            "OwnDuration": "00:00:00.0923743",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                    Set-ItResult -Skipped -Because \"ParallelProcessing module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 570,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "44a13c71-9201-4e8b-ad0f-647542750043",
            "Ast": "{\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[+] Should process files at 100+ files per second",
            "[!] Should handle incremental updates efficiently"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:22.0010428-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 138677,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 13,
            "Microseconds": 867,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.6050578703703703E-07,
            "TotalHours": 3.852138888888889E-06,
            "TotalMilliseconds": 13.8677,
            "TotalMicroseconds": 13867.7,
            "TotalNanoseconds": 13867700.0,
            "TotalMinutes": 0.00023112833333333333,
            "TotalSeconds": 0.0138677
          },
          "UserDuration": {
            "Ticks": 559346,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 55,
            "Microseconds": 934,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.473912037037037E-07,
            "TotalHours": 1.553738888888889E-05,
            "TotalMilliseconds": 55.9346,
            "TotalMicroseconds": 55934.6,
            "TotalNanoseconds": 55934600.0,
            "TotalMinutes": 0.0009322433333333333,
            "TotalSeconds": 0.0559346
          },
          "OwnDuration": {
            "Ticks": 358845,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 35,
            "Microseconds": 884,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.153298611111111E-07,
            "TotalHours": 9.967916666666667E-06,
            "TotalMilliseconds": 35.8845,
            "TotalMicroseconds": 35884.5,
            "TotalNanoseconds": 35884500.0,
            "TotalMinutes": 0.000598075,
            "TotalSeconds": 0.0358845
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "3923e4a0-33eb-4513-8267-579860157f6e",
            "Ast": "{\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }"
          },
          "StartLine": 657,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 1,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 1,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 690,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:22.0271161-04:00",
        "Passed": true,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 301978,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 30,
          "Microseconds": 197,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.495115740740741E-07,
          "TotalHours": 8.388277777777778E-06,
          "TotalMilliseconds": 30.1978,
          "TotalMicroseconds": 30197.8,
          "TotalNanoseconds": 30197800.0,
          "TotalMinutes": 0.0005032966666666666,
          "TotalSeconds": 0.0301978
        },
        "FrameworkDuration": {
          "Ticks": 34189,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 3,
          "Microseconds": 418,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.957060185185185E-08,
          "TotalHours": 9.496944444444445E-07,
          "TotalMilliseconds": 3.4189,
          "TotalMicroseconds": 3418.9,
          "TotalNanoseconds": 3418900.0,
          "TotalMinutes": 5.6981666666666663E-05,
          "TotalSeconds": 0.0034189
        },
        "PluginData": null,
        "FrameworkData": null
      }
    ],
    "Skipped": [
      {
        "Name": "Should create thread-safe CPG wrapper",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Thread-Safe Operations",
          "Should create thread-safe CPG wrapper"
        ],
        "Data": null,
        "ExpandedName": "Should create thread-safe CPG wrapper",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should create thread-safe CPG wrapper",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 123189,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 12,
          "Microseconds": 318,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.425798611111111E-07,
          "TotalHours": 3.4219166666666665E-06,
          "TotalMilliseconds": 12.3189,
          "TotalMicroseconds": 12318.9,
          "TotalNanoseconds": 12318900.0,
          "TotalMinutes": 0.000205315,
          "TotalSeconds": 0.0123189
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }",
            "Type": 19,
            "Start": 6783,
            "Length": 175,
            "StartLine": 171,
            "StartColumn": 125,
            "EndLine": 175,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "1530621e-ac93-45f4-aa71-1e9f7cf97ac7",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }",
            "Parent": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Thread-Safe Operations",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Thread-Safe Operations"
          ],
          "Data": null,
          "ExpandedName": "Thread-Safe Operations",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
          "Blocks": [],
          "Tests": [
            "[!] Should create thread-safe CPG wrapper",
            "[!] Should handle concurrent operations safely",
            "[!] Should provide thread safety statistics"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 270195,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 27,
            "Microseconds": 19,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.1272569444444445E-07,
            "TotalHours": 7.505416666666667E-06,
            "TotalMilliseconds": 27.0195,
            "TotalMicroseconds": 27019.5,
            "TotalNanoseconds": 27019500.0,
            "TotalMinutes": 0.000450325,
            "TotalSeconds": 0.0270195
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.0446447",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Passed": true,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.8460832-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0437822",
            "UserDuration": "00:00:00.0008625",
            "OwnDuration": "-00:00:00.0511809",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 122,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should create thread-safe CPG wrapper",
            "[!] Should handle concurrent operations safely",
            "[!] Should provide thread safety statistics"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.8502057-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 268976,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 26,
            "Microseconds": 897,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.113148148148148E-07,
            "TotalHours": 7.471555555555556E-06,
            "TotalMilliseconds": 26.8976,
            "TotalMicroseconds": 26897.6,
            "TotalNanoseconds": 26897600.0,
            "TotalMinutes": 0.0004482933333333333,
            "TotalSeconds": 0.0268976
          },
          "UserDuration": {
            "Ticks": 1219,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 121,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4108796296296297E-09,
            "TotalHours": 3.386111111111111E-08,
            "TotalMilliseconds": 0.1219,
            "TotalMicroseconds": 121.9,
            "TotalNanoseconds": 121900.0,
            "TotalMinutes": 2.0316666666666666E-06,
            "TotalSeconds": 0.0001219
          },
          "OwnDuration": {
            "Ticks": 135245,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 13,
            "Microseconds": 524,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.565335648148148E-07,
            "TotalHours": 3.7568055555555555E-06,
            "TotalMilliseconds": 13.5245,
            "TotalMicroseconds": 13524.5,
            "TotalNanoseconds": 13524500.0,
            "TotalMinutes": 0.00022540833333333334,
            "TotalSeconds": 0.0135245
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "da47584c-f610-4c28-8e6c-c05ce80022b6",
            "Ast": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }"
          },
          "StartLine": 169,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 171,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.8526486-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 123189,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 12,
          "Microseconds": 318,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.425798611111111E-07,
          "TotalHours": 3.4219166666666665E-06,
          "TotalMilliseconds": 12.3189,
          "TotalMicroseconds": 12318.9,
          "TotalNanoseconds": 12318900.0,
          "TotalMinutes": 0.000205315,
          "TotalSeconds": 0.0123189
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should handle concurrent operations safely",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Thread-Safe Operations",
          "Should handle concurrent operations safely"
        ],
        "Data": null,
        "ExpandedName": "Should handle concurrent operations safely",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should handle concurrent operations safely",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 3034,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 303,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.511574074074074E-09,
          "TotalHours": 8.427777777777778E-08,
          "TotalMilliseconds": 0.3034,
          "TotalMicroseconds": 303.4,
          "TotalNanoseconds": 303400.0,
          "TotalMinutes": 5.056666666666667E-06,
          "TotalSeconds": 0.0003034
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }",
            "Type": 19,
            "Start": 7103,
            "Length": 737,
            "StartLine": 177,
            "StartColumn": 130,
            "EndLine": 195,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "0203f3cb-fb2a-4c8b-8d2a-39f63b7aa6c4",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }",
            "Parent": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Thread-Safe Operations",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Thread-Safe Operations"
          ],
          "Data": null,
          "ExpandedName": "Thread-Safe Operations",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
          "Blocks": [],
          "Tests": [
            "[!] Should create thread-safe CPG wrapper",
            "[!] Should handle concurrent operations safely",
            "[!] Should provide thread safety statistics"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 270195,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 27,
            "Microseconds": 19,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.1272569444444445E-07,
            "TotalHours": 7.505416666666667E-06,
            "TotalMilliseconds": 27.0195,
            "TotalMicroseconds": 27019.5,
            "TotalNanoseconds": 27019500.0,
            "TotalMinutes": 0.000450325,
            "TotalSeconds": 0.0270195
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.0446447",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Passed": true,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.8460832-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0437822",
            "UserDuration": "00:00:00.0008625",
            "OwnDuration": "-00:00:00.0511809",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 122,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should create thread-safe CPG wrapper",
            "[!] Should handle concurrent operations safely",
            "[!] Should provide thread safety statistics"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.8502057-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 268976,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 26,
            "Microseconds": 897,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.113148148148148E-07,
            "TotalHours": 7.471555555555556E-06,
            "TotalMilliseconds": 26.8976,
            "TotalMicroseconds": 26897.6,
            "TotalNanoseconds": 26897600.0,
            "TotalMinutes": 0.0004482933333333333,
            "TotalSeconds": 0.0268976
          },
          "UserDuration": {
            "Ticks": 1219,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 121,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4108796296296297E-09,
            "TotalHours": 3.386111111111111E-08,
            "TotalMilliseconds": 0.1219,
            "TotalMicroseconds": 121.9,
            "TotalNanoseconds": 121900.0,
            "TotalMinutes": 2.0316666666666666E-06,
            "TotalSeconds": 0.0001219
          },
          "OwnDuration": {
            "Ticks": 135245,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 13,
            "Microseconds": 524,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.565335648148148E-07,
            "TotalHours": 3.7568055555555555E-06,
            "TotalMilliseconds": 13.5245,
            "TotalMicroseconds": 13524.5,
            "TotalNanoseconds": 13524500.0,
            "TotalMinutes": 0.00022540833333333334,
            "TotalSeconds": 0.0135245
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "da47584c-f610-4c28-8e6c-c05ce80022b6",
            "Ast": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }"
          },
          "StartLine": 169,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 177,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.8646733-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 3034,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 303,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.511574074074074E-09,
          "TotalHours": 8.427777777777778E-08,
          "TotalMilliseconds": 0.3034,
          "TotalMicroseconds": 303.4,
          "TotalNanoseconds": 303400.0,
          "TotalMinutes": 5.056666666666667E-06,
          "TotalSeconds": 0.0003034
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should provide thread safety statistics",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Thread-Safe Operations",
          "Should provide thread safety statistics"
        ],
        "Data": null,
        "ExpandedName": "Should provide thread safety statistics",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should provide thread safety statistics",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 8727,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 872,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.0100694444444445E-08,
          "TotalHours": 2.4241666666666665E-07,
          "TotalMilliseconds": 0.8727,
          "TotalMicroseconds": 872.7,
          "TotalNanoseconds": 872700.0,
          "TotalMinutes": 1.4545E-05,
          "TotalSeconds": 0.0008727
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }",
            "Type": 19,
            "Start": 7982,
            "Length": 311,
            "StartLine": 197,
            "StartColumn": 127,
            "EndLine": 203,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "b7187138-5db5-4271-bf0d-0de916a96a0a",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }",
            "Parent": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Thread-Safe Operations",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Thread-Safe Operations"
          ],
          "Data": null,
          "ExpandedName": "Thread-Safe Operations",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
          "Blocks": [],
          "Tests": [
            "[!] Should create thread-safe CPG wrapper",
            "[!] Should handle concurrent operations safely",
            "[!] Should provide thread safety statistics"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 270195,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 27,
            "Microseconds": 19,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.1272569444444445E-07,
            "TotalHours": 7.505416666666667E-06,
            "TotalMilliseconds": 27.0195,
            "TotalMicroseconds": 27019.5,
            "TotalNanoseconds": 27019500.0,
            "TotalMinutes": 0.000450325,
            "TotalSeconds": 0.0270195
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.0446447",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Passed": true,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.8460832-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0437822",
            "UserDuration": "00:00:00.0008625",
            "OwnDuration": "-00:00:00.0511809",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 122,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should create thread-safe CPG wrapper",
            "[!] Should handle concurrent operations safely",
            "[!] Should provide thread safety statistics"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.8502057-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 268976,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 26,
            "Microseconds": 897,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.113148148148148E-07,
            "TotalHours": 7.471555555555556E-06,
            "TotalMilliseconds": 26.8976,
            "TotalMicroseconds": 26897.6,
            "TotalNanoseconds": 26897600.0,
            "TotalMinutes": 0.0004482933333333333,
            "TotalSeconds": 0.0268976
          },
          "UserDuration": {
            "Ticks": 1219,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 121,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4108796296296297E-09,
            "TotalHours": 3.386111111111111E-08,
            "TotalMilliseconds": 0.1219,
            "TotalMicroseconds": 121.9,
            "TotalNanoseconds": 121900.0,
            "TotalMinutes": 2.0316666666666666E-06,
            "TotalSeconds": 0.0001219
          },
          "OwnDuration": {
            "Ticks": 135245,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 13,
            "Microseconds": 524,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.565335648148148E-07,
            "TotalHours": 3.7568055555555555E-06,
            "TotalMilliseconds": 13.5245,
            "TotalMicroseconds": 13524.5,
            "TotalNanoseconds": 13524500.0,
            "TotalMinutes": 0.00022540833333333334,
            "TotalSeconds": 0.0135245
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "da47584c-f610-4c28-8e6c-c05ce80022b6",
            "Ast": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }"
          },
          "StartLine": 169,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 197,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.8649763-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 8727,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 872,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.0100694444444445E-08,
          "TotalHours": 2.4241666666666665E-07,
          "TotalMilliseconds": 0.8727,
          "TotalMicroseconds": 872.7,
          "TotalNanoseconds": 872700.0,
          "TotalMinutes": 1.4545E-05,
          "TotalSeconds": 0.0008727
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should build call graphs from source code",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Call Graph Builder",
          "Should build call graphs from source code"
        ],
        "Data": null,
        "ExpandedName": "Should build call graphs from source code",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should build call graphs from source code",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 2930,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 293,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.3912037037037036E-09,
          "TotalHours": 8.138888888888889E-08,
          "TotalMilliseconds": 0.293,
          "TotalMicroseconds": 293.0,
          "TotalNanoseconds": 293000.0,
          "TotalMinutes": 4.883333333333334E-06,
          "TotalSeconds": 0.000293
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Type": 19,
            "Start": 8730,
            "Length": 665,
            "StartLine": 213,
            "StartColumn": 125,
            "EndLine": 233,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "a1cc38d9-c9cf-46c2-a0e2-d923d9cf389b",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Call Graph Builder",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Call Graph Builder"
          ],
          "Data": null,
          "ExpandedName": "Call Graph Builder",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder",
          "Blocks": [],
          "Tests": [
            "[!] Should build call graphs from source code",
            "[!] Should detect recursive calls"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 2,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 318573,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 31,
            "Microseconds": 857,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.6871875E-07,
            "TotalHours": 8.84925E-06,
            "TotalMilliseconds": 31.8573,
            "TotalMicroseconds": 31857.3,
            "TotalNanoseconds": 31857300.0,
            "TotalMinutes": 0.000530955,
            "TotalSeconds": 0.0318573
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.0446447",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Passed": true,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.8460832-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0437822",
            "UserDuration": "00:00:00.0008625",
            "OwnDuration": "-00:00:00.0511809",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 122,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "027a9c91-cea0-4cfa-9e1b-659e3062733d",
            "Ast": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should build call graphs from source code",
            "[!] Should detect recursive calls"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.8772268-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 316475,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 31,
            "Microseconds": 647,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.6629050925925924E-07,
            "TotalHours": 8.790972222222222E-06,
            "TotalMilliseconds": 31.6475,
            "TotalMicroseconds": 31647.5,
            "TotalNanoseconds": 31647500.0,
            "TotalMinutes": 0.0005274583333333333,
            "TotalSeconds": 0.0316475
          },
          "UserDuration": {
            "Ticks": 2098,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 209,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.428240740740741E-09,
            "TotalHours": 5.827777777777778E-08,
            "TotalMilliseconds": 0.2098,
            "TotalMicroseconds": 209.8,
            "TotalNanoseconds": 209800.0,
            "TotalMinutes": 3.4966666666666665E-06,
            "TotalSeconds": 0.0002098
          },
          "OwnDuration": {
            "Ticks": 312988,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 31,
            "Microseconds": 298,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.622546296296296E-07,
            "TotalHours": 8.694111111111111E-06,
            "TotalMilliseconds": 31.2988,
            "TotalMicroseconds": 31298.8,
            "TotalNanoseconds": 31298800.0,
            "TotalMinutes": 0.0005216466666666667,
            "TotalSeconds": 0.0312988
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "db3cdda1-7f6c-43b2-8e4e-dd28b7179713",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 206,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 2,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 213,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.8777977-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 2930,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 293,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.3912037037037036E-09,
          "TotalHours": 8.138888888888889E-08,
          "TotalMilliseconds": 0.293,
          "TotalMicroseconds": 293.0,
          "TotalNanoseconds": 293000.0,
          "TotalMinutes": 4.883333333333334E-06,
          "TotalSeconds": 0.000293
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should detect recursive calls",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Call Graph Builder",
          "Should detect recursive calls"
        ],
        "Data": null,
        "ExpandedName": "Should detect recursive calls",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should detect recursive calls",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 2655,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 265,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.0729166666666665E-09,
          "TotalHours": 7.375E-08,
          "TotalMilliseconds": 0.2655,
          "TotalMicroseconds": 265.5,
          "TotalNanoseconds": 265500.0,
          "TotalMinutes": 4.425E-06,
          "TotalSeconds": 0.0002655
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Type": 19,
            "Start": 9523,
            "Length": 589,
            "StartLine": 235,
            "StartColumn": 113,
            "EndLine": 250,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "336033ff-e169-4ad1-9286-7583944da79f",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Call Graph Builder",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Call Graph Builder"
          ],
          "Data": null,
          "ExpandedName": "Call Graph Builder",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder",
          "Blocks": [],
          "Tests": [
            "[!] Should build call graphs from source code",
            "[!] Should detect recursive calls"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 2,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 318573,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 31,
            "Microseconds": 857,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.6871875E-07,
            "TotalHours": 8.84925E-06,
            "TotalMilliseconds": 31.8573,
            "TotalMicroseconds": 31857.3,
            "TotalNanoseconds": 31857300.0,
            "TotalMinutes": 0.000530955,
            "TotalSeconds": 0.0318573
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.0446447",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Passed": true,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.8460832-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0437822",
            "UserDuration": "00:00:00.0008625",
            "OwnDuration": "-00:00:00.0511809",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 122,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "027a9c91-cea0-4cfa-9e1b-659e3062733d",
            "Ast": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should build call graphs from source code",
            "[!] Should detect recursive calls"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.8772268-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 316475,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 31,
            "Microseconds": 647,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.6629050925925924E-07,
            "TotalHours": 8.790972222222222E-06,
            "TotalMilliseconds": 31.6475,
            "TotalMicroseconds": 31647.5,
            "TotalNanoseconds": 31647500.0,
            "TotalMinutes": 0.0005274583333333333,
            "TotalSeconds": 0.0316475
          },
          "UserDuration": {
            "Ticks": 2098,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 209,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.428240740740741E-09,
            "TotalHours": 5.827777777777778E-08,
            "TotalMilliseconds": 0.2098,
            "TotalMicroseconds": 209.8,
            "TotalNanoseconds": 209800.0,
            "TotalMinutes": 3.4966666666666665E-06,
            "TotalSeconds": 0.0002098
          },
          "OwnDuration": {
            "Ticks": 312988,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 31,
            "Microseconds": 298,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.622546296296296E-07,
            "TotalHours": 8.694111111111111E-06,
            "TotalMilliseconds": 31.2988,
            "TotalMicroseconds": 31298.8,
            "TotalNanoseconds": 31298800.0,
            "TotalMinutes": 0.0005216466666666667,
            "TotalSeconds": 0.0312988
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "db3cdda1-7f6c-43b2-8e4e-dd28b7179713",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 206,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 2,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 235,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.8781007-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 2655,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 265,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.0729166666666665E-09,
          "TotalHours": 7.375E-08,
          "TotalMilliseconds": 0.2655,
          "TotalMicroseconds": 265.5,
          "TotalNanoseconds": 265500.0,
          "TotalMinutes": 4.425E-06,
          "TotalSeconds": 0.0002655
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should track variable definitions and uses",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Data Flow Tracker",
          "Should track variable definitions and uses"
        ],
        "Data": null,
        "ExpandedName": "Should track variable definitions and uses",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should track variable definitions and uses",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 2353,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 235,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.7233796296296294E-09,
          "TotalHours": 6.536111111111111E-08,
          "TotalMilliseconds": 0.2353,
          "TotalMicroseconds": 235.3,
          "TotalNanoseconds": 235300.0,
          "TotalMinutes": 3.921666666666667E-06,
          "TotalSeconds": 0.0002353
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Type": 19,
            "Start": 10546,
            "Length": 475,
            "StartLine": 260,
            "StartColumn": 125,
            "EndLine": 272,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "1fb33e77-c40d-402b-ad21-18b51ba5de39",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Data Flow Tracker",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Data Flow Tracker"
          ],
          "Data": null,
          "ExpandedName": "Data Flow Tracker",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker",
          "Blocks": [],
          "Tests": [
            "[!] Should track variable definitions and uses",
            "[!] Should perform taint analysis"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 2,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 369488,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 36,
            "Microseconds": 948,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.2764814814814813E-07,
            "TotalHours": 1.0263555555555555E-05,
            "TotalMilliseconds": 36.9488,
            "TotalMicroseconds": 36948.8,
            "TotalNanoseconds": 36948800.0,
            "TotalMinutes": 0.0006158133333333334,
            "TotalSeconds": 0.0369488
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.0446447",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Passed": true,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.8460832-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0437822",
            "UserDuration": "00:00:00.0008625",
            "OwnDuration": "-00:00:00.0511809",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 122,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a72e6b0c-7353-4362-81a1-94b8c5b70d7a",
            "Ast": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should track variable definitions and uses",
            "[!] Should perform taint analysis"
          ],
          "Passed": true,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.8820631-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 366614,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 36,
            "Microseconds": 661,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.2432175925925927E-07,
            "TotalHours": 1.0183722222222222E-05,
            "TotalMilliseconds": 36.6614,
            "TotalMicroseconds": 36661.4,
            "TotalNanoseconds": 36661400.0,
            "TotalMinutes": 0.0006110233333333333,
            "TotalSeconds": 0.0366614
          },
          "UserDuration": {
            "Ticks": 2874,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 287,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.3263888888888888E-09,
            "TotalHours": 7.983333333333333E-08,
            "TotalMilliseconds": 0.2874,
            "TotalMicroseconds": 287.4,
            "TotalNanoseconds": 287400.0,
            "TotalMinutes": 4.79E-06,
            "TotalSeconds": 0.0002874
          },
          "OwnDuration": {
            "Ticks": 365049,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 36,
            "Microseconds": 504,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.2251041666666667E-07,
            "TotalHours": 1.014025E-05,
            "TotalMilliseconds": 36.5049,
            "TotalMicroseconds": 36504.9,
            "TotalNanoseconds": 36504900.0,
            "TotalMinutes": 0.000608415,
            "TotalSeconds": 0.0365049
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "fb382826-3a91-4378-a704-ef4fd767b7d5",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 253,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 2,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 260,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.8825252-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 2353,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 235,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.7233796296296294E-09,
          "TotalHours": 6.536111111111111E-08,
          "TotalMilliseconds": 0.2353,
          "TotalMicroseconds": 235.3,
          "TotalNanoseconds": 235300.0,
          "TotalMinutes": 3.921666666666667E-06,
          "TotalSeconds": 0.0002353
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should perform taint analysis",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Data Flow Tracker",
          "Should perform taint analysis"
        ],
        "Data": null,
        "ExpandedName": "Should perform taint analysis",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should perform taint analysis",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 2086,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 208,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.414351851851852E-09,
          "TotalHours": 5.794444444444444E-08,
          "TotalMilliseconds": 0.2086,
          "TotalMicroseconds": 208.6,
          "TotalNanoseconds": 208600.0,
          "TotalMinutes": 3.4766666666666667E-06,
          "TotalSeconds": 0.0002086
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Type": 19,
            "Start": 11148,
            "Length": 563,
            "StartLine": 274,
            "StartColumn": 112,
            "EndLine": 286,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "db947e59-5570-4af6-ba22-4ba0b8f6eba6",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Data Flow Tracker",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Data Flow Tracker"
          ],
          "Data": null,
          "ExpandedName": "Data Flow Tracker",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker",
          "Blocks": [],
          "Tests": [
            "[!] Should track variable definitions and uses",
            "[!] Should perform taint analysis"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 2,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 369488,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 36,
            "Microseconds": 948,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.2764814814814813E-07,
            "TotalHours": 1.0263555555555555E-05,
            "TotalMilliseconds": 36.9488,
            "TotalMicroseconds": 36948.8,
            "TotalNanoseconds": 36948800.0,
            "TotalMinutes": 0.0006158133333333334,
            "TotalSeconds": 0.0369488
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.0446447",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Passed": true,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.8460832-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0437822",
            "UserDuration": "00:00:00.0008625",
            "OwnDuration": "-00:00:00.0511809",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 122,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a72e6b0c-7353-4362-81a1-94b8c5b70d7a",
            "Ast": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should track variable definitions and uses",
            "[!] Should perform taint analysis"
          ],
          "Passed": true,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.8820631-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 366614,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 36,
            "Microseconds": 661,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.2432175925925927E-07,
            "TotalHours": 1.0183722222222222E-05,
            "TotalMilliseconds": 36.6614,
            "TotalMicroseconds": 36661.4,
            "TotalNanoseconds": 36661400.0,
            "TotalMinutes": 0.0006110233333333333,
            "TotalSeconds": 0.0366614
          },
          "UserDuration": {
            "Ticks": 2874,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 287,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.3263888888888888E-09,
            "TotalHours": 7.983333333333333E-08,
            "TotalMilliseconds": 0.2874,
            "TotalMicroseconds": 287.4,
            "TotalNanoseconds": 287400.0,
            "TotalMinutes": 4.79E-06,
            "TotalSeconds": 0.0002874
          },
          "OwnDuration": {
            "Ticks": 365049,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 36,
            "Microseconds": 504,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.2251041666666667E-07,
            "TotalHours": 1.014025E-05,
            "TotalMilliseconds": 36.5049,
            "TotalMicroseconds": 36504.9,
            "TotalNanoseconds": 36504900.0,
            "TotalMinutes": 0.000608415,
            "TotalSeconds": 0.0365049
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "fb382826-3a91-4378-a704-ef4fd767b7d5",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 253,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 2,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 274,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.8827691-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 2086,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 208,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.414351851851852E-09,
          "TotalHours": 5.794444444444444E-08,
          "TotalMilliseconds": 0.2086,
          "TotalMicroseconds": 208.6,
          "TotalNanoseconds": 208600.0,
          "TotalMinutes": 3.4766666666666667E-06,
          "TotalSeconds": 0.0002086
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should connect to Ollama service",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Ollama API Integration",
          "Should connect to Ollama service"
        ],
        "Data": null,
        "ExpandedName": "Should connect to Ollama service",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should connect to Ollama service",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 2840,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 284,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.287037037037037E-09,
          "TotalHours": 7.888888888888889E-08,
          "TotalMilliseconds": 0.284,
          "TotalMicroseconds": 284.0,
          "TotalNanoseconds": 284000.0,
          "TotalMinutes": 4.7333333333333335E-06,
          "TotalSeconds": 0.000284
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }",
            "Type": 19,
            "Start": 13896,
            "Length": 222,
            "StartLine": 334,
            "StartColumn": 88,
            "EndLine": 339,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "bb38ef66-3027-4f0d-8fc6-4f8c7a9edeab",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Ollama API Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Ollama API Integration"
          ],
          "Data": null,
          "ExpandedName": "Ollama API Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration",
          "Blocks": [],
          "Tests": [
            "[!] Should connect to Ollama service",
            "[!] Should list available models",
            "[!] Should generate responses for code analysis"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 47996,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 799,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.5550925925925925E-08,
            "TotalHours": 1.3332222222222222E-06,
            "TotalMilliseconds": 4.7996,
            "TotalMicroseconds": 4799.6,
            "TotalNanoseconds": 4799600.0,
            "TotalMinutes": 7.999333333333334E-05,
            "TotalSeconds": 0.0047996
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0646703",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.8907373-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0634426",
            "UserDuration": "00:00:00.0012277",
            "OwnDuration": "00:00:00.0341818",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 294,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should connect to Ollama service",
            "[!] Should list available models",
            "[!] Should generate responses for code analysis"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.8912268-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 47287,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 728,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.4730324074074075E-08,
            "TotalHours": 1.3135277777777777E-06,
            "TotalMilliseconds": 4.7287,
            "TotalMicroseconds": 4728.7,
            "TotalNanoseconds": 4728700.0,
            "TotalMinutes": 7.881166666666667E-05,
            "TotalSeconds": 0.0047287
          },
          "UserDuration": {
            "Ticks": 709,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 70,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.206018518518518E-10,
            "TotalHours": 1.9694444444444444E-08,
            "TotalMilliseconds": 0.0709,
            "TotalMicroseconds": 70.9,
            "TotalNanoseconds": 70900.0,
            "TotalMinutes": 1.1816666666666666E-06,
            "TotalSeconds": 7.09E-05
          },
          "OwnDuration": {
            "Ticks": 40535,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 53,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.691550925925926E-08,
            "TotalHours": 1.1259722222222222E-06,
            "TotalMilliseconds": 4.0535,
            "TotalMicroseconds": 4053.5,
            "TotalNanoseconds": 4053500.0,
            "TotalMinutes": 6.755833333333333E-05,
            "TotalSeconds": 0.0040535
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "c6482a0c-a974-4d37-881a-5b20a1725bff",
            "Ast": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 333,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 334,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.8916834-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 2840,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 284,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.287037037037037E-09,
          "TotalHours": 7.888888888888889E-08,
          "TotalMilliseconds": 0.284,
          "TotalMicroseconds": 284.0,
          "TotalNanoseconds": 284000.0,
          "TotalMinutes": 4.7333333333333335E-06,
          "TotalSeconds": 0.000284
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should list available models",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Ollama API Integration",
          "Should list available models"
        ],
        "Data": null,
        "ExpandedName": "Should list available models",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should list available models",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 2317,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 231,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.681712962962963E-09,
          "TotalHours": 6.436111111111112E-08,
          "TotalMilliseconds": 0.2317,
          "TotalMicroseconds": 231.7,
          "TotalNanoseconds": 231700.0,
          "TotalMinutes": 3.861666666666666E-06,
          "TotalSeconds": 0.0002317
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }",
            "Type": 19,
            "Start": 14217,
            "Length": 279,
            "StartLine": 341,
            "StartColumn": 84,
            "EndLine": 347,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "9cf7c2bb-3793-4269-ade5-3890ce0f1671",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Ollama API Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Ollama API Integration"
          ],
          "Data": null,
          "ExpandedName": "Ollama API Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration",
          "Blocks": [],
          "Tests": [
            "[!] Should connect to Ollama service",
            "[!] Should list available models",
            "[!] Should generate responses for code analysis"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 47996,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 799,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.5550925925925925E-08,
            "TotalHours": 1.3332222222222222E-06,
            "TotalMilliseconds": 4.7996,
            "TotalMicroseconds": 4799.6,
            "TotalNanoseconds": 4799600.0,
            "TotalMinutes": 7.999333333333334E-05,
            "TotalSeconds": 0.0047996
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0646703",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.8907373-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0634426",
            "UserDuration": "00:00:00.0012277",
            "OwnDuration": "00:00:00.0341818",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 294,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should connect to Ollama service",
            "[!] Should list available models",
            "[!] Should generate responses for code analysis"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.8912268-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 47287,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 728,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.4730324074074075E-08,
            "TotalHours": 1.3135277777777777E-06,
            "TotalMilliseconds": 4.7287,
            "TotalMicroseconds": 4728.7,
            "TotalNanoseconds": 4728700.0,
            "TotalMinutes": 7.881166666666667E-05,
            "TotalSeconds": 0.0047287
          },
          "UserDuration": {
            "Ticks": 709,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 70,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.206018518518518E-10,
            "TotalHours": 1.9694444444444444E-08,
            "TotalMilliseconds": 0.0709,
            "TotalMicroseconds": 70.9,
            "TotalNanoseconds": 70900.0,
            "TotalMinutes": 1.1816666666666666E-06,
            "TotalSeconds": 7.09E-05
          },
          "OwnDuration": {
            "Ticks": 40535,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 53,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.691550925925926E-08,
            "TotalHours": 1.1259722222222222E-06,
            "TotalMilliseconds": 4.0535,
            "TotalMicroseconds": 4053.5,
            "TotalNanoseconds": 4053500.0,
            "TotalMinutes": 6.755833333333333E-05,
            "TotalSeconds": 0.0040535
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "c6482a0c-a974-4d37-881a-5b20a1725bff",
            "Ast": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 333,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 341,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.8919803-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 2317,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 231,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.681712962962963E-09,
          "TotalHours": 6.436111111111112E-08,
          "TotalMilliseconds": 0.2317,
          "TotalMicroseconds": 231.7,
          "TotalNanoseconds": 231700.0,
          "TotalMinutes": 3.861666666666666E-06,
          "TotalSeconds": 0.0002317
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate responses for code analysis",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Ollama API Integration",
          "Should generate responses for code analysis"
        ],
        "Data": null,
        "ExpandedName": "Should generate responses for code analysis",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should generate responses for code analysis",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 2304,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 230,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.6666666666666666E-09,
          "TotalHours": 6.4E-08,
          "TotalMilliseconds": 0.2304,
          "TotalMicroseconds": 230.4,
          "TotalNanoseconds": 230400.0,
          "TotalMinutes": 3.84E-06,
          "TotalSeconds": 0.0002304
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }",
            "Type": 19,
            "Start": 14610,
            "Length": 545,
            "StartLine": 349,
            "StartColumn": 99,
            "EndLine": 358,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "b86270d3-f1a6-42f9-9e68-e5c33db9297a",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Ollama API Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Ollama API Integration"
          ],
          "Data": null,
          "ExpandedName": "Ollama API Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration",
          "Blocks": [],
          "Tests": [
            "[!] Should connect to Ollama service",
            "[!] Should list available models",
            "[!] Should generate responses for code analysis"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 47996,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 799,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.5550925925925925E-08,
            "TotalHours": 1.3332222222222222E-06,
            "TotalMilliseconds": 4.7996,
            "TotalMicroseconds": 4799.6,
            "TotalNanoseconds": 4799600.0,
            "TotalMinutes": 7.999333333333334E-05,
            "TotalSeconds": 0.0047996
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0646703",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.8907373-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0634426",
            "UserDuration": "00:00:00.0012277",
            "OwnDuration": "00:00:00.0341818",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 294,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should connect to Ollama service",
            "[!] Should list available models",
            "[!] Should generate responses for code analysis"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.8912268-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 47287,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 728,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.4730324074074075E-08,
            "TotalHours": 1.3135277777777777E-06,
            "TotalMilliseconds": 4.7287,
            "TotalMicroseconds": 4728.7,
            "TotalNanoseconds": 4728700.0,
            "TotalMinutes": 7.881166666666667E-05,
            "TotalSeconds": 0.0047287
          },
          "UserDuration": {
            "Ticks": 709,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 70,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.206018518518518E-10,
            "TotalHours": 1.9694444444444444E-08,
            "TotalMilliseconds": 0.0709,
            "TotalMicroseconds": 70.9,
            "TotalNanoseconds": 70900.0,
            "TotalMinutes": 1.1816666666666666E-06,
            "TotalSeconds": 7.09E-05
          },
          "OwnDuration": {
            "Ticks": 40535,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 53,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.691550925925926E-08,
            "TotalHours": 1.1259722222222222E-06,
            "TotalMilliseconds": 4.0535,
            "TotalMicroseconds": 4053.5,
            "TotalNanoseconds": 4053500.0,
            "TotalMinutes": 6.755833333333333E-05,
            "TotalSeconds": 0.0040535
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "c6482a0c-a974-4d37-881a-5b20a1725bff",
            "Ast": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 333,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 349,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.8922195-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 2304,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 230,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.6666666666666666E-09,
          "TotalHours": 6.4E-08,
          "TotalMilliseconds": 0.2304,
          "TotalMicroseconds": 230.4,
          "TotalNanoseconds": 230400.0,
          "TotalMinutes": 3.84E-06,
          "TotalSeconds": 0.0002304
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should create function documentation prompts",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Prompt Templates",
          "Should create function documentation prompts"
        ],
        "Data": null,
        "ExpandedName": "Should create function documentation prompts",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create function documentation prompts",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 2649,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 264,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.0659722222222222E-09,
          "TotalHours": 7.358333333333333E-08,
          "TotalMilliseconds": 0.2649,
          "TotalMicroseconds": 264.9,
          "TotalNanoseconds": 264900.0,
          "TotalMinutes": 4.415E-06,
          "TotalSeconds": 0.0002649
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 15590,
            "Length": 427,
            "StartLine": 368,
            "StartColumn": 127,
            "EndLine": 375,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "581b80d1-da6b-41d9-a606-8533f08f45ea",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Prompt Templates",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Prompt Templates"
          ],
          "Data": null,
          "ExpandedName": "Prompt Templates",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
          "Blocks": [],
          "Tests": [
            "[!] Should create function documentation prompts",
            "[!] Should create module documentation prompts",
            "[!] Should support variable substitution"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 101291,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 10,
            "Microseconds": 129,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.172349537037037E-07,
            "TotalHours": 2.8136388888888887E-06,
            "TotalMilliseconds": 10.1291,
            "TotalMicroseconds": 10129.1,
            "TotalNanoseconds": 10129100.0,
            "TotalMinutes": 0.00016881833333333334,
            "TotalSeconds": 0.0101291
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0646703",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.8907373-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0634426",
            "UserDuration": "00:00:00.0012277",
            "OwnDuration": "00:00:00.0341818",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 294,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "6a6092cb-f659-4b49-b9b6-d137cccb6922",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should create function documentation prompts",
            "[!] Should create module documentation prompts",
            "[!] Should support variable substitution"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.8960259-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 99748,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 9,
            "Microseconds": 974,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.1544907407407407E-07,
            "TotalHours": 2.770777777777778E-06,
            "TotalMilliseconds": 9.9748,
            "TotalMicroseconds": 9974.8,
            "TotalNanoseconds": 9974800.0,
            "TotalMinutes": 0.00016624666666666666,
            "TotalSeconds": 0.0099748
          },
          "UserDuration": {
            "Ticks": 1543,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 154,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.7858796296296297E-09,
            "TotalHours": 4.286111111111111E-08,
            "TotalMilliseconds": 0.1543,
            "TotalMicroseconds": 154.3,
            "TotalNanoseconds": 154300.0,
            "TotalMinutes": 2.5716666666666665E-06,
            "TotalSeconds": 0.0001543
          },
          "OwnDuration": {
            "Ticks": 92899,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 9,
            "Microseconds": 289,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.0752199074074075E-07,
            "TotalHours": 2.580527777777778E-06,
            "TotalMilliseconds": 9.2899,
            "TotalMicroseconds": 9289.9,
            "TotalNanoseconds": 9289900.0,
            "TotalMinutes": 0.00015483166666666666,
            "TotalSeconds": 0.0092899
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "753bb846-8f41-4d7f-b982-baae5c84b446",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 361,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 368,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.8965197-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 2649,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 264,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.0659722222222222E-09,
          "TotalHours": 7.358333333333333E-08,
          "TotalMilliseconds": 0.2649,
          "TotalMicroseconds": 264.9,
          "TotalNanoseconds": 264900.0,
          "TotalMinutes": 4.415E-06,
          "TotalSeconds": 0.0002649
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should create module documentation prompts",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Prompt Templates",
          "Should create module documentation prompts"
        ],
        "Data": null,
        "ExpandedName": "Should create module documentation prompts",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create module documentation prompts",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 2866,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 286,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.3171296296296298E-09,
          "TotalHours": 7.961111111111111E-08,
          "TotalMilliseconds": 0.2866,
          "TotalMicroseconds": 286.6,
          "TotalNanoseconds": 286600.0,
          "TotalMinutes": 4.776666666666667E-06,
          "TotalSeconds": 0.0002866
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 16157,
            "Length": 411,
            "StartLine": 377,
            "StartColumn": 125,
            "EndLine": 384,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "2e43d6f3-59ea-4e39-9f15-ae3d5146fcb8",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Prompt Templates",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Prompt Templates"
          ],
          "Data": null,
          "ExpandedName": "Prompt Templates",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
          "Blocks": [],
          "Tests": [
            "[!] Should create function documentation prompts",
            "[!] Should create module documentation prompts",
            "[!] Should support variable substitution"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 101291,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 10,
            "Microseconds": 129,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.172349537037037E-07,
            "TotalHours": 2.8136388888888887E-06,
            "TotalMilliseconds": 10.1291,
            "TotalMicroseconds": 10129.1,
            "TotalNanoseconds": 10129100.0,
            "TotalMinutes": 0.00016881833333333334,
            "TotalSeconds": 0.0101291
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0646703",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.8907373-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0634426",
            "UserDuration": "00:00:00.0012277",
            "OwnDuration": "00:00:00.0341818",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 294,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "6a6092cb-f659-4b49-b9b6-d137cccb6922",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should create function documentation prompts",
            "[!] Should create module documentation prompts",
            "[!] Should support variable substitution"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.8960259-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 99748,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 9,
            "Microseconds": 974,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.1544907407407407E-07,
            "TotalHours": 2.770777777777778E-06,
            "TotalMilliseconds": 9.9748,
            "TotalMicroseconds": 9974.8,
            "TotalNanoseconds": 9974800.0,
            "TotalMinutes": 0.00016624666666666666,
            "TotalSeconds": 0.0099748
          },
          "UserDuration": {
            "Ticks": 1543,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 154,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.7858796296296297E-09,
            "TotalHours": 4.286111111111111E-08,
            "TotalMilliseconds": 0.1543,
            "TotalMicroseconds": 154.3,
            "TotalNanoseconds": 154300.0,
            "TotalMinutes": 2.5716666666666665E-06,
            "TotalSeconds": 0.0001543
          },
          "OwnDuration": {
            "Ticks": 92899,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 9,
            "Microseconds": 289,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.0752199074074075E-07,
            "TotalHours": 2.580527777777778E-06,
            "TotalMilliseconds": 9.2899,
            "TotalMicroseconds": 9289.9,
            "TotalNanoseconds": 9289900.0,
            "TotalMinutes": 0.00015483166666666666,
            "TotalSeconds": 0.0092899
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "753bb846-8f41-4d7f-b982-baae5c84b446",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 361,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 377,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.8968024-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 2866,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 286,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.3171296296296298E-09,
          "TotalHours": 7.961111111111111E-08,
          "TotalMilliseconds": 0.2866,
          "TotalMicroseconds": 286.6,
          "TotalNanoseconds": 286600.0,
          "TotalMinutes": 4.776666666666667E-06,
          "TotalSeconds": 0.0002866
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should support variable substitution",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Prompt Templates",
          "Should support variable substitution"
        ],
        "Data": null,
        "ExpandedName": "Should support variable substitution",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should support variable substitution",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 2877,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 287,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.3298611111111113E-09,
          "TotalHours": 7.991666666666667E-08,
          "TotalMilliseconds": 0.2877,
          "TotalMicroseconds": 287.7,
          "TotalNanoseconds": 287700.0,
          "TotalMinutes": 4.795E-06,
          "TotalSeconds": 0.0002877
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 16702,
            "Length": 542,
            "StartLine": 386,
            "StartColumn": 119,
            "EndLine": 396,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "91b0c5ca-041d-4cfb-87ba-926cc6b80082",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Prompt Templates",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Prompt Templates"
          ],
          "Data": null,
          "ExpandedName": "Prompt Templates",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
          "Blocks": [],
          "Tests": [
            "[!] Should create function documentation prompts",
            "[!] Should create module documentation prompts",
            "[!] Should support variable substitution"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 101291,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 10,
            "Microseconds": 129,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.172349537037037E-07,
            "TotalHours": 2.8136388888888887E-06,
            "TotalMilliseconds": 10.1291,
            "TotalMicroseconds": 10129.1,
            "TotalNanoseconds": 10129100.0,
            "TotalMinutes": 0.00016881833333333334,
            "TotalSeconds": 0.0101291
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0646703",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.8907373-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0634426",
            "UserDuration": "00:00:00.0012277",
            "OwnDuration": "00:00:00.0341818",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 294,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "6a6092cb-f659-4b49-b9b6-d137cccb6922",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should create function documentation prompts",
            "[!] Should create module documentation prompts",
            "[!] Should support variable substitution"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.8960259-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 99748,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 9,
            "Microseconds": 974,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.1544907407407407E-07,
            "TotalHours": 2.770777777777778E-06,
            "TotalMilliseconds": 9.9748,
            "TotalMicroseconds": 9974.8,
            "TotalNanoseconds": 9974800.0,
            "TotalMinutes": 0.00016624666666666666,
            "TotalSeconds": 0.0099748
          },
          "UserDuration": {
            "Ticks": 1543,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 154,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.7858796296296297E-09,
            "TotalHours": 4.286111111111111E-08,
            "TotalMilliseconds": 0.1543,
            "TotalMicroseconds": 154.3,
            "TotalNanoseconds": 154300.0,
            "TotalMinutes": 2.5716666666666665E-06,
            "TotalSeconds": 0.0001543
          },
          "OwnDuration": {
            "Ticks": 92899,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 9,
            "Microseconds": 289,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.0752199074074075E-07,
            "TotalHours": 2.580527777777778E-06,
            "TotalMilliseconds": 9.2899,
            "TotalMicroseconds": 9289.9,
            "TotalNanoseconds": 9289900.0,
            "TotalMinutes": 0.00015483166666666666,
            "TotalSeconds": 0.0092899
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "753bb846-8f41-4d7f-b982-baae5c84b446",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 361,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 386,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.8971175-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 2877,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 287,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.3298611111111113E-09,
          "TotalHours": 7.991666666666667E-08,
          "TotalMilliseconds": 0.2877,
          "TotalMicroseconds": 287.7,
          "TotalNanoseconds": 287700.0,
          "TotalMinutes": 4.795E-06,
          "TotalSeconds": 0.0002877
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should cache and retrieve responses",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Response Cache",
          "Should cache and retrieve responses"
        ],
        "Data": null,
        "ExpandedName": "Should cache and retrieve responses",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should cache and retrieve responses",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 3451,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 345,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.9942129629629626E-09,
          "TotalHours": 9.586111111111111E-08,
          "TotalMilliseconds": 0.3451,
          "TotalMicroseconds": 345.1,
          "TotalNanoseconds": 345100.0,
          "TotalMinutes": 5.751666666666667E-06,
          "TotalSeconds": 0.0003451
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }",
            "Type": 19,
            "Start": 17662,
            "Length": 485,
            "StartLine": 406,
            "StartColumn": 116,
            "EndLine": 416,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "853afd47-ebce-4d21-94e7-b8f0d51eb91e",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Response Cache",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Response Cache"
          ],
          "Data": null,
          "ExpandedName": "Response Cache",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
          "Blocks": [],
          "Tests": [
            "[!] Should cache and retrieve responses",
            "[!] Should handle TTL expiration",
            "[!] Should provide cache statistics"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 155598,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 15,
            "Microseconds": 559,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.8009027777777778E-07,
            "TotalHours": 4.3221666666666665E-06,
            "TotalMilliseconds": 15.5598,
            "TotalMicroseconds": 15559.8,
            "TotalNanoseconds": 15559800.0,
            "TotalMinutes": 0.00025933,
            "TotalSeconds": 0.0155598
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0646703",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.8907373-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0634426",
            "UserDuration": "00:00:00.0012277",
            "OwnDuration": "00:00:00.0341818",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 294,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "c7756b02-04fb-4129-a78f-402598c5972a",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should cache and retrieve responses",
            "[!] Should handle TTL expiration",
            "[!] Should provide cache statistics"
          ],
          "Passed": true,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.9013551-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 152802,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 15,
            "Microseconds": 280,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.7685416666666667E-07,
            "TotalHours": 4.2445E-06,
            "TotalMilliseconds": 15.2802,
            "TotalMicroseconds": 15280.2,
            "TotalNanoseconds": 15280200.0,
            "TotalMinutes": 0.00025467,
            "TotalSeconds": 0.0152802
          },
          "UserDuration": {
            "Ticks": 2796,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 279,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.2361111111111113E-09,
            "TotalHours": 7.766666666666666E-08,
            "TotalMilliseconds": 0.2796,
            "TotalMicroseconds": 279.6,
            "TotalNanoseconds": 279600.0,
            "TotalMinutes": 4.66E-06,
            "TotalSeconds": 0.0002796
          },
          "OwnDuration": {
            "Ticks": 146565,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 14,
            "Microseconds": 656,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.6963541666666667E-07,
            "TotalHours": 4.07125E-06,
            "TotalMilliseconds": 14.6565,
            "TotalMicroseconds": 14656.5,
            "TotalNanoseconds": 14656500.0,
            "TotalMinutes": 0.000244275,
            "TotalSeconds": 0.0146565
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "45be4aeb-8d9e-4522-bb67-d8869ca5a8c5",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 399,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 406,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.9019804-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 3451,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 345,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.9942129629629626E-09,
          "TotalHours": 9.586111111111111E-08,
          "TotalMilliseconds": 0.3451,
          "TotalMicroseconds": 345.1,
          "TotalNanoseconds": 345100.0,
          "TotalMinutes": 5.751666666666667E-06,
          "TotalSeconds": 0.0003451
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should handle TTL expiration",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Response Cache",
          "Should handle TTL expiration"
        ],
        "Data": null,
        "ExpandedName": "Should handle TTL expiration",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should handle TTL expiration",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 2803,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 280,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.244212962962963E-09,
          "TotalHours": 7.786111111111111E-08,
          "TotalMilliseconds": 0.2803,
          "TotalMicroseconds": 280.3,
          "TotalNanoseconds": 280300.0,
          "TotalMinutes": 4.671666666666666E-06,
          "TotalSeconds": 0.0002803
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }",
            "Type": 19,
            "Start": 18271,
            "Length": 522,
            "StartLine": 418,
            "StartColumn": 109,
            "EndLine": 429,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "f0a2c7f6-c11a-45a1-93b3-732f86320a9a",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Response Cache",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Response Cache"
          ],
          "Data": null,
          "ExpandedName": "Response Cache",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
          "Blocks": [],
          "Tests": [
            "[!] Should cache and retrieve responses",
            "[!] Should handle TTL expiration",
            "[!] Should provide cache statistics"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 155598,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 15,
            "Microseconds": 559,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.8009027777777778E-07,
            "TotalHours": 4.3221666666666665E-06,
            "TotalMilliseconds": 15.5598,
            "TotalMicroseconds": 15559.8,
            "TotalNanoseconds": 15559800.0,
            "TotalMinutes": 0.00025933,
            "TotalSeconds": 0.0155598
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0646703",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.8907373-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0634426",
            "UserDuration": "00:00:00.0012277",
            "OwnDuration": "00:00:00.0341818",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 294,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "c7756b02-04fb-4129-a78f-402598c5972a",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should cache and retrieve responses",
            "[!] Should handle TTL expiration",
            "[!] Should provide cache statistics"
          ],
          "Passed": true,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.9013551-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 152802,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 15,
            "Microseconds": 280,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.7685416666666667E-07,
            "TotalHours": 4.2445E-06,
            "TotalMilliseconds": 15.2802,
            "TotalMicroseconds": 15280.2,
            "TotalNanoseconds": 15280200.0,
            "TotalMinutes": 0.00025467,
            "TotalSeconds": 0.0152802
          },
          "UserDuration": {
            "Ticks": 2796,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 279,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.2361111111111113E-09,
            "TotalHours": 7.766666666666666E-08,
            "TotalMilliseconds": 0.2796,
            "TotalMicroseconds": 279.6,
            "TotalNanoseconds": 279600.0,
            "TotalMinutes": 4.66E-06,
            "TotalSeconds": 0.0002796
          },
          "OwnDuration": {
            "Ticks": 146565,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 14,
            "Microseconds": 656,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.6963541666666667E-07,
            "TotalHours": 4.07125E-06,
            "TotalMilliseconds": 14.6565,
            "TotalMicroseconds": 14656.5,
            "TotalNanoseconds": 14656500.0,
            "TotalMinutes": 0.000244275,
            "TotalSeconds": 0.0146565
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "45be4aeb-8d9e-4522-bb67-d8869ca5a8c5",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 399,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 418,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.902338-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 2803,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 280,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.244212962962963E-09,
          "TotalHours": 7.786111111111111E-08,
          "TotalMilliseconds": 0.2803,
          "TotalMicroseconds": 280.3,
          "TotalNanoseconds": 280300.0,
          "TotalMinutes": 4.671666666666666E-06,
          "TotalSeconds": 0.0002803
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should provide cache statistics",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Response Cache",
          "Should provide cache statistics"
        ],
        "Data": null,
        "ExpandedName": "Should provide cache statistics",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should provide cache statistics",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 2779,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 277,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.216435185185185E-09,
          "TotalHours": 7.719444444444444E-08,
          "TotalMilliseconds": 0.2779,
          "TotalMicroseconds": 277.9,
          "TotalNanoseconds": 277900.0,
          "TotalMinutes": 4.631666666666667E-06,
          "TotalSeconds": 0.0002779
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }",
            "Type": 19,
            "Start": 18920,
            "Length": 402,
            "StartLine": 431,
            "StartColumn": 112,
            "EndLine": 439,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "8a97994d-be1a-4e6b-95b3-dc4b822d016e",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Response Cache",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Response Cache"
          ],
          "Data": null,
          "ExpandedName": "Response Cache",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
          "Blocks": [],
          "Tests": [
            "[!] Should cache and retrieve responses",
            "[!] Should handle TTL expiration",
            "[!] Should provide cache statistics"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 155598,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 15,
            "Microseconds": 559,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.8009027777777778E-07,
            "TotalHours": 4.3221666666666665E-06,
            "TotalMilliseconds": 15.5598,
            "TotalMicroseconds": 15559.8,
            "TotalNanoseconds": 15559800.0,
            "TotalMinutes": 0.00025933,
            "TotalSeconds": 0.0155598
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0646703",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.8907373-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0634426",
            "UserDuration": "00:00:00.0012277",
            "OwnDuration": "00:00:00.0341818",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 294,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "c7756b02-04fb-4129-a78f-402598c5972a",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should cache and retrieve responses",
            "[!] Should handle TTL expiration",
            "[!] Should provide cache statistics"
          ],
          "Passed": true,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.9013551-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 152802,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 15,
            "Microseconds": 280,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.7685416666666667E-07,
            "TotalHours": 4.2445E-06,
            "TotalMilliseconds": 15.2802,
            "TotalMicroseconds": 15280.2,
            "TotalNanoseconds": 15280200.0,
            "TotalMinutes": 0.00025467,
            "TotalSeconds": 0.0152802
          },
          "UserDuration": {
            "Ticks": 2796,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 279,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.2361111111111113E-09,
            "TotalHours": 7.766666666666666E-08,
            "TotalMilliseconds": 0.2796,
            "TotalMicroseconds": 279.6,
            "TotalNanoseconds": 279600.0,
            "TotalMinutes": 4.66E-06,
            "TotalSeconds": 0.0002796
          },
          "OwnDuration": {
            "Ticks": 146565,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 14,
            "Microseconds": 656,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.6963541666666667E-07,
            "TotalHours": 4.07125E-06,
            "TotalMilliseconds": 14.6565,
            "TotalMicroseconds": 14656.5,
            "TotalNanoseconds": 14656500.0,
            "TotalMinutes": 0.000244275,
            "TotalSeconds": 0.0146565
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "45be4aeb-8d9e-4522-bb67-d8869ca5a8c5",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 399,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 431,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.9026328-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 2779,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 277,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.216435185185185E-09,
          "TotalHours": 7.719444444444444E-08,
          "TotalMilliseconds": 0.2779,
          "TotalMicroseconds": 277.9,
          "TotalNanoseconds": 277900.0,
          "TotalMinutes": 4.631666666666667E-06,
          "TotalSeconds": 0.0002779
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate PowerShell documentation templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should generate PowerShell documentation templates"
        ],
        "Data": null,
        "ExpandedName": "Should generate PowerShell documentation templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate PowerShell documentation templates",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 3256,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 325,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.7685185185185184E-09,
          "TotalHours": 9.044444444444444E-08,
          "TotalMilliseconds": 0.3256,
          "TotalMicroseconds": 325.6,
          "TotalNanoseconds": 325600.0,
          "TotalMinutes": 5.426666666666667E-06,
          "TotalSeconds": 0.0003256
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 21413,
            "Length": 523,
            "StartLine": 481,
            "StartColumn": 140,
            "EndLine": 489,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "1949011d-8dae-4a9b-a847-80a743c8c042",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 5,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 274423,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 27,
            "Microseconds": 442,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.1761921296296297E-07,
            "TotalHours": 7.622861111111111E-06,
            "TotalMilliseconds": 27.4423,
            "TotalMicroseconds": 27442.3,
            "TotalNanoseconds": 27442300.0,
            "TotalMinutes": 0.0004573716666666667,
            "TotalSeconds": 0.0274423
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[!] Language-Specific Templates [!] Automation Triggers",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.1023904",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Language-Specific Templates [!] Automation Triggers",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.9107542-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1007996",
            "UserDuration": "00:00:00.0015908",
            "OwnDuration": "00:00:00.0423986",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 447,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "93b62536-2f82-46b4-b33a-8bb5e8bddb2b",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.9114131-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 273173,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 27,
            "Microseconds": 317,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.161724537037037E-07,
            "TotalHours": 7.588138888888889E-06,
            "TotalMilliseconds": 27.3173,
            "TotalMicroseconds": 27317.3,
            "TotalNanoseconds": 27317300.0,
            "TotalMinutes": 0.00045528833333333336,
            "TotalSeconds": 0.0273173
          },
          "UserDuration": {
            "Ticks": 1250,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 125,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4467592592592592E-09,
            "TotalHours": 3.472222222222222E-08,
            "TotalMilliseconds": 0.125,
            "TotalMicroseconds": 125.0,
            "TotalNanoseconds": 125000.0,
            "TotalMinutes": 2.0833333333333334E-06,
            "TotalSeconds": 0.000125
          },
          "OwnDuration": {
            "Ticks": 252278,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 25,
            "Microseconds": 227,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.9198842592592593E-07,
            "TotalHours": 7.007722222222222E-06,
            "TotalMilliseconds": 25.2278,
            "TotalMicroseconds": 25227.8,
            "TotalNanoseconds": 25227800.0,
            "TotalMinutes": 0.0004204633333333333,
            "TotalSeconds": 0.0252278
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "cff18660-0208-46ad-aad2-9570d54eb8e1",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 474,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 5,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 481,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.9325383-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 3256,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 325,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.7685185185185184E-09,
          "TotalHours": 9.044444444444444E-08,
          "TotalMilliseconds": 0.3256,
          "TotalMicroseconds": 325.6,
          "TotalNanoseconds": 325600.0,
          "TotalMinutes": 5.426666666666667E-06,
          "TotalSeconds": 0.0003256
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate Python documentation templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should generate Python documentation templates"
        ],
        "Data": null,
        "ExpandedName": "Should generate Python documentation templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate Python documentation templates",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 5679,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 567,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.572916666666666E-09,
          "TotalHours": 1.5775E-07,
          "TotalMilliseconds": 0.5679,
          "TotalMicroseconds": 567.9,
          "TotalNanoseconds": 567900.0,
          "TotalMinutes": 9.465E-06,
          "TotalSeconds": 0.0005679
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 22087,
            "Length": 508,
            "StartLine": 491,
            "StartColumn": 136,
            "EndLine": 499,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "36e47e3c-cf5e-45db-b42c-f6d1776fa3e5",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 5,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 274423,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 27,
            "Microseconds": 442,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.1761921296296297E-07,
            "TotalHours": 7.622861111111111E-06,
            "TotalMilliseconds": 27.4423,
            "TotalMicroseconds": 27442.3,
            "TotalNanoseconds": 27442300.0,
            "TotalMinutes": 0.0004573716666666667,
            "TotalSeconds": 0.0274423
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[!] Language-Specific Templates [!] Automation Triggers",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.1023904",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Language-Specific Templates [!] Automation Triggers",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.9107542-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1007996",
            "UserDuration": "00:00:00.0015908",
            "OwnDuration": "00:00:00.0423986",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 447,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "93b62536-2f82-46b4-b33a-8bb5e8bddb2b",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.9114131-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 273173,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 27,
            "Microseconds": 317,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.161724537037037E-07,
            "TotalHours": 7.588138888888889E-06,
            "TotalMilliseconds": 27.3173,
            "TotalMicroseconds": 27317.3,
            "TotalNanoseconds": 27317300.0,
            "TotalMinutes": 0.00045528833333333336,
            "TotalSeconds": 0.0273173
          },
          "UserDuration": {
            "Ticks": 1250,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 125,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4467592592592592E-09,
            "TotalHours": 3.472222222222222E-08,
            "TotalMilliseconds": 0.125,
            "TotalMicroseconds": 125.0,
            "TotalNanoseconds": 125000.0,
            "TotalMinutes": 2.0833333333333334E-06,
            "TotalSeconds": 0.000125
          },
          "OwnDuration": {
            "Ticks": 252278,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 25,
            "Microseconds": 227,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.9198842592592593E-07,
            "TotalHours": 7.007722222222222E-06,
            "TotalMilliseconds": 25.2278,
            "TotalMicroseconds": 25227.8,
            "TotalNanoseconds": 25227800.0,
            "TotalMinutes": 0.0004204633333333333,
            "TotalSeconds": 0.0252278
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "cff18660-0208-46ad-aad2-9570d54eb8e1",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 474,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 5,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 491,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.9329179-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 5679,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 567,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.572916666666666E-09,
          "TotalHours": 1.5775E-07,
          "TotalMilliseconds": 0.5679,
          "TotalMicroseconds": 567.9,
          "TotalNanoseconds": 567900.0,
          "TotalMinutes": 9.465E-06,
          "TotalSeconds": 0.0005679
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate C# documentation templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should generate C# documentation templates"
        ],
        "Data": null,
        "ExpandedName": "Should generate C# documentation templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate C# documentation templates",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 4797,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 479,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.552083333333333E-09,
          "TotalHours": 1.3325E-07,
          "TotalMilliseconds": 0.4797,
          "TotalMicroseconds": 479.7,
          "TotalNanoseconds": 479700.0,
          "TotalMinutes": 7.995E-06,
          "TotalSeconds": 0.0004797
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }",
            "Type": 19,
            "Start": 22742,
            "Length": 523,
            "StartLine": 501,
            "StartColumn": 132,
            "EndLine": 509,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "99ae934f-9726-4a9e-b54d-ca22a601a3a4",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 5,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 274423,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 27,
            "Microseconds": 442,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.1761921296296297E-07,
            "TotalHours": 7.622861111111111E-06,
            "TotalMilliseconds": 27.4423,
            "TotalMicroseconds": 27442.3,
            "TotalNanoseconds": 27442300.0,
            "TotalMinutes": 0.0004573716666666667,
            "TotalSeconds": 0.0274423
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[!] Language-Specific Templates [!] Automation Triggers",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.1023904",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Language-Specific Templates [!] Automation Triggers",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.9107542-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1007996",
            "UserDuration": "00:00:00.0015908",
            "OwnDuration": "00:00:00.0423986",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 447,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "93b62536-2f82-46b4-b33a-8bb5e8bddb2b",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.9114131-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 273173,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 27,
            "Microseconds": 317,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.161724537037037E-07,
            "TotalHours": 7.588138888888889E-06,
            "TotalMilliseconds": 27.3173,
            "TotalMicroseconds": 27317.3,
            "TotalNanoseconds": 27317300.0,
            "TotalMinutes": 0.00045528833333333336,
            "TotalSeconds": 0.0273173
          },
          "UserDuration": {
            "Ticks": 1250,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 125,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4467592592592592E-09,
            "TotalHours": 3.472222222222222E-08,
            "TotalMilliseconds": 0.125,
            "TotalMicroseconds": 125.0,
            "TotalNanoseconds": 125000.0,
            "TotalMinutes": 2.0833333333333334E-06,
            "TotalSeconds": 0.000125
          },
          "OwnDuration": {
            "Ticks": 252278,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 25,
            "Microseconds": 227,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.9198842592592593E-07,
            "TotalHours": 7.007722222222222E-06,
            "TotalMilliseconds": 25.2278,
            "TotalMicroseconds": 25227.8,
            "TotalNanoseconds": 25227800.0,
            "TotalMinutes": 0.0004204633333333333,
            "TotalSeconds": 0.0252278
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "cff18660-0208-46ad-aad2-9570d54eb8e1",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 474,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 5,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 501,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.933526-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 4797,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 479,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.552083333333333E-09,
          "TotalHours": 1.3325E-07,
          "TotalMilliseconds": 0.4797,
          "TotalMicroseconds": 479.7,
          "TotalNanoseconds": 479700.0,
          "TotalMinutes": 7.995E-06,
          "TotalSeconds": 0.0004797
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate JavaScript documentation templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should generate JavaScript documentation templates"
        ],
        "Data": null,
        "ExpandedName": "Should generate JavaScript documentation templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate JavaScript documentation templates",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 5942,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 594,
          "Nanoseconds": 200,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.877314814814815E-09,
          "TotalHours": 1.6505555555555556E-07,
          "TotalMilliseconds": 0.5942,
          "TotalMicroseconds": 594.2,
          "TotalNanoseconds": 594200.0,
          "TotalMinutes": 9.903333333333334E-06,
          "TotalSeconds": 0.0005942
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 23420,
            "Length": 568,
            "StartLine": 511,
            "StartColumn": 140,
            "EndLine": 520,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "ccdf2200-fc27-49bb-80d9-a857da117d63",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 5,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 274423,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 27,
            "Microseconds": 442,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.1761921296296297E-07,
            "TotalHours": 7.622861111111111E-06,
            "TotalMilliseconds": 27.4423,
            "TotalMicroseconds": 27442.3,
            "TotalNanoseconds": 27442300.0,
            "TotalMinutes": 0.0004573716666666667,
            "TotalSeconds": 0.0274423
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[!] Language-Specific Templates [!] Automation Triggers",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.1023904",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Language-Specific Templates [!] Automation Triggers",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.9107542-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1007996",
            "UserDuration": "00:00:00.0015908",
            "OwnDuration": "00:00:00.0423986",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 447,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "93b62536-2f82-46b4-b33a-8bb5e8bddb2b",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.9114131-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 273173,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 27,
            "Microseconds": 317,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.161724537037037E-07,
            "TotalHours": 7.588138888888889E-06,
            "TotalMilliseconds": 27.3173,
            "TotalMicroseconds": 27317.3,
            "TotalNanoseconds": 27317300.0,
            "TotalMinutes": 0.00045528833333333336,
            "TotalSeconds": 0.0273173
          },
          "UserDuration": {
            "Ticks": 1250,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 125,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4467592592592592E-09,
            "TotalHours": 3.472222222222222E-08,
            "TotalMilliseconds": 0.125,
            "TotalMicroseconds": 125.0,
            "TotalNanoseconds": 125000.0,
            "TotalMinutes": 2.0833333333333334E-06,
            "TotalSeconds": 0.000125
          },
          "OwnDuration": {
            "Ticks": 252278,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 25,
            "Microseconds": 227,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.9198842592592593E-07,
            "TotalHours": 7.007722222222222E-06,
            "TotalMilliseconds": 25.2278,
            "TotalMicroseconds": 25227.8,
            "TotalNanoseconds": 25227800.0,
            "TotalMinutes": 0.0004204633333333333,
            "TotalSeconds": 0.0252278
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "cff18660-0208-46ad-aad2-9570d54eb8e1",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 474,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 5,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 511,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.9339901-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 5942,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 594,
          "Nanoseconds": 200,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.877314814814815E-09,
          "TotalHours": 1.6505555555555556E-07,
          "TotalMilliseconds": 0.5942,
          "TotalMicroseconds": 594.2,
          "TotalNanoseconds": 594200.0,
          "TotalMinutes": 9.903333333333334E-06,
          "TotalSeconds": 0.0005942
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should detect language from file extensions",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should detect language from file extensions"
        ],
        "Data": null,
        "ExpandedName": "Should detect language from file extensions",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should detect language from file extensions",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 2471,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 247,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.859953703703704E-09,
          "TotalHours": 6.863888888888888E-08,
          "TotalMilliseconds": 0.2471,
          "TotalMicroseconds": 247.1,
          "TotalNanoseconds": 247100.0,
          "TotalMinutes": 4.1183333333333334E-06,
          "TotalSeconds": 0.0002471
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 24136,
            "Length": 581,
            "StartLine": 522,
            "StartColumn": 133,
            "EndLine": 530,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "4bf769e4-6a04-4b26-9670-d6ea2c893168",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 5,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 274423,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 27,
            "Microseconds": 442,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.1761921296296297E-07,
            "TotalHours": 7.622861111111111E-06,
            "TotalMilliseconds": 27.4423,
            "TotalMicroseconds": 27442.3,
            "TotalNanoseconds": 27442300.0,
            "TotalMinutes": 0.0004573716666666667,
            "TotalSeconds": 0.0274423
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[!] Language-Specific Templates [!] Automation Triggers",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.1023904",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Language-Specific Templates [!] Automation Triggers",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.9107542-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1007996",
            "UserDuration": "00:00:00.0015908",
            "OwnDuration": "00:00:00.0423986",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 447,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "93b62536-2f82-46b4-b33a-8bb5e8bddb2b",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.9114131-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 273173,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 27,
            "Microseconds": 317,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.161724537037037E-07,
            "TotalHours": 7.588138888888889E-06,
            "TotalMilliseconds": 27.3173,
            "TotalMicroseconds": 27317.3,
            "TotalNanoseconds": 27317300.0,
            "TotalMinutes": 0.00045528833333333336,
            "TotalSeconds": 0.0273173
          },
          "UserDuration": {
            "Ticks": 1250,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 125,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4467592592592592E-09,
            "TotalHours": 3.472222222222222E-08,
            "TotalMilliseconds": 0.125,
            "TotalMicroseconds": 125.0,
            "TotalNanoseconds": 125000.0,
            "TotalMinutes": 2.0833333333333334E-06,
            "TotalSeconds": 0.000125
          },
          "OwnDuration": {
            "Ticks": 252278,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 25,
            "Microseconds": 227,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.9198842592592593E-07,
            "TotalHours": 7.007722222222222E-06,
            "TotalMilliseconds": 25.2278,
            "TotalMicroseconds": 25227.8,
            "TotalNanoseconds": 25227800.0,
            "TotalMinutes": 0.0004204633333333333,
            "TotalSeconds": 0.0252278
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "cff18660-0208-46ad-aad2-9570d54eb8e1",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 474,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 5,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 522,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.9345961-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 2471,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 247,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.859953703703704E-09,
          "TotalHours": 6.863888888888888E-08,
          "TotalMilliseconds": 0.2471,
          "TotalMicroseconds": 247.1,
          "TotalNanoseconds": 247100.0,
          "TotalMinutes": 4.1183333333333334E-06,
          "TotalSeconds": 0.0002471
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should initialize documentation triggers",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Automation Triggers",
          "Should initialize documentation triggers"
        ],
        "Data": null,
        "ExpandedName": "Should initialize documentation triggers",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should initialize documentation triggers",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 2711,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 271,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.1377314814814814E-09,
          "TotalHours": 7.530555555555556E-08,
          "TotalMilliseconds": 0.2711,
          "TotalMicroseconds": 271.1,
          "TotalNanoseconds": 271100.0,
          "TotalMinutes": 4.518333333333333E-06,
          "TotalSeconds": 0.0002711
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }",
            "Type": 19,
            "Start": 25170,
            "Length": 235,
            "StartLine": 540,
            "StartColumn": 131,
            "EndLine": 545,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "7d71c8fb-5e1a-4606-9019-4a4b9850834f",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Automation Triggers",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Automation Triggers"
          ],
          "Data": null,
          "ExpandedName": "Automation Triggers",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers",
          "Blocks": [],
          "Tests": [
            "[!] Should initialize documentation triggers",
            "[!] Should log trigger activity"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 2,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 325495,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 32,
            "Microseconds": 549,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.7673032407407406E-07,
            "TotalHours": 9.041527777777777E-06,
            "TotalMilliseconds": 32.5495,
            "TotalMicroseconds": 32549.5,
            "TotalNanoseconds": 32549500.0,
            "TotalMinutes": 0.0005424916666666666,
            "TotalSeconds": 0.0325495
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[!] Language-Specific Templates [!] Automation Triggers",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.1023904",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Language-Specific Templates [!] Automation Triggers",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.9107542-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1007996",
            "UserDuration": "00:00:00.0015908",
            "OwnDuration": "00:00:00.0423986",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 447,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "f04c3b1b-8be7-4fc8-8d69-6f226adee3d4",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should initialize documentation triggers",
            "[!] Should log trigger activity"
          ],
          "Passed": true,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.9388547-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 323141,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 32,
            "Microseconds": 314,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.7400578703703706E-07,
            "TotalHours": 8.976138888888888E-06,
            "TotalMilliseconds": 32.3141,
            "TotalMicroseconds": 32314.1,
            "TotalNanoseconds": 32314100.0,
            "TotalMinutes": 0.0005385683333333334,
            "TotalSeconds": 0.0323141
          },
          "UserDuration": {
            "Ticks": 2354,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 235,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.7245370370370372E-09,
            "TotalHours": 6.538888888888889E-08,
            "TotalMilliseconds": 0.2354,
            "TotalMicroseconds": 235.4,
            "TotalNanoseconds": 235400.0,
            "TotalMinutes": 3.923333333333334E-06,
            "TotalSeconds": 0.0002354
          },
          "OwnDuration": {
            "Ticks": 320722,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 32,
            "Microseconds": 72,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.7120601851851853E-07,
            "TotalHours": 8.908944444444444E-06,
            "TotalMilliseconds": 32.0722,
            "TotalMicroseconds": 32072.2,
            "TotalNanoseconds": 32072200.0,
            "TotalMinutes": 0.0005345366666666667,
            "TotalSeconds": 0.0320722
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "d2975bec-81a3-4b18-84b2-681a69947a09",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 533,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 2,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 540,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.939489-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 2711,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 271,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.1377314814814814E-09,
          "TotalHours": 7.530555555555556E-08,
          "TotalMilliseconds": 0.2711,
          "TotalMicroseconds": 271.1,
          "TotalNanoseconds": 271100.0,
          "TotalMinutes": 4.518333333333333E-06,
          "TotalSeconds": 0.0002711
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should log trigger activity",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Automation Triggers",
          "Should log trigger activity"
        ],
        "Data": null,
        "ExpandedName": "Should log trigger activity",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should log trigger activity",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 2062,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 206,
          "Nanoseconds": 200,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.386574074074074E-09,
          "TotalHours": 5.727777777777778E-08,
          "TotalMilliseconds": 0.2062,
          "TotalMicroseconds": 206.2,
          "TotalNanoseconds": 206200.0,
          "TotalMinutes": 3.4366666666666667E-06,
          "TotalSeconds": 0.0002062
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }",
            "Type": 19,
            "Start": 25538,
            "Length": 710,
            "StartLine": 547,
            "StartColumn": 118,
            "EndLine": 562,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "87650fef-6b25-4009-af5d-a8f6d9969548",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Automation Triggers",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Automation Triggers"
          ],
          "Data": null,
          "ExpandedName": "Automation Triggers",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers",
          "Blocks": [],
          "Tests": [
            "[!] Should initialize documentation triggers",
            "[!] Should log trigger activity"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 2,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 325495,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 32,
            "Microseconds": 549,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.7673032407407406E-07,
            "TotalHours": 9.041527777777777E-06,
            "TotalMilliseconds": 32.5495,
            "TotalMicroseconds": 32549.5,
            "TotalNanoseconds": 32549500.0,
            "TotalMinutes": 0.0005424916666666666,
            "TotalSeconds": 0.0325495
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[!] Language-Specific Templates [!] Automation Triggers",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.1023904",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Language-Specific Templates [!] Automation Triggers",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.9107542-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1007996",
            "UserDuration": "00:00:00.0015908",
            "OwnDuration": "00:00:00.0423986",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 447,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "f04c3b1b-8be7-4fc8-8d69-6f226adee3d4",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should initialize documentation triggers",
            "[!] Should log trigger activity"
          ],
          "Passed": true,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.9388547-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 323141,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 32,
            "Microseconds": 314,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.7400578703703706E-07,
            "TotalHours": 8.976138888888888E-06,
            "TotalMilliseconds": 32.3141,
            "TotalMicroseconds": 32314.1,
            "TotalNanoseconds": 32314100.0,
            "TotalMinutes": 0.0005385683333333334,
            "TotalSeconds": 0.0323141
          },
          "UserDuration": {
            "Ticks": 2354,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 235,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.7245370370370372E-09,
            "TotalHours": 6.538888888888889E-08,
            "TotalMilliseconds": 0.2354,
            "TotalMicroseconds": 235.4,
            "TotalNanoseconds": 235400.0,
            "TotalMinutes": 3.923333333333334E-06,
            "TotalSeconds": 0.0002354
          },
          "OwnDuration": {
            "Ticks": 320722,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 32,
            "Microseconds": 72,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.7120601851851853E-07,
            "TotalHours": 8.908944444444444E-06,
            "TotalMilliseconds": 32.0722,
            "TotalMicroseconds": 32072.2,
            "TotalNanoseconds": 32072200.0,
            "TotalMinutes": 0.0005345366666666667,
            "TotalSeconds": 0.0320722
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "d2975bec-81a3-4b18-84b2-681a69947a09",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 533,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 2,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 547,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.9397706-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 2062,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 206,
          "Nanoseconds": 200,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.386574074074074E-09,
          "TotalHours": 5.727777777777778E-08,
          "TotalMilliseconds": 0.2062,
          "TotalMicroseconds": 206.2,
          "TotalNanoseconds": 206200.0,
          "TotalMinutes": 3.4366666666666667E-06,
          "TotalSeconds": 0.0002062
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should meet cache performance benchmarks",
        "Path": [
          "Enhanced Documentation System - Performance",
          "Cache Performance",
          "Should meet cache performance benchmarks"
        ],
        "Data": null,
        "ExpandedName": "Should meet cache performance benchmarks",
        "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should meet cache performance benchmarks",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 3386,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 338,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.918981481481482E-09,
          "TotalHours": 9.405555555555556E-08,
          "TotalMilliseconds": 0.3386,
          "TotalMicroseconds": 338.6,
          "TotalNanoseconds": 338600.0,
          "TotalMinutes": 5.643333333333333E-06,
          "TotalSeconds": 0.0003386
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }",
            "Type": 19,
            "Start": 29122,
            "Length": 1022,
            "StartLine": 617,
            "StartColumn": 122,
            "EndLine": 639,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "489151f6-c0c3-42e6-b415-3af7afdb4b1c",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Cache Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "Cache Performance"
          ],
          "Data": null,
          "ExpandedName": "Cache Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance",
          "Blocks": [],
          "Tests": [
            "[!] Should meet cache performance benchmarks",
            "[!] Should handle cache warming efficiently"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 2,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 51028,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 102,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.906018518518518E-08,
            "TotalHours": 1.4174444444444444E-06,
            "TotalMilliseconds": 5.1028,
            "TotalMicroseconds": 5102.8,
            "TotalNanoseconds": 5102800.0,
            "TotalMinutes": 8.504666666666667E-05,
            "TotalSeconds": 0.0051028
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Tests": "",
            "Result": "Passed",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 4,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:00.2420494",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Passed": true,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.9484705-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1235608",
            "UserDuration": "00:00:00.1184886",
            "OwnDuration": "00:00:00.0923743",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                    Set-ItResult -Skipped -Because \"ParallelProcessing module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 570,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "adf451ed-f70f-457d-8bfd-2d81f0526dcf",
            "Ast": "{\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should meet cache performance benchmarks",
            "[!] Should handle cache warming efficiently"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.9959537-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 50257,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 25,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.8167824074074075E-08,
            "TotalHours": 1.3960277777777778E-06,
            "TotalMilliseconds": 5.0257,
            "TotalMicroseconds": 5025.7,
            "TotalNanoseconds": 5025700.0,
            "TotalMinutes": 8.376166666666667E-05,
            "TotalSeconds": 0.0050257
          },
          "UserDuration": {
            "Ticks": 771,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 77,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.923611111111111E-10,
            "TotalHours": 2.1416666666666667E-08,
            "TotalMilliseconds": 0.0771,
            "TotalMicroseconds": 77.1,
            "TotalNanoseconds": 77100.0,
            "TotalMinutes": 1.285E-06,
            "TotalSeconds": 7.71E-05
          },
          "OwnDuration": {
            "Ticks": 45562,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 556,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.2733796296296296E-08,
            "TotalHours": 1.2656111111111112E-06,
            "TotalMilliseconds": 4.5562,
            "TotalMicroseconds": 4556.2,
            "TotalNanoseconds": 4556200.0,
            "TotalMinutes": 7.593666666666667E-05,
            "TotalSeconds": 0.0045562
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "6f7197d3-8f3d-4e0d-b63a-525a0d7c6bb6",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 610,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 2,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 617,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.996679-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 3386,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 338,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.918981481481482E-09,
          "TotalHours": 9.405555555555556E-08,
          "TotalMilliseconds": 0.3386,
          "TotalMicroseconds": 338.6,
          "TotalNanoseconds": 338600.0,
          "TotalMinutes": 5.643333333333333E-06,
          "TotalSeconds": 0.0003386
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should handle cache warming efficiently",
        "Path": [
          "Enhanced Documentation System - Performance",
          "Cache Performance",
          "Should handle cache warming efficiently"
        ],
        "Data": null,
        "ExpandedName": "Should handle cache warming efficiently",
        "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should handle cache warming efficiently",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 2080,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 208,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.4074074074074074E-09,
          "TotalHours": 5.7777777777777775E-08,
          "TotalMilliseconds": 0.208,
          "TotalMicroseconds": 208.0,
          "TotalNanoseconds": 208000.0,
          "TotalMinutes": 3.466666666666667E-06,
          "TotalSeconds": 0.000208
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }",
            "Type": 19,
            "Start": 30280,
            "Length": 781,
            "StartLine": 641,
            "StartColumn": 121,
            "EndLine": 654,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "4f03cdd0-b40b-4b18-a120-d084dd3fda27",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Cache Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "Cache Performance"
          ],
          "Data": null,
          "ExpandedName": "Cache Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance",
          "Blocks": [],
          "Tests": [
            "[!] Should meet cache performance benchmarks",
            "[!] Should handle cache warming efficiently"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 2,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 51028,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 102,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.906018518518518E-08,
            "TotalHours": 1.4174444444444444E-06,
            "TotalMilliseconds": 5.1028,
            "TotalMicroseconds": 5102.8,
            "TotalNanoseconds": 5102800.0,
            "TotalMinutes": 8.504666666666667E-05,
            "TotalSeconds": 0.0051028
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Tests": "",
            "Result": "Passed",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 4,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:00.2420494",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Passed": true,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.9484705-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1235608",
            "UserDuration": "00:00:00.1184886",
            "OwnDuration": "00:00:00.0923743",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                    Set-ItResult -Skipped -Because \"ParallelProcessing module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 570,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "adf451ed-f70f-457d-8bfd-2d81f0526dcf",
            "Ast": "{\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should meet cache performance benchmarks",
            "[!] Should handle cache warming efficiently"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.9959537-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 50257,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 25,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.8167824074074075E-08,
            "TotalHours": 1.3960277777777778E-06,
            "TotalMilliseconds": 5.0257,
            "TotalMicroseconds": 5025.7,
            "TotalNanoseconds": 5025700.0,
            "TotalMinutes": 8.376166666666667E-05,
            "TotalSeconds": 0.0050257
          },
          "UserDuration": {
            "Ticks": 771,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 77,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.923611111111111E-10,
            "TotalHours": 2.1416666666666667E-08,
            "TotalMilliseconds": 0.0771,
            "TotalMicroseconds": 77.1,
            "TotalNanoseconds": 77100.0,
            "TotalMinutes": 1.285E-06,
            "TotalSeconds": 7.71E-05
          },
          "OwnDuration": {
            "Ticks": 45562,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 556,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.2733796296296296E-08,
            "TotalHours": 1.2656111111111112E-06,
            "TotalMilliseconds": 4.5562,
            "TotalMicroseconds": 4556.2,
            "TotalNanoseconds": 4556200.0,
            "TotalMinutes": 7.593666666666667E-05,
            "TotalSeconds": 0.0045562
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "6f7197d3-8f3d-4e0d-b63a-525a0d7c6bb6",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 610,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 2,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 641,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.9970216-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 2080,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 208,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.4074074074074074E-09,
          "TotalHours": 5.7777777777777775E-08,
          "TotalMilliseconds": 0.208,
          "TotalMicroseconds": 208.0,
          "TotalNanoseconds": 208000.0,
          "TotalMinutes": 3.466666666666667E-06,
          "TotalSeconds": 0.000208
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should handle incremental updates efficiently",
        "Path": [
          "Enhanced Documentation System - Performance",
          "File Processing Performance",
          "Should handle incremental updates efficiently"
        ],
        "Data": null,
        "ExpandedName": "Should handle incremental updates efficiently",
        "ExpandedPath": "Enhanced Documentation System - Performance.File Processing Performance.Should handle incremental updates efficiently",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 3011,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 301,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.4849537037037037E-09,
          "TotalHours": 8.363888888888888E-08,
          "TotalMilliseconds": 0.3011,
          "TotalMicroseconds": 301.1,
          "TotalNanoseconds": 301100.0,
          "TotalMinutes": 5.018333333333333E-06,
          "TotalSeconds": 0.0003011
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }",
            "Type": 19,
            "Start": 33580,
            "Length": 725,
            "StartLine": 711,
            "StartColumn": 140,
            "EndLine": 727,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "22efca94-8fe7-4ab1-8fc9-5b3773d51e35",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }",
            "Parent": "{\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "File Processing Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "File Processing Performance"
          ],
          "Data": null,
          "ExpandedName": "File Processing Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.File Processing Performance",
          "Blocks": [],
          "Tests": [
            "[+] Should process files at 100+ files per second",
            "[!] Should handle incremental updates efficiently"
          ],
          "Result": "Passed",
          "FailedCount": 0,
          "PassedCount": 1,
          "SkippedCount": 1,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 698023,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 69,
            "Microseconds": 802,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.078969907407407E-07,
            "TotalHours": 1.9389527777777777E-05,
            "TotalMilliseconds": 69.8023,
            "TotalMicroseconds": 69802.3,
            "TotalNanoseconds": 69802300.0,
            "TotalMinutes": 0.0011633716666666666,
            "TotalSeconds": 0.0698023
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Tests": "",
            "Result": "Passed",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 4,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:00.2420494",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Passed": true,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.9484705-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1235608",
            "UserDuration": "00:00:00.1184886",
            "OwnDuration": "00:00:00.0923743",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                    Set-ItResult -Skipped -Because \"ParallelProcessing module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 570,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "44a13c71-9201-4e8b-ad0f-647542750043",
            "Ast": "{\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[+] Should process files at 100+ files per second",
            "[!] Should handle incremental updates efficiently"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:22.0010428-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 138677,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 13,
            "Microseconds": 867,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.6050578703703703E-07,
            "TotalHours": 3.852138888888889E-06,
            "TotalMilliseconds": 13.8677,
            "TotalMicroseconds": 13867.7,
            "TotalNanoseconds": 13867700.0,
            "TotalMinutes": 0.00023112833333333333,
            "TotalSeconds": 0.0138677
          },
          "UserDuration": {
            "Ticks": 559346,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 55,
            "Microseconds": 934,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.473912037037037E-07,
            "TotalHours": 1.553738888888889E-05,
            "TotalMilliseconds": 55.9346,
            "TotalMicroseconds": 55934.6,
            "TotalNanoseconds": 55934600.0,
            "TotalMinutes": 0.0009322433333333333,
            "TotalSeconds": 0.0559346
          },
          "OwnDuration": {
            "Ticks": 358845,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 35,
            "Microseconds": 884,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.153298611111111E-07,
            "TotalHours": 9.967916666666667E-06,
            "TotalMilliseconds": 35.8845,
            "TotalMicroseconds": 35884.5,
            "TotalNanoseconds": 35884500.0,
            "TotalMinutes": 0.000598075,
            "TotalSeconds": 0.0358845
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "3923e4a0-33eb-4513-8267-579860157f6e",
            "Ast": "{\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }"
          },
          "StartLine": 657,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 1,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 1,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 711,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:22.0607641-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 3011,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 301,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.4849537037037037E-09,
          "TotalHours": 8.363888888888888E-08,
          "TotalMilliseconds": 0.3011,
          "TotalMicroseconds": 301.1,
          "TotalNanoseconds": 301100.0,
          "TotalMinutes": 5.018333333333333E-06,
          "TotalSeconds": 0.0003011
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should demonstrate parallel processing benefits",
        "Path": [
          "Enhanced Documentation System - Performance",
          "Parallel Processing Performance",
          "Should demonstrate parallel processing benefits"
        ],
        "Data": null,
        "ExpandedName": "Should demonstrate parallel processing benefits",
        "ExpandedPath": "Enhanced Documentation System - Performance.Parallel Processing Performance.Should demonstrate parallel processing benefits",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 2740,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 274,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.1712962962962964E-09,
          "TotalHours": 7.611111111111111E-08,
          "TotalMilliseconds": 0.274,
          "TotalMicroseconds": 274.0,
          "TotalNanoseconds": 274000.0,
          "TotalMinutes": 4.5666666666666664E-06,
          "TotalSeconds": 0.000274
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }",
            "Type": 19,
            "Start": 34757,
            "Length": 1070,
            "StartLine": 737,
            "StartColumn": 130,
            "EndLine": 757,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "ef08972d-8a2c-4047-b401-f53904d39c40",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }",
            "Parent": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Parallel Processing Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "Parallel Processing Performance"
          ],
          "Data": null,
          "ExpandedName": "Parallel Processing Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.Parallel Processing Performance",
          "Blocks": [],
          "Tests": [
            "[!] Should demonstrate parallel processing benefits"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 1,
          "NotRunCount": 0,
          "TotalCount": 1,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 747700,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 74,
            "Microseconds": 770,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.653935185185185E-07,
            "TotalHours": 2.0769444444444444E-05,
            "TotalMilliseconds": 74.77,
            "TotalMicroseconds": 74770.0,
            "TotalNanoseconds": 74770000.0,
            "TotalMinutes": 0.0012461666666666667,
            "TotalSeconds": 0.07477
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Tests": "",
            "Result": "Passed",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 4,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:00.2420494",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Passed": true,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.9484705-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1235608",
            "UserDuration": "00:00:00.1184886",
            "OwnDuration": "00:00:00.0923743",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                    Set-ItResult -Skipped -Because \"ParallelProcessing module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 570,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "9011de1c-372c-4635-a0ec-5e88d6b67bb5",
            "Ast": "{\r\n                if (-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                    Set-ItResult -Skipped -Because \"ParallelProcessing module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should demonstrate parallel processing benefits"
          ],
          "Passed": true,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:22.0657436-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 187363,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 18,
            "Microseconds": 736,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.1685532407407407E-07,
            "TotalHours": 5.204527777777778E-06,
            "TotalMilliseconds": 18.7363,
            "TotalMicroseconds": 18736.3,
            "TotalNanoseconds": 18736300.0,
            "TotalMinutes": 0.0003122716666666667,
            "TotalSeconds": 0.0187363
          },
          "UserDuration": {
            "Ticks": 560337,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 56,
            "Microseconds": 33,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.485381944444444E-07,
            "TotalHours": 1.5564916666666667E-05,
            "TotalMilliseconds": 56.0337,
            "TotalMicroseconds": 56033.7,
            "TotalNanoseconds": 56033700.0,
            "TotalMinutes": 0.000933895,
            "TotalSeconds": 0.0560337
          },
          "OwnDuration": {
            "Ticks": 744960,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 74,
            "Microseconds": 496,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.622222222222222E-07,
            "TotalHours": 2.0693333333333334E-05,
            "TotalMilliseconds": 74.496,
            "TotalMicroseconds": 74496.0,
            "TotalNanoseconds": 74496000.0,
            "TotalMinutes": 0.0012416,
            "TotalSeconds": 0.074496
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "12ca5634-9710-4618-8755-5b913ded8675",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                    Set-ItResult -Skipped -Because \"ParallelProcessing module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }"
          },
          "StartLine": 730,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 1,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 1,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 737,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:22.0663206-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 2740,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 274,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.1712962962962964E-09,
          "TotalHours": 7.611111111111111E-08,
          "TotalMilliseconds": 0.274,
          "TotalMicroseconds": 274.0,
          "TotalNanoseconds": 274000.0,
          "TotalMinutes": 4.5666666666666664E-06,
          "TotalSeconds": 0.000274
        },
        "PluginData": null,
        "FrameworkData": null
      }
    ],
    "Inconclusive": [],
    "NotRun": [],
    "Tests": [
      {
        "Name": "Should create thread-safe CPG wrapper",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Thread-Safe Operations",
          "Should create thread-safe CPG wrapper"
        ],
        "Data": null,
        "ExpandedName": "Should create thread-safe CPG wrapper",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should create thread-safe CPG wrapper",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 123189,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 12,
          "Microseconds": 318,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.425798611111111E-07,
          "TotalHours": 3.4219166666666665E-06,
          "TotalMilliseconds": 12.3189,
          "TotalMicroseconds": 12318.9,
          "TotalNanoseconds": 12318900.0,
          "TotalMinutes": 0.000205315,
          "TotalSeconds": 0.0123189
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }",
            "Type": 19,
            "Start": 6783,
            "Length": 175,
            "StartLine": 171,
            "StartColumn": 125,
            "EndLine": 175,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "1530621e-ac93-45f4-aa71-1e9f7cf97ac7",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }",
            "Parent": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Thread-Safe Operations",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Thread-Safe Operations"
          ],
          "Data": null,
          "ExpandedName": "Thread-Safe Operations",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
          "Blocks": [],
          "Tests": [
            "[!] Should create thread-safe CPG wrapper",
            "[!] Should handle concurrent operations safely",
            "[!] Should provide thread safety statistics"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 270195,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 27,
            "Microseconds": 19,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.1272569444444445E-07,
            "TotalHours": 7.505416666666667E-06,
            "TotalMilliseconds": 27.0195,
            "TotalMicroseconds": 27019.5,
            "TotalNanoseconds": 27019500.0,
            "TotalMinutes": 0.000450325,
            "TotalSeconds": 0.0270195
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.0446447",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Passed": true,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.8460832-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0437822",
            "UserDuration": "00:00:00.0008625",
            "OwnDuration": "-00:00:00.0511809",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 122,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should create thread-safe CPG wrapper",
            "[!] Should handle concurrent operations safely",
            "[!] Should provide thread safety statistics"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.8502057-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 268976,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 26,
            "Microseconds": 897,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.113148148148148E-07,
            "TotalHours": 7.471555555555556E-06,
            "TotalMilliseconds": 26.8976,
            "TotalMicroseconds": 26897.6,
            "TotalNanoseconds": 26897600.0,
            "TotalMinutes": 0.0004482933333333333,
            "TotalSeconds": 0.0268976
          },
          "UserDuration": {
            "Ticks": 1219,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 121,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4108796296296297E-09,
            "TotalHours": 3.386111111111111E-08,
            "TotalMilliseconds": 0.1219,
            "TotalMicroseconds": 121.9,
            "TotalNanoseconds": 121900.0,
            "TotalMinutes": 2.0316666666666666E-06,
            "TotalSeconds": 0.0001219
          },
          "OwnDuration": {
            "Ticks": 135245,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 13,
            "Microseconds": 524,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.565335648148148E-07,
            "TotalHours": 3.7568055555555555E-06,
            "TotalMilliseconds": 13.5245,
            "TotalMicroseconds": 13524.5,
            "TotalNanoseconds": 13524500.0,
            "TotalMinutes": 0.00022540833333333334,
            "TotalSeconds": 0.0135245
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "da47584c-f610-4c28-8e6c-c05ce80022b6",
            "Ast": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }"
          },
          "StartLine": 169,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 171,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.8526486-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 123189,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 12,
          "Microseconds": 318,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.425798611111111E-07,
          "TotalHours": 3.4219166666666665E-06,
          "TotalMilliseconds": 12.3189,
          "TotalMicroseconds": 12318.9,
          "TotalNanoseconds": 12318900.0,
          "TotalMinutes": 0.000205315,
          "TotalSeconds": 0.0123189
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should handle concurrent operations safely",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Thread-Safe Operations",
          "Should handle concurrent operations safely"
        ],
        "Data": null,
        "ExpandedName": "Should handle concurrent operations safely",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should handle concurrent operations safely",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 3034,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 303,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.511574074074074E-09,
          "TotalHours": 8.427777777777778E-08,
          "TotalMilliseconds": 0.3034,
          "TotalMicroseconds": 303.4,
          "TotalNanoseconds": 303400.0,
          "TotalMinutes": 5.056666666666667E-06,
          "TotalSeconds": 0.0003034
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }",
            "Type": 19,
            "Start": 7103,
            "Length": 737,
            "StartLine": 177,
            "StartColumn": 130,
            "EndLine": 195,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "0203f3cb-fb2a-4c8b-8d2a-39f63b7aa6c4",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }",
            "Parent": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Thread-Safe Operations",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Thread-Safe Operations"
          ],
          "Data": null,
          "ExpandedName": "Thread-Safe Operations",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
          "Blocks": [],
          "Tests": [
            "[!] Should create thread-safe CPG wrapper",
            "[!] Should handle concurrent operations safely",
            "[!] Should provide thread safety statistics"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 270195,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 27,
            "Microseconds": 19,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.1272569444444445E-07,
            "TotalHours": 7.505416666666667E-06,
            "TotalMilliseconds": 27.0195,
            "TotalMicroseconds": 27019.5,
            "TotalNanoseconds": 27019500.0,
            "TotalMinutes": 0.000450325,
            "TotalSeconds": 0.0270195
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.0446447",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Passed": true,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.8460832-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0437822",
            "UserDuration": "00:00:00.0008625",
            "OwnDuration": "-00:00:00.0511809",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 122,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should create thread-safe CPG wrapper",
            "[!] Should handle concurrent operations safely",
            "[!] Should provide thread safety statistics"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.8502057-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 268976,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 26,
            "Microseconds": 897,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.113148148148148E-07,
            "TotalHours": 7.471555555555556E-06,
            "TotalMilliseconds": 26.8976,
            "TotalMicroseconds": 26897.6,
            "TotalNanoseconds": 26897600.0,
            "TotalMinutes": 0.0004482933333333333,
            "TotalSeconds": 0.0268976
          },
          "UserDuration": {
            "Ticks": 1219,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 121,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4108796296296297E-09,
            "TotalHours": 3.386111111111111E-08,
            "TotalMilliseconds": 0.1219,
            "TotalMicroseconds": 121.9,
            "TotalNanoseconds": 121900.0,
            "TotalMinutes": 2.0316666666666666E-06,
            "TotalSeconds": 0.0001219
          },
          "OwnDuration": {
            "Ticks": 135245,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 13,
            "Microseconds": 524,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.565335648148148E-07,
            "TotalHours": 3.7568055555555555E-06,
            "TotalMilliseconds": 13.5245,
            "TotalMicroseconds": 13524.5,
            "TotalNanoseconds": 13524500.0,
            "TotalMinutes": 0.00022540833333333334,
            "TotalSeconds": 0.0135245
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "da47584c-f610-4c28-8e6c-c05ce80022b6",
            "Ast": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }"
          },
          "StartLine": 169,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 177,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.8646733-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 3034,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 303,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.511574074074074E-09,
          "TotalHours": 8.427777777777778E-08,
          "TotalMilliseconds": 0.3034,
          "TotalMicroseconds": 303.4,
          "TotalNanoseconds": 303400.0,
          "TotalMinutes": 5.056666666666667E-06,
          "TotalSeconds": 0.0003034
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should provide thread safety statistics",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Thread-Safe Operations",
          "Should provide thread safety statistics"
        ],
        "Data": null,
        "ExpandedName": "Should provide thread safety statistics",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should provide thread safety statistics",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 8727,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 872,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.0100694444444445E-08,
          "TotalHours": 2.4241666666666665E-07,
          "TotalMilliseconds": 0.8727,
          "TotalMicroseconds": 872.7,
          "TotalNanoseconds": 872700.0,
          "TotalMinutes": 1.4545E-05,
          "TotalSeconds": 0.0008727
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }",
            "Type": 19,
            "Start": 7982,
            "Length": 311,
            "StartLine": 197,
            "StartColumn": 127,
            "EndLine": 203,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "b7187138-5db5-4271-bf0d-0de916a96a0a",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }",
            "Parent": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Thread-Safe Operations",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Thread-Safe Operations"
          ],
          "Data": null,
          "ExpandedName": "Thread-Safe Operations",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
          "Blocks": [],
          "Tests": [
            "[!] Should create thread-safe CPG wrapper",
            "[!] Should handle concurrent operations safely",
            "[!] Should provide thread safety statistics"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 270195,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 27,
            "Microseconds": 19,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.1272569444444445E-07,
            "TotalHours": 7.505416666666667E-06,
            "TotalMilliseconds": 27.0195,
            "TotalMicroseconds": 27019.5,
            "TotalNanoseconds": 27019500.0,
            "TotalMinutes": 0.000450325,
            "TotalSeconds": 0.0270195
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.0446447",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Passed": true,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.8460832-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0437822",
            "UserDuration": "00:00:00.0008625",
            "OwnDuration": "-00:00:00.0511809",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 122,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should create thread-safe CPG wrapper",
            "[!] Should handle concurrent operations safely",
            "[!] Should provide thread safety statistics"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.8502057-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 268976,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 26,
            "Microseconds": 897,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.113148148148148E-07,
            "TotalHours": 7.471555555555556E-06,
            "TotalMilliseconds": 26.8976,
            "TotalMicroseconds": 26897.6,
            "TotalNanoseconds": 26897600.0,
            "TotalMinutes": 0.0004482933333333333,
            "TotalSeconds": 0.0268976
          },
          "UserDuration": {
            "Ticks": 1219,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 121,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4108796296296297E-09,
            "TotalHours": 3.386111111111111E-08,
            "TotalMilliseconds": 0.1219,
            "TotalMicroseconds": 121.9,
            "TotalNanoseconds": 121900.0,
            "TotalMinutes": 2.0316666666666666E-06,
            "TotalSeconds": 0.0001219
          },
          "OwnDuration": {
            "Ticks": 135245,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 13,
            "Microseconds": 524,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.565335648148148E-07,
            "TotalHours": 3.7568055555555555E-06,
            "TotalMilliseconds": 13.5245,
            "TotalMicroseconds": 13524.5,
            "TotalNanoseconds": 13524500.0,
            "TotalMinutes": 0.00022540833333333334,
            "TotalSeconds": 0.0135245
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "da47584c-f610-4c28-8e6c-c05ce80022b6",
            "Ast": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }"
          },
          "StartLine": 169,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 197,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.8649763-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 8727,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 872,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.0100694444444445E-08,
          "TotalHours": 2.4241666666666665E-07,
          "TotalMilliseconds": 0.8727,
          "TotalMicroseconds": 872.7,
          "TotalNanoseconds": 872700.0,
          "TotalMinutes": 1.4545E-05,
          "TotalSeconds": 0.0008727
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should build call graphs from source code",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Call Graph Builder",
          "Should build call graphs from source code"
        ],
        "Data": null,
        "ExpandedName": "Should build call graphs from source code",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should build call graphs from source code",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 2930,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 293,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.3912037037037036E-09,
          "TotalHours": 8.138888888888889E-08,
          "TotalMilliseconds": 0.293,
          "TotalMicroseconds": 293.0,
          "TotalNanoseconds": 293000.0,
          "TotalMinutes": 4.883333333333334E-06,
          "TotalSeconds": 0.000293
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Type": 19,
            "Start": 8730,
            "Length": 665,
            "StartLine": 213,
            "StartColumn": 125,
            "EndLine": 233,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "a1cc38d9-c9cf-46c2-a0e2-d923d9cf389b",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Call Graph Builder",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Call Graph Builder"
          ],
          "Data": null,
          "ExpandedName": "Call Graph Builder",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder",
          "Blocks": [],
          "Tests": [
            "[!] Should build call graphs from source code",
            "[!] Should detect recursive calls"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 2,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 318573,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 31,
            "Microseconds": 857,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.6871875E-07,
            "TotalHours": 8.84925E-06,
            "TotalMilliseconds": 31.8573,
            "TotalMicroseconds": 31857.3,
            "TotalNanoseconds": 31857300.0,
            "TotalMinutes": 0.000530955,
            "TotalSeconds": 0.0318573
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.0446447",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Passed": true,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.8460832-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0437822",
            "UserDuration": "00:00:00.0008625",
            "OwnDuration": "-00:00:00.0511809",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 122,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "027a9c91-cea0-4cfa-9e1b-659e3062733d",
            "Ast": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should build call graphs from source code",
            "[!] Should detect recursive calls"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.8772268-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 316475,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 31,
            "Microseconds": 647,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.6629050925925924E-07,
            "TotalHours": 8.790972222222222E-06,
            "TotalMilliseconds": 31.6475,
            "TotalMicroseconds": 31647.5,
            "TotalNanoseconds": 31647500.0,
            "TotalMinutes": 0.0005274583333333333,
            "TotalSeconds": 0.0316475
          },
          "UserDuration": {
            "Ticks": 2098,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 209,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.428240740740741E-09,
            "TotalHours": 5.827777777777778E-08,
            "TotalMilliseconds": 0.2098,
            "TotalMicroseconds": 209.8,
            "TotalNanoseconds": 209800.0,
            "TotalMinutes": 3.4966666666666665E-06,
            "TotalSeconds": 0.0002098
          },
          "OwnDuration": {
            "Ticks": 312988,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 31,
            "Microseconds": 298,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.622546296296296E-07,
            "TotalHours": 8.694111111111111E-06,
            "TotalMilliseconds": 31.2988,
            "TotalMicroseconds": 31298.8,
            "TotalNanoseconds": 31298800.0,
            "TotalMinutes": 0.0005216466666666667,
            "TotalSeconds": 0.0312988
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "db3cdda1-7f6c-43b2-8e4e-dd28b7179713",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 206,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 2,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 213,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.8777977-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 2930,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 293,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.3912037037037036E-09,
          "TotalHours": 8.138888888888889E-08,
          "TotalMilliseconds": 0.293,
          "TotalMicroseconds": 293.0,
          "TotalNanoseconds": 293000.0,
          "TotalMinutes": 4.883333333333334E-06,
          "TotalSeconds": 0.000293
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should detect recursive calls",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Call Graph Builder",
          "Should detect recursive calls"
        ],
        "Data": null,
        "ExpandedName": "Should detect recursive calls",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should detect recursive calls",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 2655,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 265,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.0729166666666665E-09,
          "TotalHours": 7.375E-08,
          "TotalMilliseconds": 0.2655,
          "TotalMicroseconds": 265.5,
          "TotalNanoseconds": 265500.0,
          "TotalMinutes": 4.425E-06,
          "TotalSeconds": 0.0002655
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Type": 19,
            "Start": 9523,
            "Length": 589,
            "StartLine": 235,
            "StartColumn": 113,
            "EndLine": 250,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "336033ff-e169-4ad1-9286-7583944da79f",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Call Graph Builder",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Call Graph Builder"
          ],
          "Data": null,
          "ExpandedName": "Call Graph Builder",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder",
          "Blocks": [],
          "Tests": [
            "[!] Should build call graphs from source code",
            "[!] Should detect recursive calls"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 2,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 318573,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 31,
            "Microseconds": 857,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.6871875E-07,
            "TotalHours": 8.84925E-06,
            "TotalMilliseconds": 31.8573,
            "TotalMicroseconds": 31857.3,
            "TotalNanoseconds": 31857300.0,
            "TotalMinutes": 0.000530955,
            "TotalSeconds": 0.0318573
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.0446447",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Passed": true,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.8460832-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0437822",
            "UserDuration": "00:00:00.0008625",
            "OwnDuration": "-00:00:00.0511809",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 122,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "027a9c91-cea0-4cfa-9e1b-659e3062733d",
            "Ast": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should build call graphs from source code",
            "[!] Should detect recursive calls"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.8772268-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 316475,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 31,
            "Microseconds": 647,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.6629050925925924E-07,
            "TotalHours": 8.790972222222222E-06,
            "TotalMilliseconds": 31.6475,
            "TotalMicroseconds": 31647.5,
            "TotalNanoseconds": 31647500.0,
            "TotalMinutes": 0.0005274583333333333,
            "TotalSeconds": 0.0316475
          },
          "UserDuration": {
            "Ticks": 2098,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 209,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.428240740740741E-09,
            "TotalHours": 5.827777777777778E-08,
            "TotalMilliseconds": 0.2098,
            "TotalMicroseconds": 209.8,
            "TotalNanoseconds": 209800.0,
            "TotalMinutes": 3.4966666666666665E-06,
            "TotalSeconds": 0.0002098
          },
          "OwnDuration": {
            "Ticks": 312988,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 31,
            "Microseconds": 298,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.622546296296296E-07,
            "TotalHours": 8.694111111111111E-06,
            "TotalMilliseconds": 31.2988,
            "TotalMicroseconds": 31298.8,
            "TotalNanoseconds": 31298800.0,
            "TotalMinutes": 0.0005216466666666667,
            "TotalSeconds": 0.0312988
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "db3cdda1-7f6c-43b2-8e4e-dd28b7179713",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 206,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 2,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 235,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.8781007-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 2655,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 265,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.0729166666666665E-09,
          "TotalHours": 7.375E-08,
          "TotalMilliseconds": 0.2655,
          "TotalMicroseconds": 265.5,
          "TotalNanoseconds": 265500.0,
          "TotalMinutes": 4.425E-06,
          "TotalSeconds": 0.0002655
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should track variable definitions and uses",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Data Flow Tracker",
          "Should track variable definitions and uses"
        ],
        "Data": null,
        "ExpandedName": "Should track variable definitions and uses",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should track variable definitions and uses",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 2353,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 235,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.7233796296296294E-09,
          "TotalHours": 6.536111111111111E-08,
          "TotalMilliseconds": 0.2353,
          "TotalMicroseconds": 235.3,
          "TotalNanoseconds": 235300.0,
          "TotalMinutes": 3.921666666666667E-06,
          "TotalSeconds": 0.0002353
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Type": 19,
            "Start": 10546,
            "Length": 475,
            "StartLine": 260,
            "StartColumn": 125,
            "EndLine": 272,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "1fb33e77-c40d-402b-ad21-18b51ba5de39",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Data Flow Tracker",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Data Flow Tracker"
          ],
          "Data": null,
          "ExpandedName": "Data Flow Tracker",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker",
          "Blocks": [],
          "Tests": [
            "[!] Should track variable definitions and uses",
            "[!] Should perform taint analysis"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 2,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 369488,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 36,
            "Microseconds": 948,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.2764814814814813E-07,
            "TotalHours": 1.0263555555555555E-05,
            "TotalMilliseconds": 36.9488,
            "TotalMicroseconds": 36948.8,
            "TotalNanoseconds": 36948800.0,
            "TotalMinutes": 0.0006158133333333334,
            "TotalSeconds": 0.0369488
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.0446447",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Passed": true,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.8460832-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0437822",
            "UserDuration": "00:00:00.0008625",
            "OwnDuration": "-00:00:00.0511809",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 122,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a72e6b0c-7353-4362-81a1-94b8c5b70d7a",
            "Ast": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should track variable definitions and uses",
            "[!] Should perform taint analysis"
          ],
          "Passed": true,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.8820631-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 366614,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 36,
            "Microseconds": 661,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.2432175925925927E-07,
            "TotalHours": 1.0183722222222222E-05,
            "TotalMilliseconds": 36.6614,
            "TotalMicroseconds": 36661.4,
            "TotalNanoseconds": 36661400.0,
            "TotalMinutes": 0.0006110233333333333,
            "TotalSeconds": 0.0366614
          },
          "UserDuration": {
            "Ticks": 2874,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 287,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.3263888888888888E-09,
            "TotalHours": 7.983333333333333E-08,
            "TotalMilliseconds": 0.2874,
            "TotalMicroseconds": 287.4,
            "TotalNanoseconds": 287400.0,
            "TotalMinutes": 4.79E-06,
            "TotalSeconds": 0.0002874
          },
          "OwnDuration": {
            "Ticks": 365049,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 36,
            "Microseconds": 504,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.2251041666666667E-07,
            "TotalHours": 1.014025E-05,
            "TotalMilliseconds": 36.5049,
            "TotalMicroseconds": 36504.9,
            "TotalNanoseconds": 36504900.0,
            "TotalMinutes": 0.000608415,
            "TotalSeconds": 0.0365049
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "fb382826-3a91-4378-a704-ef4fd767b7d5",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 253,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 2,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 260,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.8825252-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 2353,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 235,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.7233796296296294E-09,
          "TotalHours": 6.536111111111111E-08,
          "TotalMilliseconds": 0.2353,
          "TotalMicroseconds": 235.3,
          "TotalNanoseconds": 235300.0,
          "TotalMinutes": 3.921666666666667E-06,
          "TotalSeconds": 0.0002353
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should perform taint analysis",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Data Flow Tracker",
          "Should perform taint analysis"
        ],
        "Data": null,
        "ExpandedName": "Should perform taint analysis",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should perform taint analysis",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 2086,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 208,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.414351851851852E-09,
          "TotalHours": 5.794444444444444E-08,
          "TotalMilliseconds": 0.2086,
          "TotalMicroseconds": 208.6,
          "TotalNanoseconds": 208600.0,
          "TotalMinutes": 3.4766666666666667E-06,
          "TotalSeconds": 0.0002086
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Type": 19,
            "Start": 11148,
            "Length": 563,
            "StartLine": 274,
            "StartColumn": 112,
            "EndLine": 286,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "db947e59-5570-4af6-ba22-4ba0b8f6eba6",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Data Flow Tracker",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Data Flow Tracker"
          ],
          "Data": null,
          "ExpandedName": "Data Flow Tracker",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker",
          "Blocks": [],
          "Tests": [
            "[!] Should track variable definitions and uses",
            "[!] Should perform taint analysis"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 2,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 369488,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 36,
            "Microseconds": 948,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.2764814814814813E-07,
            "TotalHours": 1.0263555555555555E-05,
            "TotalMilliseconds": 36.9488,
            "TotalMicroseconds": 36948.8,
            "TotalNanoseconds": 36948800.0,
            "TotalMinutes": 0.0006158133333333334,
            "TotalSeconds": 0.0369488
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.0446447",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Thread-Safe Operations [!] Call Graph Builder [!] Data Flow Tracker",
            "Passed": true,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.8460832-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0437822",
            "UserDuration": "00:00:00.0008625",
            "OwnDuration": "-00:00:00.0511809",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 122,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a72e6b0c-7353-4362-81a1-94b8c5b70d7a",
            "Ast": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should track variable definitions and uses",
            "[!] Should perform taint analysis"
          ],
          "Passed": true,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.8820631-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 366614,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 36,
            "Microseconds": 661,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.2432175925925927E-07,
            "TotalHours": 1.0183722222222222E-05,
            "TotalMilliseconds": 36.6614,
            "TotalMicroseconds": 36661.4,
            "TotalNanoseconds": 36661400.0,
            "TotalMinutes": 0.0006110233333333333,
            "TotalSeconds": 0.0366614
          },
          "UserDuration": {
            "Ticks": 2874,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 287,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.3263888888888888E-09,
            "TotalHours": 7.983333333333333E-08,
            "TotalMilliseconds": 0.2874,
            "TotalMicroseconds": 287.4,
            "TotalNanoseconds": 287400.0,
            "TotalMinutes": 4.79E-06,
            "TotalSeconds": 0.0002874
          },
          "OwnDuration": {
            "Ticks": 365049,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 36,
            "Microseconds": 504,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.2251041666666667E-07,
            "TotalHours": 1.014025E-05,
            "TotalMilliseconds": 36.5049,
            "TotalMicroseconds": 36504.9,
            "TotalNanoseconds": 36504900.0,
            "TotalMinutes": 0.000608415,
            "TotalSeconds": 0.0365049
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "fb382826-3a91-4378-a704-ef4fd767b7d5",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 253,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 2,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 274,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.8827691-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 2086,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 208,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.414351851851852E-09,
          "TotalHours": 5.794444444444444E-08,
          "TotalMilliseconds": 0.2086,
          "TotalMicroseconds": 208.6,
          "TotalNanoseconds": 208600.0,
          "TotalMinutes": 3.4766666666666667E-06,
          "TotalSeconds": 0.0002086
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should connect to Ollama service",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Ollama API Integration",
          "Should connect to Ollama service"
        ],
        "Data": null,
        "ExpandedName": "Should connect to Ollama service",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should connect to Ollama service",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 2840,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 284,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.287037037037037E-09,
          "TotalHours": 7.888888888888889E-08,
          "TotalMilliseconds": 0.284,
          "TotalMicroseconds": 284.0,
          "TotalNanoseconds": 284000.0,
          "TotalMinutes": 4.7333333333333335E-06,
          "TotalSeconds": 0.000284
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }",
            "Type": 19,
            "Start": 13896,
            "Length": 222,
            "StartLine": 334,
            "StartColumn": 88,
            "EndLine": 339,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "bb38ef66-3027-4f0d-8fc6-4f8c7a9edeab",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Ollama API Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Ollama API Integration"
          ],
          "Data": null,
          "ExpandedName": "Ollama API Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration",
          "Blocks": [],
          "Tests": [
            "[!] Should connect to Ollama service",
            "[!] Should list available models",
            "[!] Should generate responses for code analysis"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 47996,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 799,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.5550925925925925E-08,
            "TotalHours": 1.3332222222222222E-06,
            "TotalMilliseconds": 4.7996,
            "TotalMicroseconds": 4799.6,
            "TotalNanoseconds": 4799600.0,
            "TotalMinutes": 7.999333333333334E-05,
            "TotalSeconds": 0.0047996
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0646703",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.8907373-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0634426",
            "UserDuration": "00:00:00.0012277",
            "OwnDuration": "00:00:00.0341818",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 294,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should connect to Ollama service",
            "[!] Should list available models",
            "[!] Should generate responses for code analysis"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.8912268-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 47287,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 728,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.4730324074074075E-08,
            "TotalHours": 1.3135277777777777E-06,
            "TotalMilliseconds": 4.7287,
            "TotalMicroseconds": 4728.7,
            "TotalNanoseconds": 4728700.0,
            "TotalMinutes": 7.881166666666667E-05,
            "TotalSeconds": 0.0047287
          },
          "UserDuration": {
            "Ticks": 709,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 70,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.206018518518518E-10,
            "TotalHours": 1.9694444444444444E-08,
            "TotalMilliseconds": 0.0709,
            "TotalMicroseconds": 70.9,
            "TotalNanoseconds": 70900.0,
            "TotalMinutes": 1.1816666666666666E-06,
            "TotalSeconds": 7.09E-05
          },
          "OwnDuration": {
            "Ticks": 40535,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 53,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.691550925925926E-08,
            "TotalHours": 1.1259722222222222E-06,
            "TotalMilliseconds": 4.0535,
            "TotalMicroseconds": 4053.5,
            "TotalNanoseconds": 4053500.0,
            "TotalMinutes": 6.755833333333333E-05,
            "TotalSeconds": 0.0040535
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "c6482a0c-a974-4d37-881a-5b20a1725bff",
            "Ast": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 333,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 334,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.8916834-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 2840,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 284,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.287037037037037E-09,
          "TotalHours": 7.888888888888889E-08,
          "TotalMilliseconds": 0.284,
          "TotalMicroseconds": 284.0,
          "TotalNanoseconds": 284000.0,
          "TotalMinutes": 4.7333333333333335E-06,
          "TotalSeconds": 0.000284
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should list available models",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Ollama API Integration",
          "Should list available models"
        ],
        "Data": null,
        "ExpandedName": "Should list available models",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should list available models",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 2317,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 231,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.681712962962963E-09,
          "TotalHours": 6.436111111111112E-08,
          "TotalMilliseconds": 0.2317,
          "TotalMicroseconds": 231.7,
          "TotalNanoseconds": 231700.0,
          "TotalMinutes": 3.861666666666666E-06,
          "TotalSeconds": 0.0002317
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }",
            "Type": 19,
            "Start": 14217,
            "Length": 279,
            "StartLine": 341,
            "StartColumn": 84,
            "EndLine": 347,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "9cf7c2bb-3793-4269-ade5-3890ce0f1671",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Ollama API Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Ollama API Integration"
          ],
          "Data": null,
          "ExpandedName": "Ollama API Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration",
          "Blocks": [],
          "Tests": [
            "[!] Should connect to Ollama service",
            "[!] Should list available models",
            "[!] Should generate responses for code analysis"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 47996,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 799,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.5550925925925925E-08,
            "TotalHours": 1.3332222222222222E-06,
            "TotalMilliseconds": 4.7996,
            "TotalMicroseconds": 4799.6,
            "TotalNanoseconds": 4799600.0,
            "TotalMinutes": 7.999333333333334E-05,
            "TotalSeconds": 0.0047996
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0646703",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.8907373-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0634426",
            "UserDuration": "00:00:00.0012277",
            "OwnDuration": "00:00:00.0341818",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 294,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should connect to Ollama service",
            "[!] Should list available models",
            "[!] Should generate responses for code analysis"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.8912268-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 47287,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 728,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.4730324074074075E-08,
            "TotalHours": 1.3135277777777777E-06,
            "TotalMilliseconds": 4.7287,
            "TotalMicroseconds": 4728.7,
            "TotalNanoseconds": 4728700.0,
            "TotalMinutes": 7.881166666666667E-05,
            "TotalSeconds": 0.0047287
          },
          "UserDuration": {
            "Ticks": 709,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 70,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.206018518518518E-10,
            "TotalHours": 1.9694444444444444E-08,
            "TotalMilliseconds": 0.0709,
            "TotalMicroseconds": 70.9,
            "TotalNanoseconds": 70900.0,
            "TotalMinutes": 1.1816666666666666E-06,
            "TotalSeconds": 7.09E-05
          },
          "OwnDuration": {
            "Ticks": 40535,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 53,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.691550925925926E-08,
            "TotalHours": 1.1259722222222222E-06,
            "TotalMilliseconds": 4.0535,
            "TotalMicroseconds": 4053.5,
            "TotalNanoseconds": 4053500.0,
            "TotalMinutes": 6.755833333333333E-05,
            "TotalSeconds": 0.0040535
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "c6482a0c-a974-4d37-881a-5b20a1725bff",
            "Ast": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 333,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 341,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.8919803-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 2317,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 231,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.681712962962963E-09,
          "TotalHours": 6.436111111111112E-08,
          "TotalMilliseconds": 0.2317,
          "TotalMicroseconds": 231.7,
          "TotalNanoseconds": 231700.0,
          "TotalMinutes": 3.861666666666666E-06,
          "TotalSeconds": 0.0002317
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate responses for code analysis",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Ollama API Integration",
          "Should generate responses for code analysis"
        ],
        "Data": null,
        "ExpandedName": "Should generate responses for code analysis",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should generate responses for code analysis",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 2304,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 230,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.6666666666666666E-09,
          "TotalHours": 6.4E-08,
          "TotalMilliseconds": 0.2304,
          "TotalMicroseconds": 230.4,
          "TotalNanoseconds": 230400.0,
          "TotalMinutes": 3.84E-06,
          "TotalSeconds": 0.0002304
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }",
            "Type": 19,
            "Start": 14610,
            "Length": 545,
            "StartLine": 349,
            "StartColumn": 99,
            "EndLine": 358,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "b86270d3-f1a6-42f9-9e68-e5c33db9297a",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Ollama API Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Ollama API Integration"
          ],
          "Data": null,
          "ExpandedName": "Ollama API Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration",
          "Blocks": [],
          "Tests": [
            "[!] Should connect to Ollama service",
            "[!] Should list available models",
            "[!] Should generate responses for code analysis"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 47996,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 799,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.5550925925925925E-08,
            "TotalHours": 1.3332222222222222E-06,
            "TotalMilliseconds": 4.7996,
            "TotalMicroseconds": 4799.6,
            "TotalNanoseconds": 4799600.0,
            "TotalMinutes": 7.999333333333334E-05,
            "TotalSeconds": 0.0047996
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0646703",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.8907373-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0634426",
            "UserDuration": "00:00:00.0012277",
            "OwnDuration": "00:00:00.0341818",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 294,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should connect to Ollama service",
            "[!] Should list available models",
            "[!] Should generate responses for code analysis"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.8912268-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 47287,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 728,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.4730324074074075E-08,
            "TotalHours": 1.3135277777777777E-06,
            "TotalMilliseconds": 4.7287,
            "TotalMicroseconds": 4728.7,
            "TotalNanoseconds": 4728700.0,
            "TotalMinutes": 7.881166666666667E-05,
            "TotalSeconds": 0.0047287
          },
          "UserDuration": {
            "Ticks": 709,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 70,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.206018518518518E-10,
            "TotalHours": 1.9694444444444444E-08,
            "TotalMilliseconds": 0.0709,
            "TotalMicroseconds": 70.9,
            "TotalNanoseconds": 70900.0,
            "TotalMinutes": 1.1816666666666666E-06,
            "TotalSeconds": 7.09E-05
          },
          "OwnDuration": {
            "Ticks": 40535,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 53,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.691550925925926E-08,
            "TotalHours": 1.1259722222222222E-06,
            "TotalMilliseconds": 4.0535,
            "TotalMicroseconds": 4053.5,
            "TotalNanoseconds": 4053500.0,
            "TotalMinutes": 6.755833333333333E-05,
            "TotalSeconds": 0.0040535
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "c6482a0c-a974-4d37-881a-5b20a1725bff",
            "Ast": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 333,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 349,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.8922195-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 2304,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 230,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.6666666666666666E-09,
          "TotalHours": 6.4E-08,
          "TotalMilliseconds": 0.2304,
          "TotalMicroseconds": 230.4,
          "TotalNanoseconds": 230400.0,
          "TotalMinutes": 3.84E-06,
          "TotalSeconds": 0.0002304
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should create function documentation prompts",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Prompt Templates",
          "Should create function documentation prompts"
        ],
        "Data": null,
        "ExpandedName": "Should create function documentation prompts",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create function documentation prompts",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 2649,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 264,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.0659722222222222E-09,
          "TotalHours": 7.358333333333333E-08,
          "TotalMilliseconds": 0.2649,
          "TotalMicroseconds": 264.9,
          "TotalNanoseconds": 264900.0,
          "TotalMinutes": 4.415E-06,
          "TotalSeconds": 0.0002649
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 15590,
            "Length": 427,
            "StartLine": 368,
            "StartColumn": 127,
            "EndLine": 375,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "581b80d1-da6b-41d9-a606-8533f08f45ea",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Prompt Templates",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Prompt Templates"
          ],
          "Data": null,
          "ExpandedName": "Prompt Templates",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
          "Blocks": [],
          "Tests": [
            "[!] Should create function documentation prompts",
            "[!] Should create module documentation prompts",
            "[!] Should support variable substitution"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 101291,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 10,
            "Microseconds": 129,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.172349537037037E-07,
            "TotalHours": 2.8136388888888887E-06,
            "TotalMilliseconds": 10.1291,
            "TotalMicroseconds": 10129.1,
            "TotalNanoseconds": 10129100.0,
            "TotalMinutes": 0.00016881833333333334,
            "TotalSeconds": 0.0101291
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0646703",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.8907373-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0634426",
            "UserDuration": "00:00:00.0012277",
            "OwnDuration": "00:00:00.0341818",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 294,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "6a6092cb-f659-4b49-b9b6-d137cccb6922",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should create function documentation prompts",
            "[!] Should create module documentation prompts",
            "[!] Should support variable substitution"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.8960259-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 99748,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 9,
            "Microseconds": 974,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.1544907407407407E-07,
            "TotalHours": 2.770777777777778E-06,
            "TotalMilliseconds": 9.9748,
            "TotalMicroseconds": 9974.8,
            "TotalNanoseconds": 9974800.0,
            "TotalMinutes": 0.00016624666666666666,
            "TotalSeconds": 0.0099748
          },
          "UserDuration": {
            "Ticks": 1543,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 154,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.7858796296296297E-09,
            "TotalHours": 4.286111111111111E-08,
            "TotalMilliseconds": 0.1543,
            "TotalMicroseconds": 154.3,
            "TotalNanoseconds": 154300.0,
            "TotalMinutes": 2.5716666666666665E-06,
            "TotalSeconds": 0.0001543
          },
          "OwnDuration": {
            "Ticks": 92899,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 9,
            "Microseconds": 289,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.0752199074074075E-07,
            "TotalHours": 2.580527777777778E-06,
            "TotalMilliseconds": 9.2899,
            "TotalMicroseconds": 9289.9,
            "TotalNanoseconds": 9289900.0,
            "TotalMinutes": 0.00015483166666666666,
            "TotalSeconds": 0.0092899
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "753bb846-8f41-4d7f-b982-baae5c84b446",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 361,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 368,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.8965197-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 2649,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 264,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.0659722222222222E-09,
          "TotalHours": 7.358333333333333E-08,
          "TotalMilliseconds": 0.2649,
          "TotalMicroseconds": 264.9,
          "TotalNanoseconds": 264900.0,
          "TotalMinutes": 4.415E-06,
          "TotalSeconds": 0.0002649
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should create module documentation prompts",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Prompt Templates",
          "Should create module documentation prompts"
        ],
        "Data": null,
        "ExpandedName": "Should create module documentation prompts",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create module documentation prompts",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 2866,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 286,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.3171296296296298E-09,
          "TotalHours": 7.961111111111111E-08,
          "TotalMilliseconds": 0.2866,
          "TotalMicroseconds": 286.6,
          "TotalNanoseconds": 286600.0,
          "TotalMinutes": 4.776666666666667E-06,
          "TotalSeconds": 0.0002866
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 16157,
            "Length": 411,
            "StartLine": 377,
            "StartColumn": 125,
            "EndLine": 384,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "2e43d6f3-59ea-4e39-9f15-ae3d5146fcb8",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Prompt Templates",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Prompt Templates"
          ],
          "Data": null,
          "ExpandedName": "Prompt Templates",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
          "Blocks": [],
          "Tests": [
            "[!] Should create function documentation prompts",
            "[!] Should create module documentation prompts",
            "[!] Should support variable substitution"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 101291,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 10,
            "Microseconds": 129,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.172349537037037E-07,
            "TotalHours": 2.8136388888888887E-06,
            "TotalMilliseconds": 10.1291,
            "TotalMicroseconds": 10129.1,
            "TotalNanoseconds": 10129100.0,
            "TotalMinutes": 0.00016881833333333334,
            "TotalSeconds": 0.0101291
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0646703",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.8907373-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0634426",
            "UserDuration": "00:00:00.0012277",
            "OwnDuration": "00:00:00.0341818",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 294,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "6a6092cb-f659-4b49-b9b6-d137cccb6922",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should create function documentation prompts",
            "[!] Should create module documentation prompts",
            "[!] Should support variable substitution"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.8960259-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 99748,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 9,
            "Microseconds": 974,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.1544907407407407E-07,
            "TotalHours": 2.770777777777778E-06,
            "TotalMilliseconds": 9.9748,
            "TotalMicroseconds": 9974.8,
            "TotalNanoseconds": 9974800.0,
            "TotalMinutes": 0.00016624666666666666,
            "TotalSeconds": 0.0099748
          },
          "UserDuration": {
            "Ticks": 1543,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 154,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.7858796296296297E-09,
            "TotalHours": 4.286111111111111E-08,
            "TotalMilliseconds": 0.1543,
            "TotalMicroseconds": 154.3,
            "TotalNanoseconds": 154300.0,
            "TotalMinutes": 2.5716666666666665E-06,
            "TotalSeconds": 0.0001543
          },
          "OwnDuration": {
            "Ticks": 92899,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 9,
            "Microseconds": 289,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.0752199074074075E-07,
            "TotalHours": 2.580527777777778E-06,
            "TotalMilliseconds": 9.2899,
            "TotalMicroseconds": 9289.9,
            "TotalNanoseconds": 9289900.0,
            "TotalMinutes": 0.00015483166666666666,
            "TotalSeconds": 0.0092899
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "753bb846-8f41-4d7f-b982-baae5c84b446",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 361,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 377,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.8968024-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 2866,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 286,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.3171296296296298E-09,
          "TotalHours": 7.961111111111111E-08,
          "TotalMilliseconds": 0.2866,
          "TotalMicroseconds": 286.6,
          "TotalNanoseconds": 286600.0,
          "TotalMinutes": 4.776666666666667E-06,
          "TotalSeconds": 0.0002866
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should support variable substitution",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Prompt Templates",
          "Should support variable substitution"
        ],
        "Data": null,
        "ExpandedName": "Should support variable substitution",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should support variable substitution",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 2877,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 287,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.3298611111111113E-09,
          "TotalHours": 7.991666666666667E-08,
          "TotalMilliseconds": 0.2877,
          "TotalMicroseconds": 287.7,
          "TotalNanoseconds": 287700.0,
          "TotalMinutes": 4.795E-06,
          "TotalSeconds": 0.0002877
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 16702,
            "Length": 542,
            "StartLine": 386,
            "StartColumn": 119,
            "EndLine": 396,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "91b0c5ca-041d-4cfb-87ba-926cc6b80082",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Prompt Templates",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Prompt Templates"
          ],
          "Data": null,
          "ExpandedName": "Prompt Templates",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
          "Blocks": [],
          "Tests": [
            "[!] Should create function documentation prompts",
            "[!] Should create module documentation prompts",
            "[!] Should support variable substitution"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 101291,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 10,
            "Microseconds": 129,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.172349537037037E-07,
            "TotalHours": 2.8136388888888887E-06,
            "TotalMilliseconds": 10.1291,
            "TotalMicroseconds": 10129.1,
            "TotalNanoseconds": 10129100.0,
            "TotalMinutes": 0.00016881833333333334,
            "TotalSeconds": 0.0101291
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0646703",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.8907373-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0634426",
            "UserDuration": "00:00:00.0012277",
            "OwnDuration": "00:00:00.0341818",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 294,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "6a6092cb-f659-4b49-b9b6-d137cccb6922",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should create function documentation prompts",
            "[!] Should create module documentation prompts",
            "[!] Should support variable substitution"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.8960259-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 99748,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 9,
            "Microseconds": 974,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.1544907407407407E-07,
            "TotalHours": 2.770777777777778E-06,
            "TotalMilliseconds": 9.9748,
            "TotalMicroseconds": 9974.8,
            "TotalNanoseconds": 9974800.0,
            "TotalMinutes": 0.00016624666666666666,
            "TotalSeconds": 0.0099748
          },
          "UserDuration": {
            "Ticks": 1543,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 154,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.7858796296296297E-09,
            "TotalHours": 4.286111111111111E-08,
            "TotalMilliseconds": 0.1543,
            "TotalMicroseconds": 154.3,
            "TotalNanoseconds": 154300.0,
            "TotalMinutes": 2.5716666666666665E-06,
            "TotalSeconds": 0.0001543
          },
          "OwnDuration": {
            "Ticks": 92899,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 9,
            "Microseconds": 289,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.0752199074074075E-07,
            "TotalHours": 2.580527777777778E-06,
            "TotalMilliseconds": 9.2899,
            "TotalMicroseconds": 9289.9,
            "TotalNanoseconds": 9289900.0,
            "TotalMinutes": 0.00015483166666666666,
            "TotalSeconds": 0.0092899
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "753bb846-8f41-4d7f-b982-baae5c84b446",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 361,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 386,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.8971175-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 2877,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 287,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.3298611111111113E-09,
          "TotalHours": 7.991666666666667E-08,
          "TotalMilliseconds": 0.2877,
          "TotalMicroseconds": 287.7,
          "TotalNanoseconds": 287700.0,
          "TotalMinutes": 4.795E-06,
          "TotalSeconds": 0.0002877
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should cache and retrieve responses",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Response Cache",
          "Should cache and retrieve responses"
        ],
        "Data": null,
        "ExpandedName": "Should cache and retrieve responses",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should cache and retrieve responses",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 3451,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 345,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.9942129629629626E-09,
          "TotalHours": 9.586111111111111E-08,
          "TotalMilliseconds": 0.3451,
          "TotalMicroseconds": 345.1,
          "TotalNanoseconds": 345100.0,
          "TotalMinutes": 5.751666666666667E-06,
          "TotalSeconds": 0.0003451
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }",
            "Type": 19,
            "Start": 17662,
            "Length": 485,
            "StartLine": 406,
            "StartColumn": 116,
            "EndLine": 416,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "853afd47-ebce-4d21-94e7-b8f0d51eb91e",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Response Cache",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Response Cache"
          ],
          "Data": null,
          "ExpandedName": "Response Cache",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
          "Blocks": [],
          "Tests": [
            "[!] Should cache and retrieve responses",
            "[!] Should handle TTL expiration",
            "[!] Should provide cache statistics"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 155598,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 15,
            "Microseconds": 559,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.8009027777777778E-07,
            "TotalHours": 4.3221666666666665E-06,
            "TotalMilliseconds": 15.5598,
            "TotalMicroseconds": 15559.8,
            "TotalNanoseconds": 15559800.0,
            "TotalMinutes": 0.00025933,
            "TotalSeconds": 0.0155598
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0646703",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.8907373-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0634426",
            "UserDuration": "00:00:00.0012277",
            "OwnDuration": "00:00:00.0341818",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 294,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "c7756b02-04fb-4129-a78f-402598c5972a",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should cache and retrieve responses",
            "[!] Should handle TTL expiration",
            "[!] Should provide cache statistics"
          ],
          "Passed": true,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.9013551-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 152802,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 15,
            "Microseconds": 280,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.7685416666666667E-07,
            "TotalHours": 4.2445E-06,
            "TotalMilliseconds": 15.2802,
            "TotalMicroseconds": 15280.2,
            "TotalNanoseconds": 15280200.0,
            "TotalMinutes": 0.00025467,
            "TotalSeconds": 0.0152802
          },
          "UserDuration": {
            "Ticks": 2796,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 279,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.2361111111111113E-09,
            "TotalHours": 7.766666666666666E-08,
            "TotalMilliseconds": 0.2796,
            "TotalMicroseconds": 279.6,
            "TotalNanoseconds": 279600.0,
            "TotalMinutes": 4.66E-06,
            "TotalSeconds": 0.0002796
          },
          "OwnDuration": {
            "Ticks": 146565,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 14,
            "Microseconds": 656,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.6963541666666667E-07,
            "TotalHours": 4.07125E-06,
            "TotalMilliseconds": 14.6565,
            "TotalMicroseconds": 14656.5,
            "TotalNanoseconds": 14656500.0,
            "TotalMinutes": 0.000244275,
            "TotalSeconds": 0.0146565
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "45be4aeb-8d9e-4522-bb67-d8869ca5a8c5",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 399,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 406,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.9019804-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 3451,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 345,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.9942129629629626E-09,
          "TotalHours": 9.586111111111111E-08,
          "TotalMilliseconds": 0.3451,
          "TotalMicroseconds": 345.1,
          "TotalNanoseconds": 345100.0,
          "TotalMinutes": 5.751666666666667E-06,
          "TotalSeconds": 0.0003451
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should handle TTL expiration",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Response Cache",
          "Should handle TTL expiration"
        ],
        "Data": null,
        "ExpandedName": "Should handle TTL expiration",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should handle TTL expiration",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 2803,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 280,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.244212962962963E-09,
          "TotalHours": 7.786111111111111E-08,
          "TotalMilliseconds": 0.2803,
          "TotalMicroseconds": 280.3,
          "TotalNanoseconds": 280300.0,
          "TotalMinutes": 4.671666666666666E-06,
          "TotalSeconds": 0.0002803
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }",
            "Type": 19,
            "Start": 18271,
            "Length": 522,
            "StartLine": 418,
            "StartColumn": 109,
            "EndLine": 429,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "f0a2c7f6-c11a-45a1-93b3-732f86320a9a",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Response Cache",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Response Cache"
          ],
          "Data": null,
          "ExpandedName": "Response Cache",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
          "Blocks": [],
          "Tests": [
            "[!] Should cache and retrieve responses",
            "[!] Should handle TTL expiration",
            "[!] Should provide cache statistics"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 155598,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 15,
            "Microseconds": 559,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.8009027777777778E-07,
            "TotalHours": 4.3221666666666665E-06,
            "TotalMilliseconds": 15.5598,
            "TotalMicroseconds": 15559.8,
            "TotalNanoseconds": 15559800.0,
            "TotalMinutes": 0.00025933,
            "TotalSeconds": 0.0155598
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0646703",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.8907373-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0634426",
            "UserDuration": "00:00:00.0012277",
            "OwnDuration": "00:00:00.0341818",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 294,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "c7756b02-04fb-4129-a78f-402598c5972a",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should cache and retrieve responses",
            "[!] Should handle TTL expiration",
            "[!] Should provide cache statistics"
          ],
          "Passed": true,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.9013551-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 152802,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 15,
            "Microseconds": 280,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.7685416666666667E-07,
            "TotalHours": 4.2445E-06,
            "TotalMilliseconds": 15.2802,
            "TotalMicroseconds": 15280.2,
            "TotalNanoseconds": 15280200.0,
            "TotalMinutes": 0.00025467,
            "TotalSeconds": 0.0152802
          },
          "UserDuration": {
            "Ticks": 2796,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 279,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.2361111111111113E-09,
            "TotalHours": 7.766666666666666E-08,
            "TotalMilliseconds": 0.2796,
            "TotalMicroseconds": 279.6,
            "TotalNanoseconds": 279600.0,
            "TotalMinutes": 4.66E-06,
            "TotalSeconds": 0.0002796
          },
          "OwnDuration": {
            "Ticks": 146565,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 14,
            "Microseconds": 656,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.6963541666666667E-07,
            "TotalHours": 4.07125E-06,
            "TotalMilliseconds": 14.6565,
            "TotalMicroseconds": 14656.5,
            "TotalNanoseconds": 14656500.0,
            "TotalMinutes": 0.000244275,
            "TotalSeconds": 0.0146565
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "45be4aeb-8d9e-4522-bb67-d8869ca5a8c5",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 399,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 418,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.902338-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 2803,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 280,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.244212962962963E-09,
          "TotalHours": 7.786111111111111E-08,
          "TotalMilliseconds": 0.2803,
          "TotalMicroseconds": 280.3,
          "TotalNanoseconds": 280300.0,
          "TotalMinutes": 4.671666666666666E-06,
          "TotalSeconds": 0.0002803
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should provide cache statistics",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Response Cache",
          "Should provide cache statistics"
        ],
        "Data": null,
        "ExpandedName": "Should provide cache statistics",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should provide cache statistics",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 2779,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 277,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.216435185185185E-09,
          "TotalHours": 7.719444444444444E-08,
          "TotalMilliseconds": 0.2779,
          "TotalMicroseconds": 277.9,
          "TotalNanoseconds": 277900.0,
          "TotalMinutes": 4.631666666666667E-06,
          "TotalSeconds": 0.0002779
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }",
            "Type": 19,
            "Start": 18920,
            "Length": 402,
            "StartLine": 431,
            "StartColumn": 112,
            "EndLine": 439,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "8a97994d-be1a-4e6b-95b3-dc4b822d016e",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Response Cache",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Response Cache"
          ],
          "Data": null,
          "ExpandedName": "Response Cache",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
          "Blocks": [],
          "Tests": [
            "[!] Should cache and retrieve responses",
            "[!] Should handle TTL expiration",
            "[!] Should provide cache statistics"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 155598,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 15,
            "Microseconds": 559,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.8009027777777778E-07,
            "TotalHours": 4.3221666666666665E-06,
            "TotalMilliseconds": 15.5598,
            "TotalMicroseconds": 15559.8,
            "TotalNanoseconds": 15559800.0,
            "TotalMinutes": 0.00025933,
            "TotalSeconds": 0.0155598
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 9,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:00.0646703",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [!] Prompt Templates [!] Response Cache",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.8907373-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0634426",
            "UserDuration": "00:00:00.0012277",
            "OwnDuration": "00:00:00.0341818",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                    $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:LLMModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 294,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "c7756b02-04fb-4129-a78f-402598c5972a",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should cache and retrieve responses",
            "[!] Should handle TTL expiration",
            "[!] Should provide cache statistics"
          ],
          "Passed": true,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.9013551-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 152802,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 15,
            "Microseconds": 280,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.7685416666666667E-07,
            "TotalHours": 4.2445E-06,
            "TotalMilliseconds": 15.2802,
            "TotalMicroseconds": 15280.2,
            "TotalNanoseconds": 15280200.0,
            "TotalMinutes": 0.00025467,
            "TotalSeconds": 0.0152802
          },
          "UserDuration": {
            "Ticks": 2796,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 279,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.2361111111111113E-09,
            "TotalHours": 7.766666666666666E-08,
            "TotalMilliseconds": 0.2796,
            "TotalMicroseconds": 279.6,
            "TotalNanoseconds": 279600.0,
            "TotalMinutes": 4.66E-06,
            "TotalSeconds": 0.0002796
          },
          "OwnDuration": {
            "Ticks": 146565,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 14,
            "Microseconds": 656,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.6963541666666667E-07,
            "TotalHours": 4.07125E-06,
            "TotalMilliseconds": 14.6565,
            "TotalMicroseconds": 14656.5,
            "TotalNanoseconds": 14656500.0,
            "TotalMinutes": 0.000244275,
            "TotalSeconds": 0.0146565
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "45be4aeb-8d9e-4522-bb67-d8869ca5a8c5",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 399,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 431,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.9026328-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 2779,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 277,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.216435185185185E-09,
          "TotalHours": 7.719444444444444E-08,
          "TotalMilliseconds": 0.2779,
          "TotalMicroseconds": 277.9,
          "TotalNanoseconds": 277900.0,
          "TotalMinutes": 4.631666666666667E-06,
          "TotalSeconds": 0.0002779
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate PowerShell documentation templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should generate PowerShell documentation templates"
        ],
        "Data": null,
        "ExpandedName": "Should generate PowerShell documentation templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate PowerShell documentation templates",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 3256,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 325,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.7685185185185184E-09,
          "TotalHours": 9.044444444444444E-08,
          "TotalMilliseconds": 0.3256,
          "TotalMicroseconds": 325.6,
          "TotalNanoseconds": 325600.0,
          "TotalMinutes": 5.426666666666667E-06,
          "TotalSeconds": 0.0003256
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 21413,
            "Length": 523,
            "StartLine": 481,
            "StartColumn": 140,
            "EndLine": 489,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "1949011d-8dae-4a9b-a847-80a743c8c042",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 5,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 274423,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 27,
            "Microseconds": 442,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.1761921296296297E-07,
            "TotalHours": 7.622861111111111E-06,
            "TotalMilliseconds": 27.4423,
            "TotalMicroseconds": 27442.3,
            "TotalNanoseconds": 27442300.0,
            "TotalMinutes": 0.0004573716666666667,
            "TotalSeconds": 0.0274423
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[!] Language-Specific Templates [!] Automation Triggers",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.1023904",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Language-Specific Templates [!] Automation Triggers",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.9107542-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1007996",
            "UserDuration": "00:00:00.0015908",
            "OwnDuration": "00:00:00.0423986",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 447,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "93b62536-2f82-46b4-b33a-8bb5e8bddb2b",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.9114131-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 273173,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 27,
            "Microseconds": 317,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.161724537037037E-07,
            "TotalHours": 7.588138888888889E-06,
            "TotalMilliseconds": 27.3173,
            "TotalMicroseconds": 27317.3,
            "TotalNanoseconds": 27317300.0,
            "TotalMinutes": 0.00045528833333333336,
            "TotalSeconds": 0.0273173
          },
          "UserDuration": {
            "Ticks": 1250,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 125,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4467592592592592E-09,
            "TotalHours": 3.472222222222222E-08,
            "TotalMilliseconds": 0.125,
            "TotalMicroseconds": 125.0,
            "TotalNanoseconds": 125000.0,
            "TotalMinutes": 2.0833333333333334E-06,
            "TotalSeconds": 0.000125
          },
          "OwnDuration": {
            "Ticks": 252278,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 25,
            "Microseconds": 227,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.9198842592592593E-07,
            "TotalHours": 7.007722222222222E-06,
            "TotalMilliseconds": 25.2278,
            "TotalMicroseconds": 25227.8,
            "TotalNanoseconds": 25227800.0,
            "TotalMinutes": 0.0004204633333333333,
            "TotalSeconds": 0.0252278
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "cff18660-0208-46ad-aad2-9570d54eb8e1",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 474,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 5,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 481,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.9325383-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 3256,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 325,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.7685185185185184E-09,
          "TotalHours": 9.044444444444444E-08,
          "TotalMilliseconds": 0.3256,
          "TotalMicroseconds": 325.6,
          "TotalNanoseconds": 325600.0,
          "TotalMinutes": 5.426666666666667E-06,
          "TotalSeconds": 0.0003256
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate Python documentation templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should generate Python documentation templates"
        ],
        "Data": null,
        "ExpandedName": "Should generate Python documentation templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate Python documentation templates",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 5679,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 567,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.572916666666666E-09,
          "TotalHours": 1.5775E-07,
          "TotalMilliseconds": 0.5679,
          "TotalMicroseconds": 567.9,
          "TotalNanoseconds": 567900.0,
          "TotalMinutes": 9.465E-06,
          "TotalSeconds": 0.0005679
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 22087,
            "Length": 508,
            "StartLine": 491,
            "StartColumn": 136,
            "EndLine": 499,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "36e47e3c-cf5e-45db-b42c-f6d1776fa3e5",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 5,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 274423,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 27,
            "Microseconds": 442,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.1761921296296297E-07,
            "TotalHours": 7.622861111111111E-06,
            "TotalMilliseconds": 27.4423,
            "TotalMicroseconds": 27442.3,
            "TotalNanoseconds": 27442300.0,
            "TotalMinutes": 0.0004573716666666667,
            "TotalSeconds": 0.0274423
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[!] Language-Specific Templates [!] Automation Triggers",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.1023904",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Language-Specific Templates [!] Automation Triggers",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.9107542-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1007996",
            "UserDuration": "00:00:00.0015908",
            "OwnDuration": "00:00:00.0423986",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 447,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "93b62536-2f82-46b4-b33a-8bb5e8bddb2b",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.9114131-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 273173,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 27,
            "Microseconds": 317,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.161724537037037E-07,
            "TotalHours": 7.588138888888889E-06,
            "TotalMilliseconds": 27.3173,
            "TotalMicroseconds": 27317.3,
            "TotalNanoseconds": 27317300.0,
            "TotalMinutes": 0.00045528833333333336,
            "TotalSeconds": 0.0273173
          },
          "UserDuration": {
            "Ticks": 1250,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 125,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4467592592592592E-09,
            "TotalHours": 3.472222222222222E-08,
            "TotalMilliseconds": 0.125,
            "TotalMicroseconds": 125.0,
            "TotalNanoseconds": 125000.0,
            "TotalMinutes": 2.0833333333333334E-06,
            "TotalSeconds": 0.000125
          },
          "OwnDuration": {
            "Ticks": 252278,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 25,
            "Microseconds": 227,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.9198842592592593E-07,
            "TotalHours": 7.007722222222222E-06,
            "TotalMilliseconds": 25.2278,
            "TotalMicroseconds": 25227.8,
            "TotalNanoseconds": 25227800.0,
            "TotalMinutes": 0.0004204633333333333,
            "TotalSeconds": 0.0252278
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "cff18660-0208-46ad-aad2-9570d54eb8e1",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 474,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 5,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 491,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.9329179-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 5679,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 567,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.572916666666666E-09,
          "TotalHours": 1.5775E-07,
          "TotalMilliseconds": 0.5679,
          "TotalMicroseconds": 567.9,
          "TotalNanoseconds": 567900.0,
          "TotalMinutes": 9.465E-06,
          "TotalSeconds": 0.0005679
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate C# documentation templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should generate C# documentation templates"
        ],
        "Data": null,
        "ExpandedName": "Should generate C# documentation templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate C# documentation templates",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 4797,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 479,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.552083333333333E-09,
          "TotalHours": 1.3325E-07,
          "TotalMilliseconds": 0.4797,
          "TotalMicroseconds": 479.7,
          "TotalNanoseconds": 479700.0,
          "TotalMinutes": 7.995E-06,
          "TotalSeconds": 0.0004797
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }",
            "Type": 19,
            "Start": 22742,
            "Length": 523,
            "StartLine": 501,
            "StartColumn": 132,
            "EndLine": 509,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "99ae934f-9726-4a9e-b54d-ca22a601a3a4",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 5,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 274423,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 27,
            "Microseconds": 442,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.1761921296296297E-07,
            "TotalHours": 7.622861111111111E-06,
            "TotalMilliseconds": 27.4423,
            "TotalMicroseconds": 27442.3,
            "TotalNanoseconds": 27442300.0,
            "TotalMinutes": 0.0004573716666666667,
            "TotalSeconds": 0.0274423
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[!] Language-Specific Templates [!] Automation Triggers",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.1023904",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Language-Specific Templates [!] Automation Triggers",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.9107542-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1007996",
            "UserDuration": "00:00:00.0015908",
            "OwnDuration": "00:00:00.0423986",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 447,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "93b62536-2f82-46b4-b33a-8bb5e8bddb2b",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.9114131-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 273173,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 27,
            "Microseconds": 317,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.161724537037037E-07,
            "TotalHours": 7.588138888888889E-06,
            "TotalMilliseconds": 27.3173,
            "TotalMicroseconds": 27317.3,
            "TotalNanoseconds": 27317300.0,
            "TotalMinutes": 0.00045528833333333336,
            "TotalSeconds": 0.0273173
          },
          "UserDuration": {
            "Ticks": 1250,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 125,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4467592592592592E-09,
            "TotalHours": 3.472222222222222E-08,
            "TotalMilliseconds": 0.125,
            "TotalMicroseconds": 125.0,
            "TotalNanoseconds": 125000.0,
            "TotalMinutes": 2.0833333333333334E-06,
            "TotalSeconds": 0.000125
          },
          "OwnDuration": {
            "Ticks": 252278,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 25,
            "Microseconds": 227,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.9198842592592593E-07,
            "TotalHours": 7.007722222222222E-06,
            "TotalMilliseconds": 25.2278,
            "TotalMicroseconds": 25227.8,
            "TotalNanoseconds": 25227800.0,
            "TotalMinutes": 0.0004204633333333333,
            "TotalSeconds": 0.0252278
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "cff18660-0208-46ad-aad2-9570d54eb8e1",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 474,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 5,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 501,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.933526-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 4797,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 479,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.552083333333333E-09,
          "TotalHours": 1.3325E-07,
          "TotalMilliseconds": 0.4797,
          "TotalMicroseconds": 479.7,
          "TotalNanoseconds": 479700.0,
          "TotalMinutes": 7.995E-06,
          "TotalSeconds": 0.0004797
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate JavaScript documentation templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should generate JavaScript documentation templates"
        ],
        "Data": null,
        "ExpandedName": "Should generate JavaScript documentation templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate JavaScript documentation templates",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 5942,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 594,
          "Nanoseconds": 200,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.877314814814815E-09,
          "TotalHours": 1.6505555555555556E-07,
          "TotalMilliseconds": 0.5942,
          "TotalMicroseconds": 594.2,
          "TotalNanoseconds": 594200.0,
          "TotalMinutes": 9.903333333333334E-06,
          "TotalSeconds": 0.0005942
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 23420,
            "Length": 568,
            "StartLine": 511,
            "StartColumn": 140,
            "EndLine": 520,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "ccdf2200-fc27-49bb-80d9-a857da117d63",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 5,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 274423,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 27,
            "Microseconds": 442,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.1761921296296297E-07,
            "TotalHours": 7.622861111111111E-06,
            "TotalMilliseconds": 27.4423,
            "TotalMicroseconds": 27442.3,
            "TotalNanoseconds": 27442300.0,
            "TotalMinutes": 0.0004573716666666667,
            "TotalSeconds": 0.0274423
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[!] Language-Specific Templates [!] Automation Triggers",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.1023904",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Language-Specific Templates [!] Automation Triggers",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.9107542-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1007996",
            "UserDuration": "00:00:00.0015908",
            "OwnDuration": "00:00:00.0423986",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 447,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "93b62536-2f82-46b4-b33a-8bb5e8bddb2b",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.9114131-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 273173,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 27,
            "Microseconds": 317,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.161724537037037E-07,
            "TotalHours": 7.588138888888889E-06,
            "TotalMilliseconds": 27.3173,
            "TotalMicroseconds": 27317.3,
            "TotalNanoseconds": 27317300.0,
            "TotalMinutes": 0.00045528833333333336,
            "TotalSeconds": 0.0273173
          },
          "UserDuration": {
            "Ticks": 1250,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 125,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4467592592592592E-09,
            "TotalHours": 3.472222222222222E-08,
            "TotalMilliseconds": 0.125,
            "TotalMicroseconds": 125.0,
            "TotalNanoseconds": 125000.0,
            "TotalMinutes": 2.0833333333333334E-06,
            "TotalSeconds": 0.000125
          },
          "OwnDuration": {
            "Ticks": 252278,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 25,
            "Microseconds": 227,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.9198842592592593E-07,
            "TotalHours": 7.007722222222222E-06,
            "TotalMilliseconds": 25.2278,
            "TotalMicroseconds": 25227.8,
            "TotalNanoseconds": 25227800.0,
            "TotalMinutes": 0.0004204633333333333,
            "TotalSeconds": 0.0252278
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "cff18660-0208-46ad-aad2-9570d54eb8e1",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 474,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 5,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 511,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.9339901-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 5942,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 594,
          "Nanoseconds": 200,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.877314814814815E-09,
          "TotalHours": 1.6505555555555556E-07,
          "TotalMilliseconds": 0.5942,
          "TotalMicroseconds": 594.2,
          "TotalNanoseconds": 594200.0,
          "TotalMinutes": 9.903333333333334E-06,
          "TotalSeconds": 0.0005942
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should detect language from file extensions",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should detect language from file extensions"
        ],
        "Data": null,
        "ExpandedName": "Should detect language from file extensions",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should detect language from file extensions",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 2471,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 247,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.859953703703704E-09,
          "TotalHours": 6.863888888888888E-08,
          "TotalMilliseconds": 0.2471,
          "TotalMicroseconds": 247.1,
          "TotalNanoseconds": 247100.0,
          "TotalMinutes": 4.1183333333333334E-06,
          "TotalSeconds": 0.0002471
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 24136,
            "Length": 581,
            "StartLine": 522,
            "StartColumn": 133,
            "EndLine": 530,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "4bf769e4-6a04-4b26-9670-d6ea2c893168",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 5,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 274423,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 27,
            "Microseconds": 442,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.1761921296296297E-07,
            "TotalHours": 7.622861111111111E-06,
            "TotalMilliseconds": 27.4423,
            "TotalMicroseconds": 27442.3,
            "TotalNanoseconds": 27442300.0,
            "TotalMinutes": 0.0004573716666666667,
            "TotalSeconds": 0.0274423
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[!] Language-Specific Templates [!] Automation Triggers",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.1023904",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Language-Specific Templates [!] Automation Triggers",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.9107542-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1007996",
            "UserDuration": "00:00:00.0015908",
            "OwnDuration": "00:00:00.0423986",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 447,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "93b62536-2f82-46b4-b33a-8bb5e8bddb2b",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should generate PowerShell documentation templates",
            "[!] Should generate Python documentation templates",
            "[!] Should generate C# documentation templates",
            "[!] Should generate JavaScript documentation templates",
            "[!] Should detect language from file extensions"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.9114131-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 273173,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 27,
            "Microseconds": 317,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.161724537037037E-07,
            "TotalHours": 7.588138888888889E-06,
            "TotalMilliseconds": 27.3173,
            "TotalMicroseconds": 27317.3,
            "TotalNanoseconds": 27317300.0,
            "TotalMinutes": 0.00045528833333333336,
            "TotalSeconds": 0.0273173
          },
          "UserDuration": {
            "Ticks": 1250,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 125,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4467592592592592E-09,
            "TotalHours": 3.472222222222222E-08,
            "TotalMilliseconds": 0.125,
            "TotalMicroseconds": 125.0,
            "TotalNanoseconds": 125000.0,
            "TotalMinutes": 2.0833333333333334E-06,
            "TotalSeconds": 0.000125
          },
          "OwnDuration": {
            "Ticks": 252278,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 25,
            "Microseconds": 227,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.9198842592592593E-07,
            "TotalHours": 7.007722222222222E-06,
            "TotalMilliseconds": 25.2278,
            "TotalMicroseconds": 25227.8,
            "TotalNanoseconds": 25227800.0,
            "TotalMinutes": 0.0004204633333333333,
            "TotalSeconds": 0.0252278
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "cff18660-0208-46ad-aad2-9570d54eb8e1",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 474,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 5,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 522,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.9345961-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 2471,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 247,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.859953703703704E-09,
          "TotalHours": 6.863888888888888E-08,
          "TotalMilliseconds": 0.2471,
          "TotalMicroseconds": 247.1,
          "TotalNanoseconds": 247100.0,
          "TotalMinutes": 4.1183333333333334E-06,
          "TotalSeconds": 0.0002471
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should initialize documentation triggers",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Automation Triggers",
          "Should initialize documentation triggers"
        ],
        "Data": null,
        "ExpandedName": "Should initialize documentation triggers",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should initialize documentation triggers",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 2711,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 271,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.1377314814814814E-09,
          "TotalHours": 7.530555555555556E-08,
          "TotalMilliseconds": 0.2711,
          "TotalMicroseconds": 271.1,
          "TotalNanoseconds": 271100.0,
          "TotalMinutes": 4.518333333333333E-06,
          "TotalSeconds": 0.0002711
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }",
            "Type": 19,
            "Start": 25170,
            "Length": 235,
            "StartLine": 540,
            "StartColumn": 131,
            "EndLine": 545,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "7d71c8fb-5e1a-4606-9019-4a4b9850834f",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Automation Triggers",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Automation Triggers"
          ],
          "Data": null,
          "ExpandedName": "Automation Triggers",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers",
          "Blocks": [],
          "Tests": [
            "[!] Should initialize documentation triggers",
            "[!] Should log trigger activity"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 2,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 325495,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 32,
            "Microseconds": 549,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.7673032407407406E-07,
            "TotalHours": 9.041527777777777E-06,
            "TotalMilliseconds": 32.5495,
            "TotalMicroseconds": 32549.5,
            "TotalNanoseconds": 32549500.0,
            "TotalMinutes": 0.0005424916666666666,
            "TotalSeconds": 0.0325495
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[!] Language-Specific Templates [!] Automation Triggers",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.1023904",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Language-Specific Templates [!] Automation Triggers",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.9107542-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1007996",
            "UserDuration": "00:00:00.0015908",
            "OwnDuration": "00:00:00.0423986",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 447,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "f04c3b1b-8be7-4fc8-8d69-6f226adee3d4",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should initialize documentation triggers",
            "[!] Should log trigger activity"
          ],
          "Passed": true,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.9388547-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 323141,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 32,
            "Microseconds": 314,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.7400578703703706E-07,
            "TotalHours": 8.976138888888888E-06,
            "TotalMilliseconds": 32.3141,
            "TotalMicroseconds": 32314.1,
            "TotalNanoseconds": 32314100.0,
            "TotalMinutes": 0.0005385683333333334,
            "TotalSeconds": 0.0323141
          },
          "UserDuration": {
            "Ticks": 2354,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 235,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.7245370370370372E-09,
            "TotalHours": 6.538888888888889E-08,
            "TotalMilliseconds": 0.2354,
            "TotalMicroseconds": 235.4,
            "TotalNanoseconds": 235400.0,
            "TotalMinutes": 3.923333333333334E-06,
            "TotalSeconds": 0.0002354
          },
          "OwnDuration": {
            "Ticks": 320722,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 32,
            "Microseconds": 72,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.7120601851851853E-07,
            "TotalHours": 8.908944444444444E-06,
            "TotalMilliseconds": 32.0722,
            "TotalMicroseconds": 32072.2,
            "TotalNanoseconds": 32072200.0,
            "TotalMinutes": 0.0005345366666666667,
            "TotalSeconds": 0.0320722
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "d2975bec-81a3-4b18-84b2-681a69947a09",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 533,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 2,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 540,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.939489-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 2711,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 271,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.1377314814814814E-09,
          "TotalHours": 7.530555555555556E-08,
          "TotalMilliseconds": 0.2711,
          "TotalMicroseconds": 271.1,
          "TotalNanoseconds": 271100.0,
          "TotalMinutes": 4.518333333333333E-06,
          "TotalSeconds": 0.0002711
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should log trigger activity",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Automation Triggers",
          "Should log trigger activity"
        ],
        "Data": null,
        "ExpandedName": "Should log trigger activity",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should log trigger activity",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 2062,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 206,
          "Nanoseconds": 200,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.386574074074074E-09,
          "TotalHours": 5.727777777777778E-08,
          "TotalMilliseconds": 0.2062,
          "TotalMicroseconds": 206.2,
          "TotalNanoseconds": 206200.0,
          "TotalMinutes": 3.4366666666666667E-06,
          "TotalSeconds": 0.0002062
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }",
            "Type": 19,
            "Start": 25538,
            "Length": 710,
            "StartLine": 547,
            "StartColumn": 118,
            "EndLine": 562,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "87650fef-6b25-4009-af5d-a8f6d9969548",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Automation Triggers",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Automation Triggers"
          ],
          "Data": null,
          "ExpandedName": "Automation Triggers",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers",
          "Blocks": [],
          "Tests": [
            "[!] Should initialize documentation triggers",
            "[!] Should log trigger activity"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 2,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 325495,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 32,
            "Microseconds": 549,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.7673032407407406E-07,
            "TotalHours": 9.041527777777777E-06,
            "TotalMilliseconds": 32.5495,
            "TotalMicroseconds": 32549.5,
            "TotalNanoseconds": 32549500.0,
            "TotalMinutes": 0.0005424916666666666,
            "TotalSeconds": 0.0325495
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[!] Language-Specific Templates [!] Automation Triggers",
            "Tests": "",
            "Result": "Skipped",
            "FailedCount": 0,
            "PassedCount": 0,
            "SkippedCount": 7,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:00.1023904",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Language-Specific Templates [!] Automation Triggers",
            "Passed": true,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.9107542-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1007996",
            "UserDuration": "00:00:00.0015908",
            "OwnDuration": "00:00:00.0423986",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                    $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                    Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    $script:TemplateModulesAvailable[$moduleName] = $false\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 447,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "f04c3b1b-8be7-4fc8-8d69-6f226adee3d4",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should initialize documentation triggers",
            "[!] Should log trigger activity"
          ],
          "Passed": true,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.9388547-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 323141,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 32,
            "Microseconds": 314,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.7400578703703706E-07,
            "TotalHours": 8.976138888888888E-06,
            "TotalMilliseconds": 32.3141,
            "TotalMicroseconds": 32314.1,
            "TotalNanoseconds": 32314100.0,
            "TotalMinutes": 0.0005385683333333334,
            "TotalSeconds": 0.0323141
          },
          "UserDuration": {
            "Ticks": 2354,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 235,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.7245370370370372E-09,
            "TotalHours": 6.538888888888889E-08,
            "TotalMilliseconds": 0.2354,
            "TotalMicroseconds": 235.4,
            "TotalNanoseconds": 235400.0,
            "TotalMinutes": 3.923333333333334E-06,
            "TotalSeconds": 0.0002354
          },
          "OwnDuration": {
            "Ticks": 320722,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 32,
            "Microseconds": 72,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.7120601851851853E-07,
            "TotalHours": 8.908944444444444E-06,
            "TotalMilliseconds": 32.0722,
            "TotalMicroseconds": 32072.2,
            "TotalNanoseconds": 32072200.0,
            "TotalMinutes": 0.0005345366666666667,
            "TotalSeconds": 0.0320722
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "d2975bec-81a3-4b18-84b2-681a69947a09",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 533,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 2,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 547,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.9397706-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 2062,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 206,
          "Nanoseconds": 200,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.386574074074074E-09,
          "TotalHours": 5.727777777777778E-08,
          "TotalMilliseconds": 0.2062,
          "TotalMicroseconds": 206.2,
          "TotalNanoseconds": 206200.0,
          "TotalMinutes": 3.4366666666666667E-06,
          "TotalSeconds": 0.0002062
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should meet cache performance benchmarks",
        "Path": [
          "Enhanced Documentation System - Performance",
          "Cache Performance",
          "Should meet cache performance benchmarks"
        ],
        "Data": null,
        "ExpandedName": "Should meet cache performance benchmarks",
        "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should meet cache performance benchmarks",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 3386,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 338,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.918981481481482E-09,
          "TotalHours": 9.405555555555556E-08,
          "TotalMilliseconds": 0.3386,
          "TotalMicroseconds": 338.6,
          "TotalNanoseconds": 338600.0,
          "TotalMinutes": 5.643333333333333E-06,
          "TotalSeconds": 0.0003386
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }",
            "Type": 19,
            "Start": 29122,
            "Length": 1022,
            "StartLine": 617,
            "StartColumn": 122,
            "EndLine": 639,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "489151f6-c0c3-42e6-b415-3af7afdb4b1c",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Cache Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "Cache Performance"
          ],
          "Data": null,
          "ExpandedName": "Cache Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance",
          "Blocks": [],
          "Tests": [
            "[!] Should meet cache performance benchmarks",
            "[!] Should handle cache warming efficiently"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 2,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 51028,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 102,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.906018518518518E-08,
            "TotalHours": 1.4174444444444444E-06,
            "TotalMilliseconds": 5.1028,
            "TotalMicroseconds": 5102.8,
            "TotalNanoseconds": 5102800.0,
            "TotalMinutes": 8.504666666666667E-05,
            "TotalSeconds": 0.0051028
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Tests": "",
            "Result": "Passed",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 4,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:00.2420494",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Passed": true,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.9484705-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1235608",
            "UserDuration": "00:00:00.1184886",
            "OwnDuration": "00:00:00.0923743",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                    Set-ItResult -Skipped -Because \"ParallelProcessing module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 570,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "adf451ed-f70f-457d-8bfd-2d81f0526dcf",
            "Ast": "{\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should meet cache performance benchmarks",
            "[!] Should handle cache warming efficiently"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.9959537-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 50257,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 25,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.8167824074074075E-08,
            "TotalHours": 1.3960277777777778E-06,
            "TotalMilliseconds": 5.0257,
            "TotalMicroseconds": 5025.7,
            "TotalNanoseconds": 5025700.0,
            "TotalMinutes": 8.376166666666667E-05,
            "TotalSeconds": 0.0050257
          },
          "UserDuration": {
            "Ticks": 771,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 77,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.923611111111111E-10,
            "TotalHours": 2.1416666666666667E-08,
            "TotalMilliseconds": 0.0771,
            "TotalMicroseconds": 77.1,
            "TotalNanoseconds": 77100.0,
            "TotalMinutes": 1.285E-06,
            "TotalSeconds": 7.71E-05
          },
          "OwnDuration": {
            "Ticks": 45562,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 556,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.2733796296296296E-08,
            "TotalHours": 1.2656111111111112E-06,
            "TotalMilliseconds": 4.5562,
            "TotalMicroseconds": 4556.2,
            "TotalNanoseconds": 4556200.0,
            "TotalMinutes": 7.593666666666667E-05,
            "TotalSeconds": 0.0045562
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "6f7197d3-8f3d-4e0d-b63a-525a0d7c6bb6",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 610,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 2,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 617,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.996679-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 3386,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 338,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.918981481481482E-09,
          "TotalHours": 9.405555555555556E-08,
          "TotalMilliseconds": 0.3386,
          "TotalMicroseconds": 338.6,
          "TotalNanoseconds": 338600.0,
          "TotalMinutes": 5.643333333333333E-06,
          "TotalSeconds": 0.0003386
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should handle cache warming efficiently",
        "Path": [
          "Enhanced Documentation System - Performance",
          "Cache Performance",
          "Should handle cache warming efficiently"
        ],
        "Data": null,
        "ExpandedName": "Should handle cache warming efficiently",
        "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should handle cache warming efficiently",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 2080,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 208,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.4074074074074074E-09,
          "TotalHours": 5.7777777777777775E-08,
          "TotalMilliseconds": 0.208,
          "TotalMicroseconds": 208.0,
          "TotalNanoseconds": 208000.0,
          "TotalMinutes": 3.466666666666667E-06,
          "TotalSeconds": 0.000208
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }",
            "Type": 19,
            "Start": 30280,
            "Length": 781,
            "StartLine": 641,
            "StartColumn": 121,
            "EndLine": 654,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "4f03cdd0-b40b-4b18-a120-d084dd3fda27",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Cache Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "Cache Performance"
          ],
          "Data": null,
          "ExpandedName": "Cache Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance",
          "Blocks": [],
          "Tests": [
            "[!] Should meet cache performance benchmarks",
            "[!] Should handle cache warming efficiently"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 2,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 51028,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 102,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.906018518518518E-08,
            "TotalHours": 1.4174444444444444E-06,
            "TotalMilliseconds": 5.1028,
            "TotalMicroseconds": 5102.8,
            "TotalNanoseconds": 5102800.0,
            "TotalMinutes": 8.504666666666667E-05,
            "TotalSeconds": 0.0051028
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Tests": "",
            "Result": "Passed",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 4,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:00.2420494",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Passed": true,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.9484705-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1235608",
            "UserDuration": "00:00:00.1184886",
            "OwnDuration": "00:00:00.0923743",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                    Set-ItResult -Skipped -Because \"ParallelProcessing module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 570,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "adf451ed-f70f-457d-8bfd-2d81f0526dcf",
            "Ast": "{\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should meet cache performance benchmarks",
            "[!] Should handle cache warming efficiently"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:21.9959537-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 50257,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 5,
            "Microseconds": 25,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.8167824074074075E-08,
            "TotalHours": 1.3960277777777778E-06,
            "TotalMilliseconds": 5.0257,
            "TotalMicroseconds": 5025.7,
            "TotalNanoseconds": 5025700.0,
            "TotalMinutes": 8.376166666666667E-05,
            "TotalSeconds": 0.0050257
          },
          "UserDuration": {
            "Ticks": 771,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 77,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.923611111111111E-10,
            "TotalHours": 2.1416666666666667E-08,
            "TotalMilliseconds": 0.0771,
            "TotalMicroseconds": 77.1,
            "TotalNanoseconds": 77100.0,
            "TotalMinutes": 1.285E-06,
            "TotalSeconds": 7.71E-05
          },
          "OwnDuration": {
            "Ticks": 45562,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 4,
            "Microseconds": 556,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.2733796296296296E-08,
            "TotalHours": 1.2656111111111112E-06,
            "TotalMilliseconds": 4.5562,
            "TotalMicroseconds": 4556.2,
            "TotalNanoseconds": 4556200.0,
            "TotalMinutes": 7.593666666666667E-05,
            "TotalSeconds": 0.0045562
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "6f7197d3-8f3d-4e0d-b63a-525a0d7c6bb6",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 610,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 2,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 641,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:21.9970216-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 2080,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 208,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.4074074074074074E-09,
          "TotalHours": 5.7777777777777775E-08,
          "TotalMilliseconds": 0.208,
          "TotalMicroseconds": 208.0,
          "TotalNanoseconds": 208000.0,
          "TotalMinutes": 3.466666666666667E-06,
          "TotalSeconds": 0.000208
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should process files at 100+ files per second",
        "Path": [
          "Enhanced Documentation System - Performance",
          "File Processing Performance",
          "Should process files at 100+ files per second"
        ],
        "Data": null,
        "ExpandedName": "Should process files at 100+ files per second",
        "ExpandedPath": "Enhanced Documentation System - Performance.File Processing Performance.Should process files at 100+ files per second",
        "Result": "Passed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 336167,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 33,
          "Microseconds": 616,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.890821759259259E-07,
          "TotalHours": 9.337972222222222E-06,
          "TotalMilliseconds": 33.6167,
          "TotalMicroseconds": 33616.7,
          "TotalNanoseconds": 33616700.0,
          "TotalMinutes": 0.0005602783333333334,
          "TotalSeconds": 0.0336167
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }",
            "Type": 19,
            "Start": 32406,
            "Length": 1019,
            "StartLine": 690,
            "StartColumn": 64,
            "EndLine": 709,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "af6eba28-5ce5-4418-9768-56a1fbe3c3b2",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }",
            "Parent": "{\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "File Processing Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "File Processing Performance"
          ],
          "Data": null,
          "ExpandedName": "File Processing Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.File Processing Performance",
          "Blocks": [],
          "Tests": [
            "[+] Should process files at 100+ files per second",
            "[!] Should handle incremental updates efficiently"
          ],
          "Result": "Passed",
          "FailedCount": 0,
          "PassedCount": 1,
          "SkippedCount": 1,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 698023,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 69,
            "Microseconds": 802,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.078969907407407E-07,
            "TotalHours": 1.9389527777777777E-05,
            "TotalMilliseconds": 69.8023,
            "TotalMicroseconds": 69802.3,
            "TotalNanoseconds": 69802300.0,
            "TotalMinutes": 0.0011633716666666666,
            "TotalSeconds": 0.0698023
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Tests": "",
            "Result": "Passed",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 4,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:00.2420494",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Passed": true,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.9484705-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1235608",
            "UserDuration": "00:00:00.1184886",
            "OwnDuration": "00:00:00.0923743",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                    Set-ItResult -Skipped -Because \"ParallelProcessing module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 570,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "44a13c71-9201-4e8b-ad0f-647542750043",
            "Ast": "{\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[+] Should process files at 100+ files per second",
            "[!] Should handle incremental updates efficiently"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:22.0010428-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 138677,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 13,
            "Microseconds": 867,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.6050578703703703E-07,
            "TotalHours": 3.852138888888889E-06,
            "TotalMilliseconds": 13.8677,
            "TotalMicroseconds": 13867.7,
            "TotalNanoseconds": 13867700.0,
            "TotalMinutes": 0.00023112833333333333,
            "TotalSeconds": 0.0138677
          },
          "UserDuration": {
            "Ticks": 559346,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 55,
            "Microseconds": 934,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.473912037037037E-07,
            "TotalHours": 1.553738888888889E-05,
            "TotalMilliseconds": 55.9346,
            "TotalMicroseconds": 55934.6,
            "TotalNanoseconds": 55934600.0,
            "TotalMinutes": 0.0009322433333333333,
            "TotalSeconds": 0.0559346
          },
          "OwnDuration": {
            "Ticks": 358845,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 35,
            "Microseconds": 884,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.153298611111111E-07,
            "TotalHours": 9.967916666666667E-06,
            "TotalMilliseconds": 35.8845,
            "TotalMicroseconds": 35884.5,
            "TotalNanoseconds": 35884500.0,
            "TotalMinutes": 0.000598075,
            "TotalSeconds": 0.0358845
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "3923e4a0-33eb-4513-8267-579860157f6e",
            "Ast": "{\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }"
          },
          "StartLine": 657,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 1,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 1,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 690,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:22.0271161-04:00",
        "Passed": true,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 301978,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 30,
          "Microseconds": 197,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.495115740740741E-07,
          "TotalHours": 8.388277777777778E-06,
          "TotalMilliseconds": 30.1978,
          "TotalMicroseconds": 30197.8,
          "TotalNanoseconds": 30197800.0,
          "TotalMinutes": 0.0005032966666666666,
          "TotalSeconds": 0.0301978
        },
        "FrameworkDuration": {
          "Ticks": 34189,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 3,
          "Microseconds": 418,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.957060185185185E-08,
          "TotalHours": 9.496944444444445E-07,
          "TotalMilliseconds": 3.4189,
          "TotalMicroseconds": 3418.9,
          "TotalNanoseconds": 3418900.0,
          "TotalMinutes": 5.6981666666666663E-05,
          "TotalSeconds": 0.0034189
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should handle incremental updates efficiently",
        "Path": [
          "Enhanced Documentation System - Performance",
          "File Processing Performance",
          "Should handle incremental updates efficiently"
        ],
        "Data": null,
        "ExpandedName": "Should handle incremental updates efficiently",
        "ExpandedPath": "Enhanced Documentation System - Performance.File Processing Performance.Should handle incremental updates efficiently",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 3011,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 301,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.4849537037037037E-09,
          "TotalHours": 8.363888888888888E-08,
          "TotalMilliseconds": 0.3011,
          "TotalMicroseconds": 301.1,
          "TotalNanoseconds": 301100.0,
          "TotalMinutes": 5.018333333333333E-06,
          "TotalSeconds": 0.0003011
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }",
            "Type": 19,
            "Start": 33580,
            "Length": 725,
            "StartLine": 711,
            "StartColumn": 140,
            "EndLine": 727,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "22efca94-8fe7-4ab1-8fc9-5b3773d51e35",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }",
            "Parent": "{\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "File Processing Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "File Processing Performance"
          ],
          "Data": null,
          "ExpandedName": "File Processing Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.File Processing Performance",
          "Blocks": [],
          "Tests": [
            "[+] Should process files at 100+ files per second",
            "[!] Should handle incremental updates efficiently"
          ],
          "Result": "Passed",
          "FailedCount": 0,
          "PassedCount": 1,
          "SkippedCount": 1,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 698023,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 69,
            "Microseconds": 802,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.078969907407407E-07,
            "TotalHours": 1.9389527777777777E-05,
            "TotalMilliseconds": 69.8023,
            "TotalMicroseconds": 69802.3,
            "TotalNanoseconds": 69802300.0,
            "TotalMinutes": 0.0011633716666666666,
            "TotalSeconds": 0.0698023
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Tests": "",
            "Result": "Passed",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 4,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:00.2420494",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Passed": true,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.9484705-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1235608",
            "UserDuration": "00:00:00.1184886",
            "OwnDuration": "00:00:00.0923743",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                    Set-ItResult -Skipped -Because \"ParallelProcessing module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 570,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "44a13c71-9201-4e8b-ad0f-647542750043",
            "Ast": "{\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[+] Should process files at 100+ files per second",
            "[!] Should handle incremental updates efficiently"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:22.0010428-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 138677,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 13,
            "Microseconds": 867,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.6050578703703703E-07,
            "TotalHours": 3.852138888888889E-06,
            "TotalMilliseconds": 13.8677,
            "TotalMicroseconds": 13867.7,
            "TotalNanoseconds": 13867700.0,
            "TotalMinutes": 0.00023112833333333333,
            "TotalSeconds": 0.0138677
          },
          "UserDuration": {
            "Ticks": 559346,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 55,
            "Microseconds": 934,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.473912037037037E-07,
            "TotalHours": 1.553738888888889E-05,
            "TotalMilliseconds": 55.9346,
            "TotalMicroseconds": 55934.6,
            "TotalNanoseconds": 55934600.0,
            "TotalMinutes": 0.0009322433333333333,
            "TotalSeconds": 0.0559346
          },
          "OwnDuration": {
            "Ticks": 358845,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 35,
            "Microseconds": 884,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.153298611111111E-07,
            "TotalHours": 9.967916666666667E-06,
            "TotalMilliseconds": 35.8845,
            "TotalMicroseconds": 35884.5,
            "TotalNanoseconds": 35884500.0,
            "TotalMinutes": 0.000598075,
            "TotalSeconds": 0.0358845
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "3923e4a0-33eb-4513-8267-579860157f6e",
            "Ast": "{\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }"
          },
          "StartLine": 657,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 1,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 1,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 711,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:22.0607641-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 3011,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 301,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.4849537037037037E-09,
          "TotalHours": 8.363888888888888E-08,
          "TotalMilliseconds": 0.3011,
          "TotalMicroseconds": 301.1,
          "TotalNanoseconds": 301100.0,
          "TotalMinutes": 5.018333333333333E-06,
          "TotalSeconds": 0.0003011
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should demonstrate parallel processing benefits",
        "Path": [
          "Enhanced Documentation System - Performance",
          "Parallel Processing Performance",
          "Should demonstrate parallel processing benefits"
        ],
        "Data": null,
        "ExpandedName": "Should demonstrate parallel processing benefits",
        "ExpandedPath": "Enhanced Documentation System - Performance.Parallel Processing Performance.Should demonstrate parallel processing benefits",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 2740,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 274,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.1712962962962964E-09,
          "TotalHours": 7.611111111111111E-08,
          "TotalMilliseconds": 0.274,
          "TotalMicroseconds": 274.0,
          "TotalNanoseconds": 274000.0,
          "TotalMinutes": 4.5666666666666664E-06,
          "TotalSeconds": 0.000274
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }",
            "Type": 19,
            "Start": 34757,
            "Length": 1070,
            "StartLine": 737,
            "StartColumn": 130,
            "EndLine": 757,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "ef08972d-8a2c-4047-b401-f53904d39c40",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }",
            "Parent": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Parallel Processing Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "Parallel Processing Performance"
          ],
          "Data": null,
          "ExpandedName": "Parallel Processing Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.Parallel Processing Performance",
          "Blocks": [],
          "Tests": [
            "[!] Should demonstrate parallel processing benefits"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 1,
          "NotRunCount": 0,
          "TotalCount": 1,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 747700,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 74,
            "Microseconds": 770,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.653935185185185E-07,
            "TotalHours": 2.0769444444444444E-05,
            "TotalMilliseconds": 74.77,
            "TotalMicroseconds": 74770.0,
            "TotalNanoseconds": 74770000.0,
            "TotalMinutes": 0.0012461666666666667,
            "TotalSeconds": 0.07477
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 27,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:00.4286614",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Enhanced Documentation System - CPG Components [!] Enhanced Documentation System - LLM Integration [!] Enhanced Documentation System - Templates & Automation [+] Enhanced Documentation System - Performance",
            "Passed": true,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.7909237-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.0775850",
            "FrameworkDuration": "00:00:00.2298624",
            "UserDuration": "00:00:00.1212140",
            "OwnDuration": "-00:00:00.0250934",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Tests": "",
            "Result": "Passed",
            "FailedCount": 0,
            "PassedCount": 1,
            "SkippedCount": 4,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:00.2420494",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Cache Performance [+] File Processing Performance [!] Parallel Processing Performance",
            "Passed": true,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T19:57:21.9484705-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1235608",
            "UserDuration": "00:00:00.1184886",
            "OwnDuration": "00:00:00.0923743",
            "ScriptBlock": "\r\n        \r\n        BeforeAll {\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                    Set-ItResult -Skipped -Because \"Performance-Cache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Performance\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 1000\r\n                    \r\n                    # Benchmark cache operations\r\n                    $operations = 100\r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                    }\r\n                    \r\n                    1..$operations | ForEach-Object {\r\n                        Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                    }\r\n                    \r\n                    $stopwatch.Stop()\r\n                    $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                    \r\n                    # Should complete operations in under 1ms each\r\n                    $avgTimePerOp | Should -BeLessThan 1.0\r\n                }\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Warming\" -ScriptBlock {\r\n                    $cache = New-PerformanceCache -MaxSize 500\r\n                    $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                    \r\n                    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                    Start-CacheWarming -Cache $cache -Data $warmingData\r\n                    $stopwatch.Stop()\r\n                    \r\n                    # Cache warming should complete in under 100ms for 100 items\r\n                    $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                    Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                foreach ($file in $script:TestFiles) {\r\n                    # Simulate file processing (read + basic analysis)\r\n                    $content = Get-Content -Path $file -Raw\r\n                    $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                    $processed++\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    $changes += Detect-FileChange -FilePath $file\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                    Set-ItResult -Skipped -Because \"ParallelProcessing module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 570,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "9011de1c-372c-4635-a0ec-5e88d6b67bb5",
            "Ast": "{\r\n                if (-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                    Set-ItResult -Skipped -Because \"ParallelProcessing module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should demonstrate parallel processing benefits"
          ],
          "Passed": true,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T19:57:22.0657436-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 187363,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 18,
            "Microseconds": 736,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.1685532407407407E-07,
            "TotalHours": 5.204527777777778E-06,
            "TotalMilliseconds": 18.7363,
            "TotalMicroseconds": 18736.3,
            "TotalNanoseconds": 18736300.0,
            "TotalMinutes": 0.0003122716666666667,
            "TotalSeconds": 0.0187363
          },
          "UserDuration": {
            "Ticks": 560337,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 56,
            "Microseconds": 33,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.485381944444444E-07,
            "TotalHours": 1.5564916666666667E-05,
            "TotalMilliseconds": 56.0337,
            "TotalMicroseconds": 56033.7,
            "TotalNanoseconds": 56033700.0,
            "TotalMinutes": 0.000933895,
            "TotalSeconds": 0.0560337
          },
          "OwnDuration": {
            "Ticks": 744960,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 74,
            "Microseconds": 496,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.622222222222222E-07,
            "TotalHours": 2.0693333333333334E-05,
            "TotalMilliseconds": 74.496,
            "TotalMicroseconds": 74496.0,
            "TotalNanoseconds": 74496000.0,
            "TotalMinutes": 0.0012416,
            "TotalSeconds": 0.074496
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "12ca5634-9710-4618-8755-5b913ded8675",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                    Set-ItResult -Skipped -Because \"ParallelProcessing module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }"
          },
          "StartLine": 730,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 1,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 1,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 737,
        "Executed": true,
        "ExecutedAt": "2025-08-28T19:57:22.0663206-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 2740,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 274,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.1712962962962964E-09,
          "TotalHours": 7.611111111111111E-08,
          "TotalMilliseconds": 0.274,
          "TotalMicroseconds": 274.0,
          "TotalNanoseconds": 274000.0,
          "TotalMinutes": 4.5666666666666664E-06,
          "TotalSeconds": 0.000274
        },
        "PluginData": null,
        "FrameworkData": null
      }
    ],
    "CodeCoverage": null
  }
}
