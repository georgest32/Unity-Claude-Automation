{
  "TestResults": {
    "Containers": [
      {
        "Name": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "Type": "File",
        "Item": {
          "Name": "Test-EnhancedDocumentationSystem.ps1",
          "Length": 46988,
          "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
          "Directory": {
            "Name": "Unity-Claude-Automation",
            "Parent": "C:\\UnityProjects\\Sound-and-Shoal",
            "Root": "C:\\",
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Extension": "",
            "CreationTime": "2025-08-16T18:37:14.6080817-04:00",
            "CreationTimeUtc": "2025-08-16T22:37:14.6080817Z",
            "LastAccessTime": "2025-08-28T21:12:21.0045437-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:12:21.0045437Z",
            "LastWriteTime": "2025-08-28T21:11:26.8722739-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8722739Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 16
          },
          "IsReadOnly": false,
          "Exists": true,
          "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "Extension": ".ps1",
          "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
          "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
          "LastAccessTime": "2025-08-28T21:12:03.5268689-04:00",
          "LastAccessTimeUtc": "2025-08-29T01:12:03.5268689Z",
          "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
          "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
          "LinkTarget": null,
          "UnixFileMode": -1,
          "Attributes": 32
        },
        "Data": {},
        "Blocks": [
          {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:00.0725277",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.7654217-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0537485",
            "UserDuration": "00:00:00.0187792",
            "OwnDuration": "00:00:00.0725277",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 290,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 9,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.1704310",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.8379525-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0614595",
            "UserDuration": "00:00:02.1089715",
            "OwnDuration": "00:00:02.1704310",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 480,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[-] Language-Specific Templates [-] Automation Triggers",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.1803866",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Language-Specific Templates [-] Automation Triggers",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:18.9358625-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0696061",
            "UserDuration": "00:00:02.1107805",
            "OwnDuration": "00:00:02.1803866",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    ",
            "StartLine": 639,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 3,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:04.0598124",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Passed": false,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:18.9458204-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1431616",
            "UserDuration": "00:00:03.9166508",
            "OwnDuration": "00:00:01.9589221",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 744,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          }
        ],
        "Result": "Failed",
        "Duration": {
          "Ticks": 43926513,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 392,
          "Microseconds": 651,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 4,
          "TotalDays": 5.0840871527777776E-05,
          "TotalHours": 0.0012201809166666666,
          "TotalMilliseconds": 4392.6513,
          "TotalMicroseconds": 4392651.3,
          "TotalNanoseconds": 4392651300.0,
          "TotalMinutes": 0.073210855,
          "TotalSeconds": 4.3926513
        },
        "FailedCount": 26,
        "PassedCount": 2,
        "SkippedCount": 0,
        "InconclusiveCount": 0,
        "NotRunCount": 0,
        "TotalCount": 28,
        "ErrorRecord": [],
        "Passed": false,
        "OwnPassed": true,
        "Skip": false,
        "ShouldRun": true,
        "Executed": true,
        "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
        "DiscoveryDuration": {
          "Ticks": 1206408,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 120,
          "Microseconds": 640,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.3963055555555556E-06,
          "TotalHours": 3.351133333333333E-05,
          "TotalMilliseconds": 120.6408,
          "TotalMicroseconds": 120640.8,
          "TotalNanoseconds": 120640800.0,
          "TotalMinutes": 0.00201068,
          "TotalSeconds": 0.1206408
        },
        "UserDuration": {
          "Ticks": 39200901,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 920,
          "Microseconds": 90,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 3,
          "TotalDays": 4.537141319444444E-05,
          "TotalHours": 0.0010889139166666666,
          "TotalMilliseconds": 3920.0901,
          "TotalMicroseconds": 3920090.1,
          "TotalNanoseconds": 3920090100.0,
          "TotalMinutes": 0.065334835,
          "TotalSeconds": 3.9200901
        },
        "FrameworkDuration": {
          "Ticks": 3519204,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 351,
          "Microseconds": 920,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.073152777777778E-06,
          "TotalHours": 9.775566666666667E-05,
          "TotalMilliseconds": 351.9204,
          "TotalMicroseconds": 351920.4,
          "TotalNanoseconds": 351920400.0,
          "TotalMinutes": 0.00586534,
          "TotalSeconds": 0.3519204
        },
        "StandardOutput": null
      }
    ],
    "Result": "Failed",
    "FailedCount": 26,
    "FailedBlocksCount": 3,
    "FailedContainersCount": 0,
    "PassedCount": 2,
    "SkippedCount": 0,
    "InconclusiveCount": 0,
    "NotRunCount": 0,
    "TotalCount": 28,
    "Duration": {
      "Ticks": 43926513,
      "Days": 0,
      "Hours": 0,
      "Milliseconds": 392,
      "Microseconds": 651,
      "Nanoseconds": 300,
      "Minutes": 0,
      "Seconds": 4,
      "TotalDays": 5.0840871527777776E-05,
      "TotalHours": 0.0012201809166666666,
      "TotalMilliseconds": 4392.6513,
      "TotalMicroseconds": 4392651.3,
      "TotalNanoseconds": 4392651300.0,
      "TotalMinutes": 0.073210855,
      "TotalSeconds": 4.3926513
    },
    "Executed": true,
    "ExecutedAt": "2025-08-28T21:12:16.4153415-04:00",
    "Version": "5.7.1",
    "PSVersion": "7.5.2",
    "PSBoundParameters": {
      "Configuration": {
        "Run": {
          "Path": {
            "Default": ".",
            "Description": "Directories to be searched for tests, paths directly to test files, or combination of both.",
            "Value": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsModified": true
          },
          "ExcludePath": {
            "Default": "",
            "Description": "Directories or files to be excluded from the run.",
            "Value": "",
            "IsModified": false
          },
          "ScriptBlock": {
            "Default": "",
            "Description": "ScriptBlocks containing tests to be executed.",
            "Value": "",
            "IsModified": false
          },
          "Container": {
            "Default": "",
            "Description": "ContainerInfo objects containing tests to be executed.",
            "Value": "",
            "IsModified": false
          },
          "TestExtension": {
            "Default": ".Tests.ps1",
            "Description": "Filter used to identify test files.",
            "Value": ".Tests.ps1",
            "IsModified": false
          },
          "Exit": {
            "Default": false,
            "Description": "Exit with non-zero exit code when the test run fails. Exit code is always set to `$LASTEXITCODE` even when this option is `$false`. When used together with Throw, throwing an exception is preferred.",
            "Value": false,
            "IsModified": false
          },
          "Throw": {
            "Default": false,
            "Description": "Throw an exception when test run fails. When used together with Exit, throwing an exception is preferred.",
            "Value": false,
            "IsModified": false
          },
          "PassThru": {
            "Default": false,
            "Description": "Return result object to the pipeline after finishing the test run.",
            "Value": true,
            "IsModified": true
          },
          "SkipRun": {
            "Default": false,
            "Description": "Runs the discovery phase but skips run. Use it with PassThru to get object populated with all tests.",
            "Value": false,
            "IsModified": false
          },
          "SkipRemainingOnFailure": {
            "Default": "None",
            "Description": "Skips remaining tests after failure for selected scope, options are None, Run, Container and Block.",
            "Value": "None",
            "IsModified": false
          }
        },
        "Filter": {
          "Tag": {
            "Default": "",
            "Description": "Tags of Describe, Context or It to be run.",
            "Value": "",
            "IsModified": false
          },
          "ExcludeTag": {
            "Default": "",
            "Description": "Tags of Describe, Context or It to be excluded from the run.",
            "Value": "",
            "IsModified": false
          },
          "Line": {
            "Default": "",
            "Description": "Filter by file and scriptblock start line, useful to run parsed tests programmatically to avoid problems with expanded names. Example: 'C:\\tests\\file1.Tests.ps1:37'",
            "Value": "",
            "IsModified": false
          },
          "ExcludeLine": {
            "Default": "",
            "Description": "Exclude by file and scriptblock start line, takes precedence over Line.",
            "Value": "",
            "IsModified": false
          },
          "FullName": {
            "Default": "",
            "Description": "Full name of test with -like wildcards, joined by dot. Example: '*.describe Get-Item.test1'",
            "Value": "",
            "IsModified": false
          }
        },
        "CodeCoverage": {
          "Enabled": {
            "Default": false,
            "Description": "Enable CodeCoverage.",
            "Value": false,
            "IsModified": false
          },
          "OutputFormat": {
            "Default": "JaCoCo",
            "Description": "Format to use for code coverage report. Possible values: JaCoCo, CoverageGutters, Cobertura",
            "Value": "JaCoCo",
            "IsModified": false
          },
          "OutputPath": {
            "Default": "coverage.xml",
            "Description": "Path relative to the current directory where code coverage report is saved.",
            "Value": "coverage.xml",
            "IsModified": false
          },
          "OutputEncoding": {
            "Default": "UTF8",
            "Description": "Encoding of the output file.",
            "Value": "UTF8",
            "IsModified": false
          },
          "Path": {
            "Default": "",
            "Description": "Directories or files to be used for code coverage, by default the Path(s) from general settings are used, unless overridden here.",
            "Value": "",
            "IsModified": false
          },
          "ExcludeTests": {
            "Default": true,
            "Description": "Exclude tests from code coverage. This uses the TestFilter from general configuration.",
            "Value": true,
            "IsModified": false
          },
          "RecursePaths": {
            "Default": true,
            "Description": "Will recurse through directories in the Path option.",
            "Value": true,
            "IsModified": false
          },
          "CoveragePercentTarget": {
            "Default": 75.0,
            "Description": "Target percent of code coverage that you want to achieve, default 75%.",
            "Value": 75.0,
            "IsModified": false
          },
          "UseBreakpoints": {
            "Default": true,
            "Description": "EXPERIMENTAL: When false, use Profiler based tracer to do CodeCoverage instead of using breakpoints.",
            "Value": true,
            "IsModified": false
          },
          "SingleHitBreakpoints": {
            "Default": true,
            "Description": "Remove breakpoint when it is hit.",
            "Value": true,
            "IsModified": false
          }
        },
        "TestResult": {
          "Enabled": {
            "Default": false,
            "Description": "Enable TestResult.",
            "Value": true,
            "IsModified": true
          },
          "OutputFormat": {
            "Default": "NUnitXml",
            "Description": "Format to use for test result report. Possible values: NUnitXml, NUnit2.5, NUnit3 or JUnitXml",
            "Value": "NUnitXml",
            "IsModified": false
          },
          "OutputPath": {
            "Default": "testResults.xml",
            "Description": "Path relative to the current directory where test result report is saved.",
            "Value": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\TestResults\\EnhancedDocumentationSystem-UnitTests-20250828-211216.xml",
            "IsModified": true
          },
          "OutputEncoding": {
            "Default": "UTF8",
            "Description": "Encoding of the output file.",
            "Value": "UTF8",
            "IsModified": false
          },
          "TestSuiteName": {
            "Default": "Pester",
            "Description": "Set the name assigned to the root 'test-suite' element.",
            "Value": "Pester",
            "IsModified": false
          }
        },
        "Should": {
          "ErrorAction": {
            "Default": "Stop",
            "Description": "Controls if Should throws on error. Use 'Stop' to throw on error, or 'Continue' to fail at the end of the test.",
            "Value": "Stop",
            "IsModified": false
          }
        },
        "Debug": {
          "ShowFullErrors": {
            "Default": false,
            "Description": "Show full errors including Pester internal stack. This property is deprecated, and if set to true it will override Output.StackTraceVerbosity to 'Full'.",
            "Value": false,
            "IsModified": false
          },
          "WriteDebugMessages": {
            "Default": false,
            "Description": "Write Debug messages to screen.",
            "Value": false,
            "IsModified": false
          },
          "WriteDebugMessagesFrom": {
            "Default": "Discovery Skip Mock CodeCoverage",
            "Description": "Write Debug messages from a given source, WriteDebugMessages must be set to true for this to work. You can use like wildcards to get messages from multiple sources, as well as * to get everything.",
            "Value": "Discovery Skip Mock CodeCoverage",
            "IsModified": false
          },
          "ShowNavigationMarkers": {
            "Default": false,
            "Description": "Write paths after every block and test, for easy navigation in VSCode.",
            "Value": false,
            "IsModified": false
          },
          "ReturnRawResultObject": {
            "Default": false,
            "Description": "Returns unfiltered result object, this is for development only. Do not rely on this object for additional properties, non-public properties will be renamed without previous notice.",
            "Value": false,
            "IsModified": false
          }
        },
        "Output": {
          "Verbosity": {
            "Default": "Normal",
            "Description": "The verbosity of output, options are None, Normal, Detailed and Diagnostic.",
            "Value": "Normal",
            "IsModified": true
          },
          "StackTraceVerbosity": {
            "Default": "Filtered",
            "Description": "The verbosity of stacktrace output, options are None, FirstLine, Filtered and Full.",
            "Value": "Filtered",
            "IsModified": false
          },
          "CIFormat": {
            "Default": "Auto",
            "Description": "The CI format of error output in build logs, options are None, Auto, AzureDevops and GithubActions.",
            "Value": "Auto",
            "IsModified": false
          },
          "CILogLevel": {
            "Default": "Error",
            "Description": "The CI log level in build logs, options are Error and Warning.",
            "Value": "Error",
            "IsModified": false
          },
          "RenderMode": {
            "Default": "Auto",
            "Description": "The mode used to render console output, options are Auto, Ansi, ConsoleColor and Plaintext.",
            "Value": "Auto",
            "IsModified": false
          }
        },
        "TestDrive": {
          "Enabled": {
            "Default": true,
            "Description": "Enable TestDrive.",
            "Value": true,
            "IsModified": false
          }
        },
        "TestRegistry": {
          "Enabled": {
            "Default": true,
            "Description": "Enable TestRegistry.",
            "Value": true,
            "IsModified": false
          }
        }
      }
    },
    "Plugins": null,
    "PluginConfiguration": null,
    "PluginData": null,
    "Configuration": {
      "Run": {
        "Path": {
          "Default": [
            "."
          ],
          "Description": "Directories to be searched for tests, paths directly to test files, or combination of both.",
          "Value": [
            "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1"
          ],
          "IsModified": true
        },
        "ExcludePath": {
          "Default": [],
          "Description": "Directories or files to be excluded from the run.",
          "Value": [],
          "IsModified": false
        },
        "ScriptBlock": {
          "Default": [],
          "Description": "ScriptBlocks containing tests to be executed.",
          "Value": [],
          "IsModified": false
        },
        "Container": {
          "Default": [],
          "Description": "ContainerInfo objects containing tests to be executed.",
          "Value": [],
          "IsModified": false
        },
        "TestExtension": {
          "Default": ".Tests.ps1",
          "Description": "Filter used to identify test files.",
          "Value": ".Tests.ps1",
          "IsModified": false
        },
        "Exit": {
          "Default": false,
          "Description": "Exit with non-zero exit code when the test run fails. Exit code is always set to `$LASTEXITCODE` even when this option is `$false`. When used together with Throw, throwing an exception is preferred.",
          "Value": false,
          "IsModified": false
        },
        "Throw": {
          "Default": false,
          "Description": "Throw an exception when test run fails. When used together with Exit, throwing an exception is preferred.",
          "Value": false,
          "IsModified": false
        },
        "PassThru": {
          "Default": false,
          "Description": "Return result object to the pipeline after finishing the test run.",
          "Value": true,
          "IsModified": true
        },
        "SkipRun": {
          "Default": false,
          "Description": "Runs the discovery phase but skips run. Use it with PassThru to get object populated with all tests.",
          "Value": false,
          "IsModified": false
        },
        "SkipRemainingOnFailure": {
          "Default": "None",
          "Description": "Skips remaining tests after failure for selected scope, options are None, Run, Container and Block.",
          "Value": "None",
          "IsModified": false
        }
      },
      "Filter": {
        "Tag": {
          "Default": [],
          "Description": "Tags of Describe, Context or It to be run.",
          "Value": [],
          "IsModified": false
        },
        "ExcludeTag": {
          "Default": [],
          "Description": "Tags of Describe, Context or It to be excluded from the run.",
          "Value": [],
          "IsModified": false
        },
        "Line": {
          "Default": [],
          "Description": "Filter by file and scriptblock start line, useful to run parsed tests programmatically to avoid problems with expanded names. Example: 'C:\\tests\\file1.Tests.ps1:37'",
          "Value": [],
          "IsModified": false
        },
        "ExcludeLine": {
          "Default": [],
          "Description": "Exclude by file and scriptblock start line, takes precedence over Line.",
          "Value": [],
          "IsModified": false
        },
        "FullName": {
          "Default": [],
          "Description": "Full name of test with -like wildcards, joined by dot. Example: '*.describe Get-Item.test1'",
          "Value": [],
          "IsModified": false
        }
      },
      "CodeCoverage": {
        "Enabled": {
          "Default": false,
          "Description": "Enable CodeCoverage.",
          "Value": false,
          "IsModified": false
        },
        "OutputFormat": {
          "Default": "JaCoCo",
          "Description": "Format to use for code coverage report. Possible values: JaCoCo, CoverageGutters, Cobertura",
          "Value": "JaCoCo",
          "IsModified": false
        },
        "OutputPath": {
          "Default": "coverage.xml",
          "Description": "Path relative to the current directory where code coverage report is saved.",
          "Value": "coverage.xml",
          "IsModified": false
        },
        "OutputEncoding": {
          "Default": "UTF8",
          "Description": "Encoding of the output file.",
          "Value": "UTF8",
          "IsModified": false
        },
        "Path": {
          "Default": [],
          "Description": "Directories or files to be used for code coverage, by default the Path(s) from general settings are used, unless overridden here.",
          "Value": [],
          "IsModified": false
        },
        "ExcludeTests": {
          "Default": true,
          "Description": "Exclude tests from code coverage. This uses the TestFilter from general configuration.",
          "Value": true,
          "IsModified": false
        },
        "RecursePaths": {
          "Default": true,
          "Description": "Will recurse through directories in the Path option.",
          "Value": true,
          "IsModified": false
        },
        "CoveragePercentTarget": {
          "Default": 75.0,
          "Description": "Target percent of code coverage that you want to achieve, default 75%.",
          "Value": 75.0,
          "IsModified": false
        },
        "UseBreakpoints": {
          "Default": true,
          "Description": "EXPERIMENTAL: When false, use Profiler based tracer to do CodeCoverage instead of using breakpoints.",
          "Value": true,
          "IsModified": false
        },
        "SingleHitBreakpoints": {
          "Default": true,
          "Description": "Remove breakpoint when it is hit.",
          "Value": true,
          "IsModified": false
        }
      },
      "TestResult": {
        "Enabled": {
          "Default": false,
          "Description": "Enable TestResult.",
          "Value": true,
          "IsModified": true
        },
        "OutputFormat": {
          "Default": "NUnitXml",
          "Description": "Format to use for test result report. Possible values: NUnitXml, NUnit2.5, NUnit3 or JUnitXml",
          "Value": "NUnitXml",
          "IsModified": false
        },
        "OutputPath": {
          "Default": "testResults.xml",
          "Description": "Path relative to the current directory where test result report is saved.",
          "Value": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\TestResults\\EnhancedDocumentationSystem-UnitTests-20250828-211216.xml",
          "IsModified": true
        },
        "OutputEncoding": {
          "Default": "UTF8",
          "Description": "Encoding of the output file.",
          "Value": "UTF8",
          "IsModified": false
        },
        "TestSuiteName": {
          "Default": "Pester",
          "Description": "Set the name assigned to the root 'test-suite' element.",
          "Value": "Pester",
          "IsModified": false
        }
      },
      "Should": {
        "ErrorAction": {
          "Default": "Stop",
          "Description": "Controls if Should throws on error. Use 'Stop' to throw on error, or 'Continue' to fail at the end of the test.",
          "Value": "Stop",
          "IsModified": false
        }
      },
      "Debug": {
        "ShowFullErrors": {
          "Default": false,
          "Description": "Show full errors including Pester internal stack. This property is deprecated, and if set to true it will override Output.StackTraceVerbosity to 'Full'.",
          "Value": false,
          "IsModified": false
        },
        "WriteDebugMessages": {
          "Default": false,
          "Description": "Write Debug messages to screen.",
          "Value": false,
          "IsModified": false
        },
        "WriteDebugMessagesFrom": {
          "Default": [
            "Discovery",
            "Skip",
            "Mock",
            "CodeCoverage"
          ],
          "Description": "Write Debug messages from a given source, WriteDebugMessages must be set to true for this to work. You can use like wildcards to get messages from multiple sources, as well as * to get everything.",
          "Value": [
            "Discovery",
            "Skip",
            "Mock",
            "CodeCoverage"
          ],
          "IsModified": false
        },
        "ShowNavigationMarkers": {
          "Default": false,
          "Description": "Write paths after every block and test, for easy navigation in VSCode.",
          "Value": false,
          "IsModified": false
        },
        "ReturnRawResultObject": {
          "Default": false,
          "Description": "Returns unfiltered result object, this is for development only. Do not rely on this object for additional properties, non-public properties will be renamed without previous notice.",
          "Value": false,
          "IsModified": false
        }
      },
      "Output": {
        "Verbosity": {
          "Default": "Normal",
          "Description": "The verbosity of output, options are None, Normal, Detailed and Diagnostic.",
          "Value": "Normal",
          "IsModified": true
        },
        "StackTraceVerbosity": {
          "Default": "Filtered",
          "Description": "The verbosity of stacktrace output, options are None, FirstLine, Filtered and Full.",
          "Value": "Filtered",
          "IsModified": false
        },
        "CIFormat": {
          "Default": "Auto",
          "Description": "The CI format of error output in build logs, options are None, Auto, AzureDevops and GithubActions.",
          "Value": "None",
          "IsModified": true
        },
        "CILogLevel": {
          "Default": "Error",
          "Description": "The CI log level in build logs, options are Error and Warning.",
          "Value": "Error",
          "IsModified": false
        },
        "RenderMode": {
          "Default": "Auto",
          "Description": "The mode used to render console output, options are Auto, Ansi, ConsoleColor and Plaintext.",
          "Value": "Ansi",
          "IsModified": true
        }
      },
      "TestDrive": {
        "Enabled": {
          "Default": true,
          "Description": "Enable TestDrive.",
          "Value": true,
          "IsModified": false
        }
      },
      "TestRegistry": {
        "Enabled": {
          "Default": true,
          "Description": "Enable TestRegistry.",
          "Value": true,
          "IsModified": false
        }
      }
    },
    "DiscoveryDuration": {
      "Ticks": 1206408,
      "Days": 0,
      "Hours": 0,
      "Milliseconds": 120,
      "Microseconds": 640,
      "Nanoseconds": 800,
      "Minutes": 0,
      "Seconds": 0,
      "TotalDays": 1.3963055555555556E-06,
      "TotalHours": 3.351133333333333E-05,
      "TotalMilliseconds": 120.6408,
      "TotalMicroseconds": 120640.8,
      "TotalNanoseconds": 120640800.0,
      "TotalMinutes": 0.00201068,
      "TotalSeconds": 0.1206408
    },
    "UserDuration": {
      "Ticks": 39200901,
      "Days": 0,
      "Hours": 0,
      "Milliseconds": 920,
      "Microseconds": 90,
      "Nanoseconds": 100,
      "Minutes": 0,
      "Seconds": 3,
      "TotalDays": 4.537141319444444E-05,
      "TotalHours": 0.0010889139166666666,
      "TotalMilliseconds": 3920.0901,
      "TotalMicroseconds": 3920090.1,
      "TotalNanoseconds": 3920090100.0,
      "TotalMinutes": 0.065334835,
      "TotalSeconds": 3.9200901
    },
    "FrameworkDuration": {
      "Ticks": 3519204,
      "Days": 0,
      "Hours": 0,
      "Milliseconds": 351,
      "Microseconds": 920,
      "Nanoseconds": 400,
      "Minutes": 0,
      "Seconds": 0,
      "TotalDays": 4.073152777777778E-06,
      "TotalHours": 9.775566666666667E-05,
      "TotalMilliseconds": 351.9204,
      "TotalMicroseconds": 351920.4,
      "TotalNanoseconds": 351920400.0,
      "TotalMinutes": 0.00586534,
      "TotalSeconds": 0.3519204
    },
    "Failed": [
      {
        "Name": "Should create thread-safe CPG wrapper",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Thread-Safe Operations",
          "Should create thread-safe CPG wrapper"
        ],
        "Data": null,
        "ExpandedName": "Should create thread-safe CPG wrapper",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should create thread-safe CPG wrapper",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }",
            "Type": 19,
            "Start": 17420,
            "Length": 619,
            "StartLine": 354,
            "StartColumn": 125,
            "EndLine": 361,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "dda2d12d-1db4-4952-a200-69b9e111c85b",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }",
            "Parent": "{\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Thread-Safe Operations",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Thread-Safe Operations"
          ],
          "Data": null,
          "ExpandedName": "Thread-Safe Operations",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
          "Blocks": [],
          "Tests": [
            "[-] Should create thread-safe CPG wrapper",
            "[-] Should handle concurrent operations safely",
            "[-] Should provide thread safety statistics"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:00.0725277",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.7654217-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0537485",
            "UserDuration": "00:00:00.0187792",
            "OwnDuration": "00:00:00.0725277",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 290,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should create thread-safe CPG wrapper",
            "[-] Should handle concurrent operations safely",
            "[-] Should provide thread safety statistics"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "9128a9df-53d8-43d0-a90e-512a2f006dc7",
            "Ast": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }"
          },
          "StartLine": 352,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 354,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should handle concurrent operations safely",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Thread-Safe Operations",
          "Should handle concurrent operations safely"
        ],
        "Data": null,
        "ExpandedName": "Should handle concurrent operations safely",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should handle concurrent operations safely",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }",
            "Type": 19,
            "Start": 18184,
            "Length": 737,
            "StartLine": 363,
            "StartColumn": 130,
            "EndLine": 381,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "0881dba1-d0e9-4abd-9294-5bb2a13e4d5f",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }",
            "Parent": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Thread-Safe Operations",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Thread-Safe Operations"
          ],
          "Data": null,
          "ExpandedName": "Thread-Safe Operations",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
          "Blocks": [],
          "Tests": [
            "[-] Should create thread-safe CPG wrapper",
            "[-] Should handle concurrent operations safely",
            "[-] Should provide thread safety statistics"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:00.0725277",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.7654217-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0537485",
            "UserDuration": "00:00:00.0187792",
            "OwnDuration": "00:00:00.0725277",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 290,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should create thread-safe CPG wrapper",
            "[-] Should handle concurrent operations safely",
            "[-] Should provide thread safety statistics"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "9128a9df-53d8-43d0-a90e-512a2f006dc7",
            "Ast": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }"
          },
          "StartLine": 352,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 363,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should provide thread safety statistics",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Thread-Safe Operations",
          "Should provide thread safety statistics"
        ],
        "Data": null,
        "ExpandedName": "Should provide thread safety statistics",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should provide thread safety statistics",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }",
            "Type": 19,
            "Start": 19063,
            "Length": 311,
            "StartLine": 383,
            "StartColumn": 127,
            "EndLine": 389,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "456e5c44-2900-473a-9e06-1d0ed647a195",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }",
            "Parent": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Thread-Safe Operations",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Thread-Safe Operations"
          ],
          "Data": null,
          "ExpandedName": "Thread-Safe Operations",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
          "Blocks": [],
          "Tests": [
            "[-] Should create thread-safe CPG wrapper",
            "[-] Should handle concurrent operations safely",
            "[-] Should provide thread safety statistics"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:00.0725277",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.7654217-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0537485",
            "UserDuration": "00:00:00.0187792",
            "OwnDuration": "00:00:00.0725277",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 290,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should create thread-safe CPG wrapper",
            "[-] Should handle concurrent operations safely",
            "[-] Should provide thread safety statistics"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "9128a9df-53d8-43d0-a90e-512a2f006dc7",
            "Ast": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }"
          },
          "StartLine": 352,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 383,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should build call graphs from source code",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Call Graph Builder",
          "Should build call graphs from source code"
        ],
        "Data": null,
        "ExpandedName": "Should build call graphs from source code",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should build call graphs from source code",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Type": 19,
            "Start": 19811,
            "Length": 665,
            "StartLine": 399,
            "StartColumn": 125,
            "EndLine": 419,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "8d0f3ea0-de04-4406-8bc7-9e7f57785fc2",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Call Graph Builder",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Call Graph Builder"
          ],
          "Data": null,
          "ExpandedName": "Call Graph Builder",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder",
          "Blocks": [],
          "Tests": [
            "[-] Should build call graphs from source code",
            "[-] Should detect recursive calls"
          ],
          "Result": "Failed",
          "FailedCount": 2,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:00.0725277",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.7654217-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0537485",
            "UserDuration": "00:00:00.0187792",
            "OwnDuration": "00:00:00.0725277",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 290,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "1cbd759b-d381-4722-8fe0-9704109a0376",
            "Ast": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should build call graphs from source code",
            "[-] Should detect recursive calls"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "6d2d908c-b8ed-4140-b6a8-270966fd5d3e",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 392,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 2,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 399,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should detect recursive calls",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Call Graph Builder",
          "Should detect recursive calls"
        ],
        "Data": null,
        "ExpandedName": "Should detect recursive calls",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should detect recursive calls",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Type": 19,
            "Start": 20604,
            "Length": 589,
            "StartLine": 421,
            "StartColumn": 113,
            "EndLine": 436,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "dbdcce3d-2f73-44e8-b20d-964990c4e221",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Call Graph Builder",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Call Graph Builder"
          ],
          "Data": null,
          "ExpandedName": "Call Graph Builder",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder",
          "Blocks": [],
          "Tests": [
            "[-] Should build call graphs from source code",
            "[-] Should detect recursive calls"
          ],
          "Result": "Failed",
          "FailedCount": 2,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:00.0725277",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.7654217-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0537485",
            "UserDuration": "00:00:00.0187792",
            "OwnDuration": "00:00:00.0725277",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 290,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "1cbd759b-d381-4722-8fe0-9704109a0376",
            "Ast": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should build call graphs from source code",
            "[-] Should detect recursive calls"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "6d2d908c-b8ed-4140-b6a8-270966fd5d3e",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 392,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 2,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 421,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should track variable definitions and uses",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Data Flow Tracker",
          "Should track variable definitions and uses"
        ],
        "Data": null,
        "ExpandedName": "Should track variable definitions and uses",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should track variable definitions and uses",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Type": 19,
            "Start": 21627,
            "Length": 475,
            "StartLine": 446,
            "StartColumn": 125,
            "EndLine": 458,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "f576a3fc-fd5f-4c7d-94fd-bd3249231580",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Data Flow Tracker",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Data Flow Tracker"
          ],
          "Data": null,
          "ExpandedName": "Data Flow Tracker",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker",
          "Blocks": [],
          "Tests": [
            "[-] Should track variable definitions and uses",
            "[-] Should perform taint analysis"
          ],
          "Result": "Failed",
          "FailedCount": 2,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:00.0725277",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.7654217-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0537485",
            "UserDuration": "00:00:00.0187792",
            "OwnDuration": "00:00:00.0725277",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 290,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "2454aebd-1662-47d2-bcb4-025e8d0d4d29",
            "Ast": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should track variable definitions and uses",
            "[-] Should perform taint analysis"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "6641cbdb-0b65-4829-85ab-21524a39d311",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 439,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 2,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 446,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should perform taint analysis",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Data Flow Tracker",
          "Should perform taint analysis"
        ],
        "Data": null,
        "ExpandedName": "Should perform taint analysis",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should perform taint analysis",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Type": 19,
            "Start": 22229,
            "Length": 563,
            "StartLine": 460,
            "StartColumn": 112,
            "EndLine": 472,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "69138754-6557-4312-8f8f-79bfb9d77cea",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Data Flow Tracker",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Data Flow Tracker"
          ],
          "Data": null,
          "ExpandedName": "Data Flow Tracker",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker",
          "Blocks": [],
          "Tests": [
            "[-] Should track variable definitions and uses",
            "[-] Should perform taint analysis"
          ],
          "Result": "Failed",
          "FailedCount": 2,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:00.0725277",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.7654217-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0537485",
            "UserDuration": "00:00:00.0187792",
            "OwnDuration": "00:00:00.0725277",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 290,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "2454aebd-1662-47d2-bcb4-025e8d0d4d29",
            "Ast": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should track variable definitions and uses",
            "[-] Should perform taint analysis"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "6641cbdb-0b65-4829-85ab-21524a39d311",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 439,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 2,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 460,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should connect to Ollama service",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Ollama API Integration",
          "Should connect to Ollama service"
        ],
        "Data": null,
        "ExpandedName": "Should connect to Ollama service",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should connect to Ollama service",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }",
            "Type": 19,
            "Start": 25513,
            "Length": 222,
            "StartLine": 526,
            "StartColumn": 88,
            "EndLine": 531,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "56c7e4de-dbad-4159-bf02-17825f60a697",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Ollama API Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Ollama API Integration"
          ],
          "Data": null,
          "ExpandedName": "Ollama API Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration",
          "Blocks": [],
          "Tests": [
            "[-] Should connect to Ollama service",
            "[-] Should list available models",
            "[-] Should generate responses for code analysis"
          ],
          "Result": "Skipped",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 9,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.1704310",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.8379525-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0614595",
            "UserDuration": "00:00:02.1089715",
            "OwnDuration": "00:00:02.1704310",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 480,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should connect to Ollama service",
            "[-] Should list available models",
            "[-] Should generate responses for code analysis"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "89912ec4-4d17-43bc-8e36-02f8d7fca109",
            "Ast": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 525,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 526,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should list available models",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Ollama API Integration",
          "Should list available models"
        ],
        "Data": null,
        "ExpandedName": "Should list available models",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should list available models",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }",
            "Type": 19,
            "Start": 25834,
            "Length": 279,
            "StartLine": 533,
            "StartColumn": 84,
            "EndLine": 539,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "a4a42429-05b7-4f02-88e2-c8bb1af580f6",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Ollama API Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Ollama API Integration"
          ],
          "Data": null,
          "ExpandedName": "Ollama API Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration",
          "Blocks": [],
          "Tests": [
            "[-] Should connect to Ollama service",
            "[-] Should list available models",
            "[-] Should generate responses for code analysis"
          ],
          "Result": "Skipped",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 9,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.1704310",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.8379525-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0614595",
            "UserDuration": "00:00:02.1089715",
            "OwnDuration": "00:00:02.1704310",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 480,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should connect to Ollama service",
            "[-] Should list available models",
            "[-] Should generate responses for code analysis"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "89912ec4-4d17-43bc-8e36-02f8d7fca109",
            "Ast": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 525,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 533,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate responses for code analysis",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Ollama API Integration",
          "Should generate responses for code analysis"
        ],
        "Data": null,
        "ExpandedName": "Should generate responses for code analysis",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should generate responses for code analysis",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }",
            "Type": 19,
            "Start": 26227,
            "Length": 545,
            "StartLine": 541,
            "StartColumn": 99,
            "EndLine": 550,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "81f3c91a-1b3f-4cf3-a258-4d0c6a2f641c",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Ollama API Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Ollama API Integration"
          ],
          "Data": null,
          "ExpandedName": "Ollama API Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration",
          "Blocks": [],
          "Tests": [
            "[-] Should connect to Ollama service",
            "[-] Should list available models",
            "[-] Should generate responses for code analysis"
          ],
          "Result": "Skipped",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 9,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.1704310",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.8379525-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0614595",
            "UserDuration": "00:00:02.1089715",
            "OwnDuration": "00:00:02.1704310",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 480,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should connect to Ollama service",
            "[-] Should list available models",
            "[-] Should generate responses for code analysis"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "89912ec4-4d17-43bc-8e36-02f8d7fca109",
            "Ast": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 525,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 541,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should create function documentation prompts",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Prompt Templates",
          "Should create function documentation prompts"
        ],
        "Data": null,
        "ExpandedName": "Should create function documentation prompts",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create function documentation prompts",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 27207,
            "Length": 427,
            "StartLine": 560,
            "StartColumn": 127,
            "EndLine": 567,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "83ec978c-8306-4512-bd04-cc0369056cff",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Prompt Templates",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Prompt Templates"
          ],
          "Data": null,
          "ExpandedName": "Prompt Templates",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
          "Blocks": [],
          "Tests": [
            "[-] Should create function documentation prompts",
            "[-] Should create module documentation prompts",
            "[-] Should support variable substitution"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 9,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.1704310",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.8379525-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0614595",
            "UserDuration": "00:00:02.1089715",
            "OwnDuration": "00:00:02.1704310",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 480,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "7b47f2d8-ff04-40d0-b942-ac6974905e4b",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should create function documentation prompts",
            "[-] Should create module documentation prompts",
            "[-] Should support variable substitution"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "c6f817ec-ae39-43bf-aa91-acb2a2b42492",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 553,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 560,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should create module documentation prompts",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Prompt Templates",
          "Should create module documentation prompts"
        ],
        "Data": null,
        "ExpandedName": "Should create module documentation prompts",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create module documentation prompts",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 27774,
            "Length": 411,
            "StartLine": 569,
            "StartColumn": 125,
            "EndLine": 576,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "ece90f4a-8142-44b6-ae0f-83622f3c6b42",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Prompt Templates",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Prompt Templates"
          ],
          "Data": null,
          "ExpandedName": "Prompt Templates",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
          "Blocks": [],
          "Tests": [
            "[-] Should create function documentation prompts",
            "[-] Should create module documentation prompts",
            "[-] Should support variable substitution"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 9,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.1704310",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.8379525-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0614595",
            "UserDuration": "00:00:02.1089715",
            "OwnDuration": "00:00:02.1704310",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 480,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "7b47f2d8-ff04-40d0-b942-ac6974905e4b",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should create function documentation prompts",
            "[-] Should create module documentation prompts",
            "[-] Should support variable substitution"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "c6f817ec-ae39-43bf-aa91-acb2a2b42492",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 553,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 569,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should support variable substitution",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Prompt Templates",
          "Should support variable substitution"
        ],
        "Data": null,
        "ExpandedName": "Should support variable substitution",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should support variable substitution",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 28319,
            "Length": 542,
            "StartLine": 578,
            "StartColumn": 119,
            "EndLine": 588,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "949cad73-53cd-4805-ae84-f1e9eb50d1bd",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Prompt Templates",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Prompt Templates"
          ],
          "Data": null,
          "ExpandedName": "Prompt Templates",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
          "Blocks": [],
          "Tests": [
            "[-] Should create function documentation prompts",
            "[-] Should create module documentation prompts",
            "[-] Should support variable substitution"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 9,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.1704310",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.8379525-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0614595",
            "UserDuration": "00:00:02.1089715",
            "OwnDuration": "00:00:02.1704310",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 480,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "7b47f2d8-ff04-40d0-b942-ac6974905e4b",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should create function documentation prompts",
            "[-] Should create module documentation prompts",
            "[-] Should support variable substitution"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "c6f817ec-ae39-43bf-aa91-acb2a2b42492",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 553,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 578,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should cache and retrieve responses",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Response Cache",
          "Should cache and retrieve responses"
        ],
        "Data": null,
        "ExpandedName": "Should cache and retrieve responses",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should cache and retrieve responses",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }",
            "Type": 19,
            "Start": 29279,
            "Length": 485,
            "StartLine": 598,
            "StartColumn": 116,
            "EndLine": 608,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "f75dcb13-56a9-464f-b2e9-feb8512d39ec",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Response Cache",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Response Cache"
          ],
          "Data": null,
          "ExpandedName": "Response Cache",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
          "Blocks": [],
          "Tests": [
            "[-] Should cache and retrieve responses",
            "[-] Should handle TTL expiration",
            "[-] Should provide cache statistics"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 9,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.1704310",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.8379525-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0614595",
            "UserDuration": "00:00:02.1089715",
            "OwnDuration": "00:00:02.1704310",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 480,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a3100a39-d922-4e8f-bb81-a253234119f7",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should cache and retrieve responses",
            "[-] Should handle TTL expiration",
            "[-] Should provide cache statistics"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "9764edb0-b3d3-422d-91fc-81404a2dcf1f",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 591,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 598,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should handle TTL expiration",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Response Cache",
          "Should handle TTL expiration"
        ],
        "Data": null,
        "ExpandedName": "Should handle TTL expiration",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should handle TTL expiration",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }",
            "Type": 19,
            "Start": 29888,
            "Length": 522,
            "StartLine": 610,
            "StartColumn": 109,
            "EndLine": 621,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "2e7982f2-5b3d-49cc-b2b9-2541ecdbaa66",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Response Cache",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Response Cache"
          ],
          "Data": null,
          "ExpandedName": "Response Cache",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
          "Blocks": [],
          "Tests": [
            "[-] Should cache and retrieve responses",
            "[-] Should handle TTL expiration",
            "[-] Should provide cache statistics"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 9,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.1704310",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.8379525-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0614595",
            "UserDuration": "00:00:02.1089715",
            "OwnDuration": "00:00:02.1704310",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 480,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a3100a39-d922-4e8f-bb81-a253234119f7",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should cache and retrieve responses",
            "[-] Should handle TTL expiration",
            "[-] Should provide cache statistics"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "9764edb0-b3d3-422d-91fc-81404a2dcf1f",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 591,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 610,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should provide cache statistics",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Response Cache",
          "Should provide cache statistics"
        ],
        "Data": null,
        "ExpandedName": "Should provide cache statistics",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should provide cache statistics",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }",
            "Type": 19,
            "Start": 30537,
            "Length": 402,
            "StartLine": 623,
            "StartColumn": 112,
            "EndLine": 631,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "267ef21d-c6fa-4e65-9dcf-48095bd27ce3",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Response Cache",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Response Cache"
          ],
          "Data": null,
          "ExpandedName": "Response Cache",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
          "Blocks": [],
          "Tests": [
            "[-] Should cache and retrieve responses",
            "[-] Should handle TTL expiration",
            "[-] Should provide cache statistics"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 9,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.1704310",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.8379525-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0614595",
            "UserDuration": "00:00:02.1089715",
            "OwnDuration": "00:00:02.1704310",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 480,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a3100a39-d922-4e8f-bb81-a253234119f7",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should cache and retrieve responses",
            "[-] Should handle TTL expiration",
            "[-] Should provide cache statistics"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "9764edb0-b3d3-422d-91fc-81404a2dcf1f",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 591,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 623,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate PowerShell documentation templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should generate PowerShell documentation templates"
        ],
        "Data": null,
        "ExpandedName": "Should generate PowerShell documentation templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate PowerShell documentation templates",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }",
            "Type": 19,
            "Start": 33364,
            "Length": 396,
            "StartLine": 674,
            "StartColumn": 140,
            "EndLine": 680,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "fb2452e8-67b3-41ef-8e17-de143c4beb46",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }",
            "Parent": "{\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Result": "Failed",
          "FailedCount": 5,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[-] Language-Specific Templates [-] Automation Triggers",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.1803866",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Language-Specific Templates [-] Automation Triggers",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:18.9358625-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0696061",
            "UserDuration": "00:00:02.1107805",
            "OwnDuration": "00:00:02.1803866",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    ",
            "StartLine": 639,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "143e92b1-db11-4f14-b6de-b37419abadd5",
            "Ast": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }"
          },
          "StartLine": 672,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 5,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 674,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate Python documentation templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should generate Python documentation templates"
        ],
        "Data": null,
        "ExpandedName": "Should generate Python documentation templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate Python documentation templates",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }",
            "Type": 19,
            "Start": 33911,
            "Length": 385,
            "StartLine": 682,
            "StartColumn": 136,
            "EndLine": 688,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "6bbc8202-5f97-48a0-b7fc-a5fa983ec895",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }",
            "Parent": "{\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Result": "Failed",
          "FailedCount": 5,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[-] Language-Specific Templates [-] Automation Triggers",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.1803866",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Language-Specific Templates [-] Automation Triggers",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:18.9358625-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0696061",
            "UserDuration": "00:00:02.1107805",
            "OwnDuration": "00:00:02.1803866",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    ",
            "StartLine": 639,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "143e92b1-db11-4f14-b6de-b37419abadd5",
            "Ast": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }"
          },
          "StartLine": 672,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 5,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 682,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate C# documentation templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should generate C# documentation templates"
        ],
        "Data": null,
        "ExpandedName": "Should generate C# documentation templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate C# documentation templates",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }",
            "Type": 19,
            "Start": 34443,
            "Length": 400,
            "StartLine": 690,
            "StartColumn": 132,
            "EndLine": 696,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "bed2f1ab-379b-4445-883a-d9a979419567",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }",
            "Parent": "{\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Result": "Failed",
          "FailedCount": 5,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[-] Language-Specific Templates [-] Automation Triggers",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.1803866",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Language-Specific Templates [-] Automation Triggers",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:18.9358625-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0696061",
            "UserDuration": "00:00:02.1107805",
            "OwnDuration": "00:00:02.1803866",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    ",
            "StartLine": 639,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "143e92b1-db11-4f14-b6de-b37419abadd5",
            "Ast": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }"
          },
          "StartLine": 672,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 5,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 690,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate JavaScript documentation templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should generate JavaScript documentation templates"
        ],
        "Data": null,
        "ExpandedName": "Should generate JavaScript documentation templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate JavaScript documentation templates",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }",
            "Type": 19,
            "Start": 34998,
            "Length": 437,
            "StartLine": 698,
            "StartColumn": 140,
            "EndLine": 705,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "07c28935-8d4d-4d5c-a283-734c0d3bc011",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }",
            "Parent": "{\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Result": "Failed",
          "FailedCount": 5,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[-] Language-Specific Templates [-] Automation Triggers",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.1803866",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Language-Specific Templates [-] Automation Triggers",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:18.9358625-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0696061",
            "UserDuration": "00:00:02.1107805",
            "OwnDuration": "00:00:02.1803866",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    ",
            "StartLine": 639,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "143e92b1-db11-4f14-b6de-b37419abadd5",
            "Ast": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }"
          },
          "StartLine": 672,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 5,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 698,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should detect language from file extensions",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should detect language from file extensions"
        ],
        "Data": null,
        "ExpandedName": "Should detect language from file extensions",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should detect language from file extensions",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }",
            "Type": 19,
            "Start": 35583,
            "Length": 455,
            "StartLine": 707,
            "StartColumn": 133,
            "EndLine": 713,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "bdcdd878-026d-4fe4-b043-0ec21fc7819e",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }",
            "Parent": "{\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Result": "Failed",
          "FailedCount": 5,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[-] Language-Specific Templates [-] Automation Triggers",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.1803866",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Language-Specific Templates [-] Automation Triggers",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:18.9358625-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0696061",
            "UserDuration": "00:00:02.1107805",
            "OwnDuration": "00:00:02.1803866",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    ",
            "StartLine": 639,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "143e92b1-db11-4f14-b6de-b37419abadd5",
            "Ast": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }"
          },
          "StartLine": 672,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 5,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 707,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should initialize documentation triggers",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Automation Triggers",
          "Should initialize documentation triggers"
        ],
        "Data": null,
        "ExpandedName": "Should initialize documentation triggers",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should initialize documentation triggers",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }",
            "Type": 19,
            "Start": 36246,
            "Length": 120,
            "StartLine": 718,
            "StartColumn": 131,
            "EndLine": 721,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "42b0d357-c9d2-427c-acb3-f1a0feab68c5",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }",
            "Parent": "{\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Automation Triggers",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Automation Triggers"
          ],
          "Data": null,
          "ExpandedName": "Automation Triggers",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers",
          "Blocks": [],
          "Tests": [
            "[-] Should initialize documentation triggers",
            "[-] Should log trigger activity"
          ],
          "Result": "Failed",
          "FailedCount": 2,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[-] Language-Specific Templates [-] Automation Triggers",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.1803866",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Language-Specific Templates [-] Automation Triggers",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:18.9358625-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0696061",
            "UserDuration": "00:00:02.1107805",
            "OwnDuration": "00:00:02.1803866",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    ",
            "StartLine": 639,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should initialize documentation triggers",
            "[-] Should log trigger activity"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "df14d535-23b7-48f4-bdf3-0b1419915eef",
            "Ast": "{\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }"
          },
          "StartLine": 716,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 2,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 718,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should log trigger activity",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Automation Triggers",
          "Should log trigger activity"
        ],
        "Data": null,
        "ExpandedName": "Should log trigger activity",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should log trigger activity",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }",
            "Type": 19,
            "Start": 36499,
            "Length": 557,
            "StartLine": 723,
            "StartColumn": 118,
            "EndLine": 736,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "bd1ab19b-ebaa-43c8-a3b6-226bc96015e1",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }",
            "Parent": "{\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Automation Triggers",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Automation Triggers"
          ],
          "Data": null,
          "ExpandedName": "Automation Triggers",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers",
          "Blocks": [],
          "Tests": [
            "[-] Should initialize documentation triggers",
            "[-] Should log trigger activity"
          ],
          "Result": "Failed",
          "FailedCount": 2,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[-] Language-Specific Templates [-] Automation Triggers",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.1803866",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Language-Specific Templates [-] Automation Triggers",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:18.9358625-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0696061",
            "UserDuration": "00:00:02.1107805",
            "OwnDuration": "00:00:02.1803866",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    ",
            "StartLine": 639,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should initialize documentation triggers",
            "[-] Should log trigger activity"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "df14d535-23b7-48f4-bdf3-0b1419915eef",
            "Ast": "{\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }"
          },
          "StartLine": 716,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 2,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 723,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should meet cache performance benchmarks",
        "Path": [
          "Enhanced Documentation System - Performance",
          "Cache Performance",
          "Should meet cache performance benchmarks"
        ],
        "Data": null,
        "ExpandedName": "Should meet cache performance benchmarks",
        "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should meet cache performance benchmarks",
        "Result": "Failed",
        "ErrorRecord": [
          {
            "Exception": "System.Management.Automation.CommandNotFoundException: The term 'New-PerformanceCache' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\n   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
            "TargetObject": "New-PerformanceCache",
            "CategoryInfo": "ObjectNotFound: (New-PerformanceCache:String) [], CommandNotFoundException",
            "FullyQualifiedErrorId": "CommandNotFoundException",
            "ErrorDetails": null,
            "InvocationInfo": "System.Management.Automation.InvocationInfo",
            "ScriptStackTrace": "at <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 789\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2157\r\nat Invoke-TestItem, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1199\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 835\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60",
            "PipelineIterationInfo": ""
          }
        ],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 632716,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 63,
          "Microseconds": 271,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 7.323101851851852E-07,
          "TotalHours": 1.7575444444444443E-05,
          "TotalMilliseconds": 63.2716,
          "TotalMicroseconds": 63271.6,
          "TotalNanoseconds": 63271600.0,
          "TotalMinutes": 0.0010545266666666666,
          "TotalSeconds": 0.0632716
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }",
            "Type": 19,
            "Start": 39944,
            "Length": 841,
            "StartLine": 788,
            "StartColumn": 122,
            "EndLine": 808,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "8a3da7a6-d704-4623-97cb-ef3eb93f03ce",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }",
            "Parent": "{\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Cache Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "Cache Performance"
          ],
          "Data": null,
          "ExpandedName": "Cache Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance",
          "Blocks": [],
          "Tests": [
            "[-] Should meet cache performance benchmarks",
            "[-] Should handle cache warming efficiently"
          ],
          "Result": "Failed",
          "FailedCount": 2,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 928866,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 92,
            "Microseconds": 886,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.0750763888888889E-06,
            "TotalHours": 2.5801833333333334E-05,
            "TotalMilliseconds": 92.8866,
            "TotalMicroseconds": 92886.6,
            "TotalNanoseconds": 92886600.0,
            "TotalMinutes": 0.00154811,
            "TotalSeconds": 0.0928866
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 3,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:04.0598124",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Passed": false,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:18.9458204-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1431616",
            "UserDuration": "00:00:03.9166508",
            "OwnDuration": "00:00:01.9589221",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 744,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should meet cache performance benchmarks",
            "[-] Should handle cache warming efficiently"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:18.9990364-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 387475,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 38,
            "Microseconds": 747,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.484664351851852E-07,
            "TotalHours": 1.0763194444444444E-05,
            "TotalMilliseconds": 38.7475,
            "TotalMicroseconds": 38747.5,
            "TotalNanoseconds": 38747500.0,
            "TotalMinutes": 0.0006457916666666667,
            "TotalSeconds": 0.0387475
          },
          "UserDuration": {
            "Ticks": 541391,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 54,
            "Microseconds": 139,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.266099537037037E-07,
            "TotalHours": 1.5038638888888888E-05,
            "TotalMilliseconds": 54.1391,
            "TotalMicroseconds": 54139.1,
            "TotalNanoseconds": 54139100.0,
            "TotalMinutes": 0.0009023183333333333,
            "TotalSeconds": 0.0541391
          },
          "OwnDuration": {
            "Ticks": 93128,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 9,
            "Microseconds": 312,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.0778703703703703E-07,
            "TotalHours": 2.5868888888888888E-06,
            "TotalMilliseconds": 9.3128,
            "TotalMicroseconds": 9312.8,
            "TotalNanoseconds": 9312800.0,
            "TotalMinutes": 0.00015521333333333334,
            "TotalSeconds": 0.0093128
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "680d5692-16b1-473f-9910-b69c7ac1bc63",
            "Ast": "{\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }"
          },
          "StartLine": 786,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 2,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 788,
        "Executed": true,
        "ExecutedAt": "2025-08-28T21:12:19.0041457-04:00",
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 386125,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 38,
          "Microseconds": 612,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.4690393518518516E-07,
          "TotalHours": 1.0725694444444445E-05,
          "TotalMilliseconds": 38.6125,
          "TotalMicroseconds": 38612.5,
          "TotalNanoseconds": 38612500.0,
          "TotalMinutes": 0.0006435416666666667,
          "TotalSeconds": 0.0386125
        },
        "FrameworkDuration": {
          "Ticks": 246591,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 24,
          "Microseconds": 659,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.8540625E-07,
          "TotalHours": 6.84975E-06,
          "TotalMilliseconds": 24.6591,
          "TotalMicroseconds": 24659.1,
          "TotalNanoseconds": 24659100.0,
          "TotalMinutes": 0.000410985,
          "TotalSeconds": 0.0246591
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should handle cache warming efficiently",
        "Path": [
          "Enhanced Documentation System - Performance",
          "Cache Performance",
          "Should handle cache warming efficiently"
        ],
        "Data": null,
        "ExpandedName": "Should handle cache warming efficiently",
        "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should handle cache warming efficiently",
        "Result": "Failed",
        "ErrorRecord": [
          {
            "Exception": "System.Management.Automation.CommandNotFoundException: The term 'New-PerformanceCache' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\n   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
            "TargetObject": "New-PerformanceCache",
            "CategoryInfo": "ObjectNotFound: (New-PerformanceCache:String) [], CommandNotFoundException",
            "FullyQualifiedErrorId": "CommandNotFoundException",
            "ErrorDetails": null,
            "InvocationInfo": "System.Management.Automation.InvocationInfo",
            "ScriptStackTrace": "at <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 811\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2157\r\nat Invoke-TestItem, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1199\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 835\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60",
            "PipelineIterationInfo": ""
          }
        ],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 203022,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 20,
          "Microseconds": 302,
          "Nanoseconds": 200,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.3497916666666667E-07,
          "TotalHours": 5.6395E-06,
          "TotalMilliseconds": 20.3022,
          "TotalMicroseconds": 20302.2,
          "TotalNanoseconds": 20302200.0,
          "TotalMinutes": 0.00033837,
          "TotalSeconds": 0.0203022
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }",
            "Type": 19,
            "Start": 40921,
            "Length": 640,
            "StartLine": 810,
            "StartColumn": 121,
            "EndLine": 821,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "4f33f43a-93d3-4472-a301-821f231a944b",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }",
            "Parent": "{\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Cache Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "Cache Performance"
          ],
          "Data": null,
          "ExpandedName": "Cache Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance",
          "Blocks": [],
          "Tests": [
            "[-] Should meet cache performance benchmarks",
            "[-] Should handle cache warming efficiently"
          ],
          "Result": "Failed",
          "FailedCount": 2,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 928866,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 92,
            "Microseconds": 886,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.0750763888888889E-06,
            "TotalHours": 2.5801833333333334E-05,
            "TotalMilliseconds": 92.8866,
            "TotalMicroseconds": 92886.6,
            "TotalNanoseconds": 92886600.0,
            "TotalMinutes": 0.00154811,
            "TotalSeconds": 0.0928866
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 3,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:04.0598124",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Passed": false,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:18.9458204-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1431616",
            "UserDuration": "00:00:03.9166508",
            "OwnDuration": "00:00:01.9589221",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 744,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should meet cache performance benchmarks",
            "[-] Should handle cache warming efficiently"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:18.9990364-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 387475,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 38,
            "Microseconds": 747,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.484664351851852E-07,
            "TotalHours": 1.0763194444444444E-05,
            "TotalMilliseconds": 38.7475,
            "TotalMicroseconds": 38747.5,
            "TotalNanoseconds": 38747500.0,
            "TotalMinutes": 0.0006457916666666667,
            "TotalSeconds": 0.0387475
          },
          "UserDuration": {
            "Ticks": 541391,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 54,
            "Microseconds": 139,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.266099537037037E-07,
            "TotalHours": 1.5038638888888888E-05,
            "TotalMilliseconds": 54.1391,
            "TotalMicroseconds": 54139.1,
            "TotalNanoseconds": 54139100.0,
            "TotalMinutes": 0.0009023183333333333,
            "TotalSeconds": 0.0541391
          },
          "OwnDuration": {
            "Ticks": 93128,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 9,
            "Microseconds": 312,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.0778703703703703E-07,
            "TotalHours": 2.5868888888888888E-06,
            "TotalMilliseconds": 9.3128,
            "TotalMicroseconds": 9312.8,
            "TotalNanoseconds": 9312800.0,
            "TotalMinutes": 0.00015521333333333334,
            "TotalSeconds": 0.0093128
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "680d5692-16b1-473f-9910-b69c7ac1bc63",
            "Ast": "{\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }"
          },
          "StartLine": 786,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 2,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 810,
        "Executed": true,
        "ExecutedAt": "2025-08-28T21:12:19.0668925-04:00",
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 152516,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 15,
          "Microseconds": 251,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.7652314814814816E-07,
          "TotalHours": 4.236555555555555E-06,
          "TotalMilliseconds": 15.2516,
          "TotalMicroseconds": 15251.6,
          "TotalNanoseconds": 15251600.0,
          "TotalMinutes": 0.0002541933333333333,
          "TotalSeconds": 0.0152516
        },
        "FrameworkDuration": {
          "Ticks": 50506,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 5,
          "Microseconds": 50,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.845601851851852E-08,
          "TotalHours": 1.4029444444444443E-06,
          "TotalMilliseconds": 5.0506,
          "TotalMicroseconds": 5050.6,
          "TotalNanoseconds": 5050600.0,
          "TotalMinutes": 8.417666666666667E-05,
          "TotalSeconds": 0.0050506
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should demonstrate parallel processing benefits",
        "Path": [
          "Enhanced Documentation System - Performance",
          "Parallel Processing Performance",
          "Should demonstrate parallel processing benefits"
        ],
        "Data": null,
        "ExpandedName": "Should demonstrate parallel processing benefits",
        "ExpandedPath": "Enhanced Documentation System - Performance.Parallel Processing Performance.Should demonstrate parallel processing benefits",
        "Result": "Failed",
        "ErrorRecord": [
          {
            "Exception": "System.Exception: Expected the actual value to be less than 404.4512, but got 719.7523.",
            "TargetObject": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "CategoryInfo": "InvalidResult: (System.Collections.…ring,System.Object]:Dictionary`2) [], Exception",
            "FullyQualifiedErrorId": "PesterAssertionFailed",
            "ErrorDetails": null,
            "InvocationInfo": "System.Management.Automation.InvocationInfo",
            "ScriptStackTrace": "at Invoke-Assertion, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 8250\r\nat Should<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 8193\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 929\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2157\r\nat Invoke-TestItem, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1199\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 835\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60",
            "PipelineIterationInfo": ""
          }
        ],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 15648034,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 564,
          "Microseconds": 803,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 1,
          "TotalDays": 1.8111150462962964E-05,
          "TotalHours": 0.0004346676111111111,
          "TotalMilliseconds": 1564.8034,
          "TotalMicroseconds": 1564803.4,
          "TotalNanoseconds": 1564803400.0,
          "TotalMinutes": 0.026080056666666667,
          "TotalSeconds": 1.5648034
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }",
            "Type": 19,
            "Start": 45589,
            "Length": 1070,
            "StartLine": 910,
            "StartColumn": 130,
            "EndLine": 930,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "e36acadb-c8c7-4ea3-ae89-1220fa9a62ce",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }",
            "Parent": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Parallel Processing Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "Parallel Processing Performance"
          ],
          "Data": null,
          "ExpandedName": "Parallel Processing Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.Parallel Processing Performance",
          "Blocks": [],
          "Tests": [
            "[-] Should demonstrate parallel processing benefits"
          ],
          "Result": "Failed",
          "FailedCount": 1,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 1,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 17899799,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 789,
            "Microseconds": 979,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 1,
            "TotalDays": 2.0717359953703703E-05,
            "TotalHours": 0.0004972166388888889,
            "TotalMilliseconds": 1789.9799,
            "TotalMicroseconds": 1789979.9,
            "TotalNanoseconds": 1789979900.0,
            "TotalMinutes": 0.029832998333333333,
            "TotalSeconds": 1.7899799
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 3,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:04.0598124",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Passed": false,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:18.9458204-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1431616",
            "UserDuration": "00:00:03.9166508",
            "OwnDuration": "00:00:01.9589221",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 744,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should demonstrate parallel processing benefits"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:19.217064-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 673140,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 67,
            "Microseconds": 314,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 7.790972222222222E-07,
            "TotalHours": 1.8698333333333334E-05,
            "TotalMilliseconds": 67.314,
            "TotalMicroseconds": 67314.0,
            "TotalNanoseconds": 67314000.0,
            "TotalMinutes": 0.0011219,
            "TotalSeconds": 0.067314
          },
          "UserDuration": {
            "Ticks": 17226659,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 722,
            "Microseconds": 665,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 1,
            "TotalDays": 1.9938262731481483E-05,
            "TotalHours": 0.00047851830555555556,
            "TotalMilliseconds": 1722.6659,
            "TotalMicroseconds": 1722665.9,
            "TotalNanoseconds": 1722665900.0,
            "TotalMinutes": 0.028711098333333334,
            "TotalSeconds": 1.7226659
          },
          "OwnDuration": {
            "Ticks": 2251765,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 225,
            "Microseconds": 176,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.606209490740741E-06,
            "TotalHours": 6.254902777777777E-05,
            "TotalMilliseconds": 225.1765,
            "TotalMicroseconds": 225176.5,
            "TotalNanoseconds": 225176500.0,
            "TotalMinutes": 0.003752941666666667,
            "TotalSeconds": 0.2251765
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "832d3e93-1055-49b0-b9a9-38481e82c6ab",
            "Ast": "{\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }"
          },
          "StartLine": 908,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 1,
          "OwnPassedCount": 0,
          "OwnFailedCount": 1,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 910,
        "Executed": true,
        "ExecutedAt": "2025-08-28T21:12:19.2188885-04:00",
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 15509523,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 550,
          "Microseconds": 952,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 1,
          "TotalDays": 1.7950836805555556E-05,
          "TotalHours": 0.00043082008333333334,
          "TotalMilliseconds": 1550.9523,
          "TotalMicroseconds": 1550952.3,
          "TotalNanoseconds": 1550952300.0,
          "TotalMinutes": 0.025849205,
          "TotalSeconds": 1.5509523
        },
        "FrameworkDuration": {
          "Ticks": 138511,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 13,
          "Microseconds": 851,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.603136574074074E-07,
          "TotalHours": 3.847527777777778E-06,
          "TotalMilliseconds": 13.8511,
          "TotalMicroseconds": 13851.1,
          "TotalNanoseconds": 13851100.0,
          "TotalMinutes": 0.00023085166666666666,
          "TotalSeconds": 0.0138511
        },
        "PluginData": null,
        "FrameworkData": null
      }
    ],
    "FailedBlocks": [
      {
        "Name": "Enhanced Documentation System - CPG Components",
        "Path": [
          "Enhanced Documentation System - CPG Components"
        ],
        "Data": null,
        "ExpandedName": "Enhanced Documentation System - CPG Components",
        "ExpandedPath": "Enhanced Documentation System - CPG Components",
        "Blocks": [
          {
            "Name": "Thread-Safe Operations",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations",
            "Data": null,
            "ExpandedName": "Thread-Safe Operations",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
            "Blocks": "",
            "Tests": "[-] Should create thread-safe CPG wrapper [-] Should handle concurrent operations safely [-] Should provide thread safety statistics",
            "Result": "Failed",
            "FailedCount": 3,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 3,
            "ErrorRecord": "",
            "Duration": "00:00:00",
            "Id": "",
            "GroupId": "",
            "Tag": "",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[-] Enhanced Documentation System - CPG Components",
            "EachTestSetup": null,
            "OneTimeTestSetup": null,
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Should create thread-safe CPG wrapper [-] Should handle concurrent operations safely [-] Should provide thread safety statistics",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": false,
            "ExecutedAt": "0001-01-01T00:00:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "UserDuration": "00:00:00",
            "OwnDuration": "00:00:00",
            "ScriptBlock": "\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        ",
            "StartLine": 352,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 3,
            "OwnPassedCount": 0,
            "OwnFailedCount": 3,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          {
            "Name": "Call Graph Builder",
            "Path": "Enhanced Documentation System - CPG Components Call Graph Builder",
            "Data": null,
            "ExpandedName": "Call Graph Builder",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder",
            "Blocks": "",
            "Tests": "[-] Should build call graphs from source code [-] Should detect recursive calls",
            "Result": "Failed",
            "FailedCount": 2,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 2,
            "ErrorRecord": "",
            "Duration": "00:00:00",
            "Id": "",
            "GroupId": "",
            "Tag": "",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[-] Enhanced Documentation System - CPG Components",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Should build call graphs from source code [-] Should detect recursive calls",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": false,
            "ExecutedAt": "0001-01-01T00:00:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "UserDuration": "00:00:00",
            "OwnDuration": "00:00:00",
            "ScriptBlock": "\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        ",
            "StartLine": 392,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 2,
            "OwnPassedCount": 0,
            "OwnFailedCount": 2,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          {
            "Name": "Data Flow Tracker",
            "Path": "Enhanced Documentation System - CPG Components Data Flow Tracker",
            "Data": null,
            "ExpandedName": "Data Flow Tracker",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker",
            "Blocks": "",
            "Tests": "[-] Should track variable definitions and uses [-] Should perform taint analysis",
            "Result": "Failed",
            "FailedCount": 2,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 2,
            "ErrorRecord": "",
            "Duration": "00:00:00",
            "Id": "",
            "GroupId": "",
            "Tag": "",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[-] Enhanced Documentation System - CPG Components",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Should track variable definitions and uses [-] Should perform taint analysis",
            "Passed": false,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": false,
            "ExecutedAt": "0001-01-01T00:00:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "UserDuration": "00:00:00",
            "OwnDuration": "00:00:00",
            "ScriptBlock": "\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        ",
            "StartLine": 439,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 2,
            "OwnPassedCount": 0,
            "OwnFailedCount": 2,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          }
        ],
        "Tests": [],
        "Result": "Failed",
        "FailedCount": 7,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 7,
        "ErrorRecord": [
          {
            "Exception": "System.Management.Automation.RuntimeException: Cannot index into a null array.\r\n   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
            "TargetObject": null,
            "CategoryInfo": "InvalidOperation: (:) [], RuntimeException",
            "FullyQualifiedErrorId": "NullArray",
            "ErrorDetails": null,
            "InvocationInfo": "System.Management.Automation.InvocationInfo",
            "ScriptStackTrace": "at <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 325\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1975\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60",
            "PipelineIterationInfo": ""
          }
        ],
        "Duration": {
          "Ticks": 725277,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 72,
          "Microseconds": 527,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 8.394409722222222E-07,
          "TotalHours": 2.0146583333333335E-05,
          "TotalMilliseconds": 72.5277,
          "TotalMicroseconds": 72527.7,
          "TotalNanoseconds": 72527700.0,
          "TotalMinutes": 0.001208795,
          "TotalSeconds": 0.0725277
        },
        "Id": "",
        "GroupId": "",
        "Tag": [
          "CPG",
          "Core"
        ],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:12:03.5268689-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:12:03.5268689Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 43374678,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 337,
            "Microseconds": 467,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.020217361111111E-05,
            "TotalHours": 0.0012048521666666668,
            "TotalMilliseconds": 4337.4678,
            "TotalMicroseconds": 4337467.8,
            "TotalNanoseconds": 4337467800.0,
            "TotalMinutes": 0.07229113,
            "TotalSeconds": 4.3374678
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_ae38e9fc-4db5-4172-8954-fe64e3e59e6d",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0c91d161-b6ae-41fa-9bfa-b03991a212ce",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1206408,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 120,
            "Microseconds": 640,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3963055555555556E-06,
            "TotalHours": 3.351133333333333E-05,
            "TotalMilliseconds": 120.6408,
            "TotalMicroseconds": 120640.8,
            "TotalNanoseconds": 120640800.0,
            "TotalMinutes": 0.00201068,
            "TotalSeconds": 0.1206408
          },
          "FrameworkDuration": {
            "Ticks": 2967369,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 296,
            "Microseconds": 736,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.434454861111111E-06,
            "TotalHours": 8.242691666666667E-05,
            "TotalMilliseconds": 296.7369,
            "TotalMicroseconds": 296736.9,
            "TotalNanoseconds": 296736900.0,
            "TotalMinutes": 0.004945615,
            "TotalSeconds": 0.2967369
          },
          "UserDuration": {
            "Ticks": 39200901,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 920,
            "Microseconds": 90,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 3,
            "TotalDays": 4.537141319444444E-05,
            "TotalHours": 0.0010889139166666666,
            "TotalMilliseconds": 3920.0901,
            "TotalMicroseconds": 3920090.1,
            "TotalNanoseconds": 3920090100.0,
            "TotalMinutes": 0.065334835,
            "TotalSeconds": 3.9200901
          },
          "OwnDuration": {
            "Ticks": -41456899,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -145,
            "Microseconds": -689,
            "Nanoseconds": -900,
            "Minutes": 0,
            "Seconds": -4,
            "TotalDays": -4.798252199074074E-05,
            "TotalHours": -0.0011515805277777778,
            "TotalMilliseconds": -4145.6899,
            "TotalMicroseconds": -4145689.9,
            "TotalNanoseconds": -4145689900.0,
            "TotalMinutes": -0.06909483166666666,
            "TotalSeconds": -4.1456899
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b503736c-5fd8-428d-abbc-2f1c83333ee5",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 43374678,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 337,
            "Microseconds": 467,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.020217361111111E-05,
            "TotalHours": 0.0012048521666666668,
            "TotalMilliseconds": 4337.4678,
            "TotalMicroseconds": 4337467.8,
            "TotalNanoseconds": 4337467800.0,
            "TotalMinutes": 0.07229113,
            "TotalSeconds": 4.3374678
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_ae38e9fc-4db5-4172-8954-fe64e3e59e6d",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0c91d161-b6ae-41fa-9bfa-b03991a212ce",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1206408,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 120,
            "Microseconds": 640,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3963055555555556E-06,
            "TotalHours": 3.351133333333333E-05,
            "TotalMilliseconds": 120.6408,
            "TotalMicroseconds": 120640.8,
            "TotalNanoseconds": 120640800.0,
            "TotalMinutes": 0.00201068,
            "TotalSeconds": 0.1206408
          },
          "FrameworkDuration": {
            "Ticks": 2967369,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 296,
            "Microseconds": 736,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.434454861111111E-06,
            "TotalHours": 8.242691666666667E-05,
            "TotalMilliseconds": 296.7369,
            "TotalMicroseconds": 296736.9,
            "TotalNanoseconds": 296736900.0,
            "TotalMinutes": 0.004945615,
            "TotalSeconds": 0.2967369
          },
          "UserDuration": {
            "Ticks": 39200901,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 920,
            "Microseconds": 90,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 3,
            "TotalDays": 4.537141319444444E-05,
            "TotalHours": 0.0010889139166666666,
            "TotalMilliseconds": 3920.0901,
            "TotalMicroseconds": 3920090.1,
            "TotalNanoseconds": 3920090100.0,
            "TotalMinutes": 0.065334835,
            "TotalSeconds": 3.9200901
          },
          "OwnDuration": {
            "Ticks": -41456899,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -145,
            "Microseconds": -689,
            "Nanoseconds": -900,
            "Minutes": 0,
            "Seconds": -4,
            "TotalDays": -4.798252199074074E-05,
            "TotalHours": -0.0011515805277777778,
            "TotalMilliseconds": -4145.6899,
            "TotalMicroseconds": -4145689.9,
            "TotalNanoseconds": -4145689900.0,
            "TotalMinutes": -0.06909483166666666,
            "TotalSeconds": -4.1456899
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b503736c-5fd8-428d-abbc-2f1c83333ee5",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }",
            "Type": 19,
            "Start": 13313,
            "Length": 3913,
            "StartLine": 293,
            "StartColumn": 19,
            "EndLine": 350,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "e1fced62-6ff5-4cd8-a453-3d5c58d73688",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }",
            "Parent": "{\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }"
          }
        },
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Thread-Safe Operations",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations",
            "Data": null,
            "ExpandedName": "Thread-Safe Operations",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
            "Blocks": "",
            "Tests": "[-] Should create thread-safe CPG wrapper [-] Should handle concurrent operations safely [-] Should provide thread safety statistics",
            "Result": "Failed",
            "FailedCount": 3,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 3,
            "ErrorRecord": "",
            "Duration": "00:00:00",
            "Id": "",
            "GroupId": "",
            "Tag": "",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[-] Enhanced Documentation System - CPG Components",
            "EachTestSetup": null,
            "OneTimeTestSetup": null,
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Should create thread-safe CPG wrapper [-] Should handle concurrent operations safely [-] Should provide thread safety statistics",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": false,
            "ExecutedAt": "0001-01-01T00:00:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "UserDuration": "00:00:00",
            "OwnDuration": "00:00:00",
            "ScriptBlock": "\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        ",
            "StartLine": 352,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 3,
            "OwnPassedCount": 0,
            "OwnFailedCount": 3,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          {
            "Name": "Call Graph Builder",
            "Path": "Enhanced Documentation System - CPG Components Call Graph Builder",
            "Data": null,
            "ExpandedName": "Call Graph Builder",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder",
            "Blocks": "",
            "Tests": "[-] Should build call graphs from source code [-] Should detect recursive calls",
            "Result": "Failed",
            "FailedCount": 2,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 2,
            "ErrorRecord": "",
            "Duration": "00:00:00",
            "Id": "",
            "GroupId": "",
            "Tag": "",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[-] Enhanced Documentation System - CPG Components",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Should build call graphs from source code [-] Should detect recursive calls",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": false,
            "ExecutedAt": "0001-01-01T00:00:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "UserDuration": "00:00:00",
            "OwnDuration": "00:00:00",
            "ScriptBlock": "\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        ",
            "StartLine": 392,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 2,
            "OwnPassedCount": 0,
            "OwnFailedCount": 2,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          {
            "Name": "Data Flow Tracker",
            "Path": "Enhanced Documentation System - CPG Components Data Flow Tracker",
            "Data": null,
            "ExpandedName": "Data Flow Tracker",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker",
            "Blocks": "",
            "Tests": "[-] Should track variable definitions and uses [-] Should perform taint analysis",
            "Result": "Failed",
            "FailedCount": 2,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 2,
            "ErrorRecord": "",
            "Duration": "00:00:00",
            "Id": "",
            "GroupId": "",
            "Tag": "",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[-] Enhanced Documentation System - CPG Components",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Should track variable definitions and uses [-] Should perform taint analysis",
            "Passed": false,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": false,
            "ExecutedAt": "0001-01-01T00:00:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "UserDuration": "00:00:00",
            "OwnDuration": "00:00:00",
            "ScriptBlock": "\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        ",
            "StartLine": 439,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 2,
            "OwnPassedCount": 0,
            "OwnFailedCount": 2,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          }
        ],
        "Passed": false,
        "First": true,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": true,
        "ExecutedAt": "2025-08-28T21:12:16.7654217-04:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 537485,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 53,
          "Microseconds": 748,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.220891203703704E-07,
          "TotalHours": 1.4930138888888889E-05,
          "TotalMilliseconds": 53.7485,
          "TotalMicroseconds": 53748.5,
          "TotalNanoseconds": 53748500.0,
          "TotalMinutes": 0.0008958083333333334,
          "TotalSeconds": 0.0537485
        },
        "UserDuration": {
          "Ticks": 187792,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 18,
          "Microseconds": 779,
          "Nanoseconds": 200,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.1735185185185184E-07,
          "TotalHours": 5.2164444444444446E-06,
          "TotalMilliseconds": 18.7792,
          "TotalMicroseconds": 18779.2,
          "TotalNanoseconds": 18779200.0,
          "TotalMinutes": 0.00031298666666666666,
          "TotalSeconds": 0.0187792
        },
        "OwnDuration": {
          "Ticks": 725277,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 72,
          "Microseconds": 527,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 8.394409722222222E-07,
          "TotalHours": 2.0146583333333335E-05,
          "TotalMilliseconds": 72.5277,
          "TotalMicroseconds": 72527.7,
          "TotalNanoseconds": 72527700.0,
          "TotalMinutes": 0.001208795,
          "TotalSeconds": 0.0725277
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    }",
            "Type": 19,
            "Start": 13179,
            "Length": 9631,
            "StartLine": 290,
            "StartColumn": 78,
            "EndLine": 474,
            "EndColumn": 6
          },
          "DebuggerHidden": false,
          "Id": "4f6d5987-259d-4a4d-b35f-8b09077ef656",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    }",
            "Parent": "{\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    }"
          }
        },
        "StartLine": 290,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 0,
        "OwnPassedCount": 0,
        "OwnFailedCount": 0,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      {
        "Name": "Enhanced Documentation System - LLM Integration",
        "Path": [
          "Enhanced Documentation System - LLM Integration"
        ],
        "Data": null,
        "ExpandedName": "Enhanced Documentation System - LLM Integration",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration",
        "Blocks": [
          {
            "Name": "Ollama API Integration",
            "Path": "Enhanced Documentation System - LLM Integration Ollama API Integration",
            "Data": null,
            "ExpandedName": "Ollama API Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration",
            "Blocks": "",
            "Tests": "[-] Should connect to Ollama service [-] Should list available models [-] Should generate responses for code analysis",
            "Result": "Skipped",
            "FailedCount": 3,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 3,
            "ErrorRecord": "",
            "Duration": "00:00:00",
            "Id": "",
            "GroupId": "",
            "Tag": "",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[-] Enhanced Documentation System - LLM Integration",
            "EachTestSetup": null,
            "OneTimeTestSetup": null,
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Should connect to Ollama service [-] Should list available models [-] Should generate responses for code analysis",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": false,
            "ExecutedAt": "0001-01-01T00:00:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "UserDuration": "00:00:00",
            "OwnDuration": "00:00:00",
            "ScriptBlock": "\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        ",
            "StartLine": 525,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 3,
            "OwnPassedCount": 0,
            "OwnFailedCount": 3,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          {
            "Name": "Prompt Templates",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates",
            "Data": null,
            "ExpandedName": "Prompt Templates",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
            "Blocks": "",
            "Tests": "[-] Should create function documentation prompts [-] Should create module documentation prompts [-] Should support variable substitution",
            "Result": "Failed",
            "FailedCount": 3,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 3,
            "ErrorRecord": "",
            "Duration": "00:00:00",
            "Id": "",
            "GroupId": "",
            "Tag": "",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[-] Enhanced Documentation System - LLM Integration",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Should create function documentation prompts [-] Should create module documentation prompts [-] Should support variable substitution",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": false,
            "ExecutedAt": "0001-01-01T00:00:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "UserDuration": "00:00:00",
            "OwnDuration": "00:00:00",
            "ScriptBlock": "\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        ",
            "StartLine": 553,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 3,
            "OwnPassedCount": 0,
            "OwnFailedCount": 3,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          {
            "Name": "Response Cache",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache",
            "Data": null,
            "ExpandedName": "Response Cache",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
            "Blocks": "",
            "Tests": "[-] Should cache and retrieve responses [-] Should handle TTL expiration [-] Should provide cache statistics",
            "Result": "Failed",
            "FailedCount": 3,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 3,
            "ErrorRecord": "",
            "Duration": "00:00:00",
            "Id": "",
            "GroupId": "",
            "Tag": "",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[-] Enhanced Documentation System - LLM Integration",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Should cache and retrieve responses [-] Should handle TTL expiration [-] Should provide cache statistics",
            "Passed": false,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": false,
            "ExecutedAt": "0001-01-01T00:00:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "UserDuration": "00:00:00",
            "OwnDuration": "00:00:00",
            "ScriptBlock": "\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        ",
            "StartLine": 591,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 3,
            "OwnPassedCount": 0,
            "OwnFailedCount": 3,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          }
        ],
        "Tests": [],
        "Result": "Failed",
        "FailedCount": 9,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 9,
        "ErrorRecord": [
          {
            "Exception": "System.Management.Automation.RuntimeException: Cannot index into a null array.\r\n   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
            "TargetObject": null,
            "CategoryInfo": "InvalidOperation: (:) [], RuntimeException",
            "FullyQualifiedErrorId": "NullArray",
            "ErrorDetails": null,
            "InvocationInfo": "System.Management.Automation.InvocationInfo",
            "ScriptStackTrace": "at <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 510\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1975\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60",
            "PipelineIterationInfo": ""
          }
        ],
        "Duration": {
          "Ticks": 21704310,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 170,
          "Microseconds": 431,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 2,
          "TotalDays": 2.5120729166666666E-05,
          "TotalHours": 0.0006028975,
          "TotalMilliseconds": 2170.431,
          "TotalMicroseconds": 2170431.0,
          "TotalNanoseconds": 2170431000.0,
          "TotalMinutes": 0.03617385,
          "TotalSeconds": 2.170431
        },
        "Id": "",
        "GroupId": "",
        "Tag": [
          "LLM",
          "Integration"
        ],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:12:03.5268689-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:12:03.5268689Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 43374678,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 337,
            "Microseconds": 467,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.020217361111111E-05,
            "TotalHours": 0.0012048521666666668,
            "TotalMilliseconds": 4337.4678,
            "TotalMicroseconds": 4337467.8,
            "TotalNanoseconds": 4337467800.0,
            "TotalMinutes": 0.07229113,
            "TotalSeconds": 4.3374678
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_ae38e9fc-4db5-4172-8954-fe64e3e59e6d",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0c91d161-b6ae-41fa-9bfa-b03991a212ce",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1206408,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 120,
            "Microseconds": 640,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3963055555555556E-06,
            "TotalHours": 3.351133333333333E-05,
            "TotalMilliseconds": 120.6408,
            "TotalMicroseconds": 120640.8,
            "TotalNanoseconds": 120640800.0,
            "TotalMinutes": 0.00201068,
            "TotalSeconds": 0.1206408
          },
          "FrameworkDuration": {
            "Ticks": 2967369,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 296,
            "Microseconds": 736,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.434454861111111E-06,
            "TotalHours": 8.242691666666667E-05,
            "TotalMilliseconds": 296.7369,
            "TotalMicroseconds": 296736.9,
            "TotalNanoseconds": 296736900.0,
            "TotalMinutes": 0.004945615,
            "TotalSeconds": 0.2967369
          },
          "UserDuration": {
            "Ticks": 39200901,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 920,
            "Microseconds": 90,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 3,
            "TotalDays": 4.537141319444444E-05,
            "TotalHours": 0.0010889139166666666,
            "TotalMilliseconds": 3920.0901,
            "TotalMicroseconds": 3920090.1,
            "TotalNanoseconds": 3920090100.0,
            "TotalMinutes": 0.065334835,
            "TotalSeconds": 3.9200901
          },
          "OwnDuration": {
            "Ticks": -41456899,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -145,
            "Microseconds": -689,
            "Nanoseconds": -900,
            "Minutes": 0,
            "Seconds": -4,
            "TotalDays": -4.798252199074074E-05,
            "TotalHours": -0.0011515805277777778,
            "TotalMilliseconds": -4145.6899,
            "TotalMicroseconds": -4145689.9,
            "TotalNanoseconds": -4145689900.0,
            "TotalMinutes": -0.06909483166666666,
            "TotalSeconds": -4.1456899
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b503736c-5fd8-428d-abbc-2f1c83333ee5",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 43374678,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 337,
            "Microseconds": 467,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.020217361111111E-05,
            "TotalHours": 0.0012048521666666668,
            "TotalMilliseconds": 4337.4678,
            "TotalMicroseconds": 4337467.8,
            "TotalNanoseconds": 4337467800.0,
            "TotalMinutes": 0.07229113,
            "TotalSeconds": 4.3374678
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_ae38e9fc-4db5-4172-8954-fe64e3e59e6d",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0c91d161-b6ae-41fa-9bfa-b03991a212ce",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1206408,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 120,
            "Microseconds": 640,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3963055555555556E-06,
            "TotalHours": 3.351133333333333E-05,
            "TotalMilliseconds": 120.6408,
            "TotalMicroseconds": 120640.8,
            "TotalNanoseconds": 120640800.0,
            "TotalMinutes": 0.00201068,
            "TotalSeconds": 0.1206408
          },
          "FrameworkDuration": {
            "Ticks": 2967369,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 296,
            "Microseconds": 736,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.434454861111111E-06,
            "TotalHours": 8.242691666666667E-05,
            "TotalMilliseconds": 296.7369,
            "TotalMicroseconds": 296736.9,
            "TotalNanoseconds": 296736900.0,
            "TotalMinutes": 0.004945615,
            "TotalSeconds": 0.2967369
          },
          "UserDuration": {
            "Ticks": 39200901,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 920,
            "Microseconds": 90,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 3,
            "TotalDays": 4.537141319444444E-05,
            "TotalHours": 0.0010889139166666666,
            "TotalMilliseconds": 3920.0901,
            "TotalMicroseconds": 3920090.1,
            "TotalNanoseconds": 3920090100.0,
            "TotalMinutes": 0.065334835,
            "TotalSeconds": 3.9200901
          },
          "OwnDuration": {
            "Ticks": -41456899,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -145,
            "Microseconds": -689,
            "Nanoseconds": -900,
            "Minutes": 0,
            "Seconds": -4,
            "TotalDays": -4.798252199074074E-05,
            "TotalHours": -0.0011515805277777778,
            "TotalMilliseconds": -4145.6899,
            "TotalMicroseconds": -4145689.9,
            "TotalNanoseconds": -4145689900.0,
            "TotalMinutes": -0.06909483166666666,
            "TotalSeconds": -4.1456899
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b503736c-5fd8-428d-abbc-2f1c83333ee5",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 23080,
            "Length": 2290,
            "StartLine": 483,
            "StartColumn": 19,
            "EndLine": 523,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "b746f930-7e6b-4fba-a60d-121f3a577b69",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }"
          }
        },
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Ollama API Integration",
            "Path": "Enhanced Documentation System - LLM Integration Ollama API Integration",
            "Data": null,
            "ExpandedName": "Ollama API Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration",
            "Blocks": "",
            "Tests": "[-] Should connect to Ollama service [-] Should list available models [-] Should generate responses for code analysis",
            "Result": "Skipped",
            "FailedCount": 3,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 3,
            "ErrorRecord": "",
            "Duration": "00:00:00",
            "Id": "",
            "GroupId": "",
            "Tag": "",
            "Focus": false,
            "Skip": true,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[-] Enhanced Documentation System - LLM Integration",
            "EachTestSetup": null,
            "OneTimeTestSetup": null,
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Should connect to Ollama service [-] Should list available models [-] Should generate responses for code analysis",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": false,
            "ExecutedAt": "0001-01-01T00:00:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "UserDuration": "00:00:00",
            "OwnDuration": "00:00:00",
            "ScriptBlock": "\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        ",
            "StartLine": 525,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 3,
            "OwnPassedCount": 0,
            "OwnFailedCount": 3,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          {
            "Name": "Prompt Templates",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates",
            "Data": null,
            "ExpandedName": "Prompt Templates",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
            "Blocks": "",
            "Tests": "[-] Should create function documentation prompts [-] Should create module documentation prompts [-] Should support variable substitution",
            "Result": "Failed",
            "FailedCount": 3,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 3,
            "ErrorRecord": "",
            "Duration": "00:00:00",
            "Id": "",
            "GroupId": "",
            "Tag": "",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[-] Enhanced Documentation System - LLM Integration",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Should create function documentation prompts [-] Should create module documentation prompts [-] Should support variable substitution",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": false,
            "ExecutedAt": "0001-01-01T00:00:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "UserDuration": "00:00:00",
            "OwnDuration": "00:00:00",
            "ScriptBlock": "\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        ",
            "StartLine": 553,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 3,
            "OwnPassedCount": 0,
            "OwnFailedCount": 3,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          {
            "Name": "Response Cache",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache",
            "Data": null,
            "ExpandedName": "Response Cache",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
            "Blocks": "",
            "Tests": "[-] Should cache and retrieve responses [-] Should handle TTL expiration [-] Should provide cache statistics",
            "Result": "Failed",
            "FailedCount": 3,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 3,
            "ErrorRecord": "",
            "Duration": "00:00:00",
            "Id": "",
            "GroupId": "",
            "Tag": "",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[-] Enhanced Documentation System - LLM Integration",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Should cache and retrieve responses [-] Should handle TTL expiration [-] Should provide cache statistics",
            "Passed": false,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": false,
            "ExecutedAt": "0001-01-01T00:00:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "UserDuration": "00:00:00",
            "OwnDuration": "00:00:00",
            "ScriptBlock": "\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        ",
            "StartLine": 591,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 3,
            "OwnPassedCount": 0,
            "OwnFailedCount": 3,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          }
        ],
        "Passed": false,
        "First": false,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": true,
        "ExecutedAt": "2025-08-28T21:12:16.8379525-04:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 614595,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 61,
          "Microseconds": 459,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 7.113368055555555E-07,
          "TotalHours": 1.7072083333333332E-05,
          "TotalMilliseconds": 61.4595,
          "TotalMicroseconds": 61459.5,
          "TotalNanoseconds": 61459500.0,
          "TotalMinutes": 0.001024325,
          "TotalSeconds": 0.0614595
        },
        "UserDuration": {
          "Ticks": 21089715,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 108,
          "Microseconds": 971,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 2,
          "TotalDays": 2.440939236111111E-05,
          "TotalHours": 0.0005858254166666667,
          "TotalMilliseconds": 2108.9715,
          "TotalMicroseconds": 2108971.5,
          "TotalNanoseconds": 2108971500.0,
          "TotalMinutes": 0.035149525,
          "TotalSeconds": 2.1089715
        },
        "OwnDuration": {
          "Ticks": 21704310,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 170,
          "Microseconds": 431,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 2,
          "TotalDays": 2.5120729166666666E-05,
          "TotalHours": 0.0006028975,
          "TotalMilliseconds": 2170.431,
          "TotalMicroseconds": 2170431.0,
          "TotalNanoseconds": 2170431000.0,
          "TotalMinutes": 0.03617385,
          "TotalSeconds": 2.170431
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    }",
            "Type": 19,
            "Start": 22946,
            "Length": 8011,
            "StartLine": 480,
            "StartColumn": 86,
            "EndLine": 633,
            "EndColumn": 6
          },
          "DebuggerHidden": false,
          "Id": "8f73dcf0-2fdd-4fde-8632-627345783476",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    }",
            "Parent": "{\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    }"
          }
        },
        "StartLine": 480,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 0,
        "OwnPassedCount": 0,
        "OwnFailedCount": 0,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      {
        "Name": "Enhanced Documentation System - Templates & Automation",
        "Path": [
          "Enhanced Documentation System - Templates & Automation"
        ],
        "Data": null,
        "ExpandedName": "Enhanced Documentation System - Templates & Automation",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
        "Blocks": [
          {
            "Name": "Language-Specific Templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates",
            "Data": null,
            "ExpandedName": "Language-Specific Templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
            "Blocks": "",
            "Tests": "[-] Should generate PowerShell documentation templates [-] Should generate Python documentation templates [-] Should generate C# documentation templates [-] Should generate JavaScript documentation templates [-] Should detect language from file extensions",
            "Result": "Failed",
            "FailedCount": 5,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:00",
            "Id": "",
            "GroupId": "",
            "Tag": "",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[-] Enhanced Documentation System - Templates & Automation",
            "EachTestSetup": null,
            "OneTimeTestSetup": null,
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Should generate PowerShell documentation templates [-] Should generate Python documentation templates [-] Should generate C# documentation templates [-] Should generate JavaScript documentation templates [-] Should detect language from file extensions",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": false,
            "ExecutedAt": "0001-01-01T00:00:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "UserDuration": "00:00:00",
            "OwnDuration": "00:00:00",
            "ScriptBlock": "\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        ",
            "StartLine": 672,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 5,
            "OwnPassedCount": 0,
            "OwnFailedCount": 5,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          {
            "Name": "Automation Triggers",
            "Path": "Enhanced Documentation System - Templates & Automation Automation Triggers",
            "Data": null,
            "ExpandedName": "Automation Triggers",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers",
            "Blocks": "",
            "Tests": "[-] Should initialize documentation triggers [-] Should log trigger activity",
            "Result": "Failed",
            "FailedCount": 2,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 2,
            "ErrorRecord": "",
            "Duration": "00:00:00",
            "Id": "",
            "GroupId": "",
            "Tag": "",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[-] Enhanced Documentation System - Templates & Automation",
            "EachTestSetup": null,
            "OneTimeTestSetup": null,
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Should initialize documentation triggers [-] Should log trigger activity",
            "Passed": false,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": false,
            "ExecutedAt": "0001-01-01T00:00:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "UserDuration": "00:00:00",
            "OwnDuration": "00:00:00",
            "ScriptBlock": "\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        ",
            "StartLine": 716,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 2,
            "OwnPassedCount": 0,
            "OwnFailedCount": 2,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          }
        ],
        "Tests": [],
        "Result": "Failed",
        "FailedCount": 7,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 7,
        "ErrorRecord": [
          {
            "Exception": "System.Management.Automation.RuntimeException: Cannot index into a null array.\r\n   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
            "TargetObject": null,
            "CategoryInfo": "InvalidOperation: (:) [], RuntimeException",
            "FullyQualifiedErrorId": "NullArray",
            "ErrorDetails": null,
            "InvocationInfo": "System.Management.Automation.InvocationInfo",
            "ScriptStackTrace": "at <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 657\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1975\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60",
            "PipelineIterationInfo": ""
          }
        ],
        "Duration": {
          "Ticks": 21803866,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 180,
          "Microseconds": 386,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 2,
          "TotalDays": 2.523595601851852E-05,
          "TotalHours": 0.0006056629444444444,
          "TotalMilliseconds": 2180.3866,
          "TotalMicroseconds": 2180386.6,
          "TotalNanoseconds": 2180386600.0,
          "TotalMinutes": 0.036339776666666664,
          "TotalSeconds": 2.1803866
        },
        "Id": "",
        "GroupId": "",
        "Tag": [
          "Templates",
          "Automation"
        ],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:12:03.5268689-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:12:03.5268689Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 43374678,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 337,
            "Microseconds": 467,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.020217361111111E-05,
            "TotalHours": 0.0012048521666666668,
            "TotalMilliseconds": 4337.4678,
            "TotalMicroseconds": 4337467.8,
            "TotalNanoseconds": 4337467800.0,
            "TotalMinutes": 0.07229113,
            "TotalSeconds": 4.3374678
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_ae38e9fc-4db5-4172-8954-fe64e3e59e6d",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0c91d161-b6ae-41fa-9bfa-b03991a212ce",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1206408,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 120,
            "Microseconds": 640,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3963055555555556E-06,
            "TotalHours": 3.351133333333333E-05,
            "TotalMilliseconds": 120.6408,
            "TotalMicroseconds": 120640.8,
            "TotalNanoseconds": 120640800.0,
            "TotalMinutes": 0.00201068,
            "TotalSeconds": 0.1206408
          },
          "FrameworkDuration": {
            "Ticks": 2967369,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 296,
            "Microseconds": 736,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.434454861111111E-06,
            "TotalHours": 8.242691666666667E-05,
            "TotalMilliseconds": 296.7369,
            "TotalMicroseconds": 296736.9,
            "TotalNanoseconds": 296736900.0,
            "TotalMinutes": 0.004945615,
            "TotalSeconds": 0.2967369
          },
          "UserDuration": {
            "Ticks": 39200901,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 920,
            "Microseconds": 90,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 3,
            "TotalDays": 4.537141319444444E-05,
            "TotalHours": 0.0010889139166666666,
            "TotalMilliseconds": 3920.0901,
            "TotalMicroseconds": 3920090.1,
            "TotalNanoseconds": 3920090100.0,
            "TotalMinutes": 0.065334835,
            "TotalSeconds": 3.9200901
          },
          "OwnDuration": {
            "Ticks": -41456899,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -145,
            "Microseconds": -689,
            "Nanoseconds": -900,
            "Minutes": 0,
            "Seconds": -4,
            "TotalDays": -4.798252199074074E-05,
            "TotalHours": -0.0011515805277777778,
            "TotalMilliseconds": -4145.6899,
            "TotalMicroseconds": -4145689.9,
            "TotalNanoseconds": -4145689900.0,
            "TotalMinutes": -0.06909483166666666,
            "TotalSeconds": -4.1456899
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b503736c-5fd8-428d-abbc-2f1c83333ee5",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 43374678,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 337,
            "Microseconds": 467,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.020217361111111E-05,
            "TotalHours": 0.0012048521666666668,
            "TotalMilliseconds": 4337.4678,
            "TotalMicroseconds": 4337467.8,
            "TotalNanoseconds": 4337467800.0,
            "TotalMinutes": 0.07229113,
            "TotalSeconds": 4.3374678
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_ae38e9fc-4db5-4172-8954-fe64e3e59e6d",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0c91d161-b6ae-41fa-9bfa-b03991a212ce",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1206408,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 120,
            "Microseconds": 640,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3963055555555556E-06,
            "TotalHours": 3.351133333333333E-05,
            "TotalMilliseconds": 120.6408,
            "TotalMicroseconds": 120640.8,
            "TotalNanoseconds": 120640800.0,
            "TotalMinutes": 0.00201068,
            "TotalSeconds": 0.1206408
          },
          "FrameworkDuration": {
            "Ticks": 2967369,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 296,
            "Microseconds": 736,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.434454861111111E-06,
            "TotalHours": 8.242691666666667E-05,
            "TotalMilliseconds": 296.7369,
            "TotalMicroseconds": 296736.9,
            "TotalNanoseconds": 296736900.0,
            "TotalMinutes": 0.004945615,
            "TotalSeconds": 0.2967369
          },
          "UserDuration": {
            "Ticks": 39200901,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 920,
            "Microseconds": 90,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 3,
            "TotalDays": 4.537141319444444E-05,
            "TotalHours": 0.0010889139166666666,
            "TotalMilliseconds": 3920.0901,
            "TotalMicroseconds": 3920090.1,
            "TotalNanoseconds": 3920090100.0,
            "TotalMinutes": 0.065334835,
            "TotalSeconds": 3.9200901
          },
          "OwnDuration": {
            "Ticks": -41456899,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -145,
            "Microseconds": -689,
            "Nanoseconds": -900,
            "Minutes": 0,
            "Seconds": -4,
            "TotalDays": -4.798252199074074E-05,
            "TotalHours": -0.0011515805277777778,
            "TotalMilliseconds": -4145.6899,
            "TotalMicroseconds": -4145689.9,
            "TotalNanoseconds": -4145689900.0,
            "TotalMinutes": -0.06909483166666666,
            "TotalSeconds": -4.1456899
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b503736c-5fd8-428d-abbc-2f1c83333ee5",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 31260,
            "Length": 1890,
            "StartLine": 642,
            "StartColumn": 19,
            "EndLine": 670,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "d4ef720c-cc2a-4f42-b95e-f7e2182d13b0",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }"
          }
        },
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Language-Specific Templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates",
            "Data": null,
            "ExpandedName": "Language-Specific Templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
            "Blocks": "",
            "Tests": "[-] Should generate PowerShell documentation templates [-] Should generate Python documentation templates [-] Should generate C# documentation templates [-] Should generate JavaScript documentation templates [-] Should detect language from file extensions",
            "Result": "Failed",
            "FailedCount": 5,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:00",
            "Id": "",
            "GroupId": "",
            "Tag": "",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[-] Enhanced Documentation System - Templates & Automation",
            "EachTestSetup": null,
            "OneTimeTestSetup": null,
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Should generate PowerShell documentation templates [-] Should generate Python documentation templates [-] Should generate C# documentation templates [-] Should generate JavaScript documentation templates [-] Should detect language from file extensions",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": false,
            "ExecutedAt": "0001-01-01T00:00:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "UserDuration": "00:00:00",
            "OwnDuration": "00:00:00",
            "ScriptBlock": "\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        ",
            "StartLine": 672,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 5,
            "OwnPassedCount": 0,
            "OwnFailedCount": 5,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          {
            "Name": "Automation Triggers",
            "Path": "Enhanced Documentation System - Templates & Automation Automation Triggers",
            "Data": null,
            "ExpandedName": "Automation Triggers",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers",
            "Blocks": "",
            "Tests": "[-] Should initialize documentation triggers [-] Should log trigger activity",
            "Result": "Failed",
            "FailedCount": 2,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 2,
            "ErrorRecord": "",
            "Duration": "00:00:00",
            "Id": "",
            "GroupId": "",
            "Tag": "",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[-] Enhanced Documentation System - Templates & Automation",
            "EachTestSetup": null,
            "OneTimeTestSetup": null,
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Should initialize documentation triggers [-] Should log trigger activity",
            "Passed": false,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": false,
            "ExecutedAt": "0001-01-01T00:00:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "UserDuration": "00:00:00",
            "OwnDuration": "00:00:00",
            "ScriptBlock": "\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        ",
            "StartLine": 716,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 2,
            "OwnPassedCount": 0,
            "OwnFailedCount": 2,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          }
        ],
        "Passed": false,
        "First": false,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": true,
        "ExecutedAt": "2025-08-28T21:12:18.9358625-04:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 696061,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 69,
          "Microseconds": 606,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 8.056261574074074E-07,
          "TotalHours": 1.933502777777778E-05,
          "TotalMilliseconds": 69.6061,
          "TotalMicroseconds": 69606.1,
          "TotalNanoseconds": 69606100.0,
          "TotalMinutes": 0.0011601016666666667,
          "TotalSeconds": 0.0696061
        },
        "UserDuration": {
          "Ticks": 21107805,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 110,
          "Microseconds": 780,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 2,
          "TotalDays": 2.443032986111111E-05,
          "TotalHours": 0.0005863279166666667,
          "TotalMilliseconds": 2110.7805,
          "TotalMicroseconds": 2110780.5,
          "TotalNanoseconds": 2110780500.0,
          "TotalMinutes": 0.035179675,
          "TotalSeconds": 2.1107805
        },
        "OwnDuration": {
          "Ticks": 21803866,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 180,
          "Microseconds": 386,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 2,
          "TotalDays": 2.523595601851852E-05,
          "TotalHours": 0.0006056629444444444,
          "TotalMilliseconds": 2180.3866,
          "TotalMicroseconds": 2180386.6,
          "TotalNanoseconds": 2180386600.0,
          "TotalMinutes": 0.036339776666666664,
          "TotalSeconds": 2.1803866
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    }",
            "Type": 19,
            "Start": 31114,
            "Length": 5960,
            "StartLine": 639,
            "StartColumn": 98,
            "EndLine": 738,
            "EndColumn": 6
          },
          "DebuggerHidden": false,
          "Id": "830c44a9-083f-4190-95c0-f1c48f479e68",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    }",
            "Parent": "{\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    }"
          }
        },
        "StartLine": 639,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 0,
        "OwnPassedCount": 0,
        "OwnFailedCount": 0,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      }
    ],
    "FailedContainers": [],
    "Passed": [
      {
        "Name": "Should process files at 100+ files per second",
        "Path": [
          "Enhanced Documentation System - Performance",
          "File Processing Performance",
          "Should process files at 100+ files per second"
        ],
        "Data": null,
        "ExpandedName": "Should process files at 100+ files per second",
        "ExpandedPath": "Enhanced Documentation System - Performance.File Processing Performance.Should process files at 100+ files per second",
        "Result": "Passed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 652409,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 65,
          "Microseconds": 240,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 7.551030092592593E-07,
          "TotalHours": 1.8122472222222222E-05,
          "TotalMilliseconds": 65.2409,
          "TotalMicroseconds": 65240.9,
          "TotalNanoseconds": 65240900.0,
          "TotalMinutes": 0.0010873483333333333,
          "TotalSeconds": 0.0652409
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }",
            "Type": 19,
            "Start": 42906,
            "Length": 1371,
            "StartLine": 857,
            "StartColumn": 64,
            "EndLine": 882,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "6f5e1b8f-caf2-41cb-b2b7-a8511dc09ffe",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }",
            "Parent": "{\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "File Processing Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "File Processing Performance"
          ],
          "Data": null,
          "ExpandedName": "File Processing Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.File Processing Performance",
          "Blocks": [],
          "Tests": [
            "[+] Should process files at 100+ files per second",
            "[+] Should handle incremental updates efficiently"
          ],
          "Result": "Passed",
          "FailedCount": 0,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 2180238,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 218,
            "Microseconds": 23,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.5234236111111113E-06,
            "TotalHours": 6.056216666666667E-05,
            "TotalMilliseconds": 218.0238,
            "TotalMicroseconds": 218023.8,
            "TotalNanoseconds": 218023800.0,
            "TotalMinutes": 0.00363373,
            "TotalSeconds": 0.2180238
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 3,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:04.0598124",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Passed": false,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:18.9458204-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1431616",
            "UserDuration": "00:00:03.9166508",
            "OwnDuration": "00:00:01.9589221",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 744,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "dd96a26f-a12d-4e09-ada3-69ada4fe0766",
            "Ast": "{\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[+] Should process files at 100+ files per second",
            "[+] Should handle incremental updates efficiently"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:19.0919248-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 466244,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 46,
            "Microseconds": 624,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.396342592592593E-07,
            "TotalHours": 1.2951222222222222E-05,
            "TotalMilliseconds": 46.6244,
            "TotalMicroseconds": 46624.4,
            "TotalNanoseconds": 46624400.0,
            "TotalMinutes": 0.0007770733333333334,
            "TotalSeconds": 0.0466244
          },
          "UserDuration": {
            "Ticks": 1713994,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 171,
            "Microseconds": 399,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.9837893518518517E-06,
            "TotalHours": 4.7610944444444444E-05,
            "TotalMilliseconds": 171.3994,
            "TotalMicroseconds": 171399.4,
            "TotalNanoseconds": 171399400.0,
            "TotalMinutes": 0.0028566566666666667,
            "TotalSeconds": 0.1713994
          },
          "OwnDuration": {
            "Ticks": 1279657,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 127,
            "Microseconds": 965,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4810844907407406E-06,
            "TotalHours": 3.554602777777778E-05,
            "TotalMilliseconds": 127.9657,
            "TotalMicroseconds": 127965.7,
            "TotalNanoseconds": 127965700.0,
            "TotalMinutes": 0.0021327616666666667,
            "TotalSeconds": 0.1279657
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "d357e8cd-e813-4432-90f1-8648a3278f71",
            "Ast": "{\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }"
          },
          "StartLine": 824,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 2,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 857,
        "Executed": true,
        "ExecutedAt": "2025-08-28T21:12:19.1223376-04:00",
        "Passed": true,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 639116,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 63,
          "Microseconds": 911,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 7.397175925925926E-07,
          "TotalHours": 1.7753222222222223E-05,
          "TotalMilliseconds": 63.9116,
          "TotalMicroseconds": 63911.6,
          "TotalNanoseconds": 63911600.0,
          "TotalMinutes": 0.0010651933333333332,
          "TotalSeconds": 0.0639116
        },
        "FrameworkDuration": {
          "Ticks": 13293,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 1,
          "Microseconds": 329,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.5385416666666667E-08,
          "TotalHours": 3.6925E-07,
          "TotalMilliseconds": 1.3293,
          "TotalMicroseconds": 1329.3,
          "TotalNanoseconds": 1329300.0,
          "TotalMinutes": 2.2155E-05,
          "TotalSeconds": 0.0013293
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should handle incremental updates efficiently",
        "Path": [
          "Enhanced Documentation System - Performance",
          "File Processing Performance",
          "Should handle incremental updates efficiently"
        ],
        "Data": null,
        "ExpandedName": "Should handle incremental updates efficiently",
        "ExpandedPath": "Enhanced Documentation System - Performance.File Processing Performance.Should handle incremental updates efficiently",
        "Result": "Passed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 248172,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 24,
          "Microseconds": 817,
          "Nanoseconds": 200,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.8723611111111113E-07,
          "TotalHours": 6.893666666666666E-06,
          "TotalMilliseconds": 24.8172,
          "TotalMicroseconds": 24817.2,
          "TotalNanoseconds": 24817200.0,
          "TotalMinutes": 0.00041362,
          "TotalSeconds": 0.0248172
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }",
            "Type": 19,
            "Start": 44432,
            "Length": 938,
            "StartLine": 884,
            "StartColumn": 140,
            "EndLine": 905,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "8b728217-ccf2-45d4-a976-629110b4b196",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }",
            "Parent": "{\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "File Processing Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "File Processing Performance"
          ],
          "Data": null,
          "ExpandedName": "File Processing Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.File Processing Performance",
          "Blocks": [],
          "Tests": [
            "[+] Should process files at 100+ files per second",
            "[+] Should handle incremental updates efficiently"
          ],
          "Result": "Passed",
          "FailedCount": 0,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 2180238,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 218,
            "Microseconds": 23,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.5234236111111113E-06,
            "TotalHours": 6.056216666666667E-05,
            "TotalMilliseconds": 218.0238,
            "TotalMicroseconds": 218023.8,
            "TotalNanoseconds": 218023800.0,
            "TotalMinutes": 0.00363373,
            "TotalSeconds": 0.2180238
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 3,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:04.0598124",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Passed": false,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:18.9458204-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1431616",
            "UserDuration": "00:00:03.9166508",
            "OwnDuration": "00:00:01.9589221",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 744,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "dd96a26f-a12d-4e09-ada3-69ada4fe0766",
            "Ast": "{\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[+] Should process files at 100+ files per second",
            "[+] Should handle incremental updates efficiently"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:19.0919248-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 466244,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 46,
            "Microseconds": 624,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.396342592592593E-07,
            "TotalHours": 1.2951222222222222E-05,
            "TotalMilliseconds": 46.6244,
            "TotalMicroseconds": 46624.4,
            "TotalNanoseconds": 46624400.0,
            "TotalMinutes": 0.0007770733333333334,
            "TotalSeconds": 0.0466244
          },
          "UserDuration": {
            "Ticks": 1713994,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 171,
            "Microseconds": 399,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.9837893518518517E-06,
            "TotalHours": 4.7610944444444444E-05,
            "TotalMilliseconds": 171.3994,
            "TotalMicroseconds": 171399.4,
            "TotalNanoseconds": 171399400.0,
            "TotalMinutes": 0.0028566566666666667,
            "TotalSeconds": 0.1713994
          },
          "OwnDuration": {
            "Ticks": 1279657,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 127,
            "Microseconds": 965,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4810844907407406E-06,
            "TotalHours": 3.554602777777778E-05,
            "TotalMilliseconds": 127.9657,
            "TotalMicroseconds": 127965.7,
            "TotalNanoseconds": 127965700.0,
            "TotalMinutes": 0.0021327616666666667,
            "TotalSeconds": 0.1279657
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "d357e8cd-e813-4432-90f1-8648a3278f71",
            "Ast": "{\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }"
          },
          "StartLine": 824,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 2,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 884,
        "Executed": true,
        "ExecutedAt": "2025-08-28T21:12:19.1875762-04:00",
        "Passed": true,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 239416,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 23,
          "Microseconds": 941,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.7710185185185183E-07,
          "TotalHours": 6.650444444444445E-06,
          "TotalMilliseconds": 23.9416,
          "TotalMicroseconds": 23941.6,
          "TotalNanoseconds": 23941600.0,
          "TotalMinutes": 0.00039902666666666667,
          "TotalSeconds": 0.0239416
        },
        "FrameworkDuration": {
          "Ticks": 8756,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 875,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.0134259259259259E-08,
          "TotalHours": 2.432222222222222E-07,
          "TotalMilliseconds": 0.8756,
          "TotalMicroseconds": 875.6,
          "TotalNanoseconds": 875600.0,
          "TotalMinutes": 1.4593333333333333E-05,
          "TotalSeconds": 0.0008756
        },
        "PluginData": null,
        "FrameworkData": null
      }
    ],
    "Skipped": [],
    "Inconclusive": [],
    "NotRun": [],
    "Tests": [
      {
        "Name": "Should create thread-safe CPG wrapper",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Thread-Safe Operations",
          "Should create thread-safe CPG wrapper"
        ],
        "Data": null,
        "ExpandedName": "Should create thread-safe CPG wrapper",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should create thread-safe CPG wrapper",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }",
            "Type": 19,
            "Start": 17420,
            "Length": 619,
            "StartLine": 354,
            "StartColumn": 125,
            "EndLine": 361,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "dda2d12d-1db4-4952-a200-69b9e111c85b",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }",
            "Parent": "{\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Thread-Safe Operations",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Thread-Safe Operations"
          ],
          "Data": null,
          "ExpandedName": "Thread-Safe Operations",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
          "Blocks": [],
          "Tests": [
            "[-] Should create thread-safe CPG wrapper",
            "[-] Should handle concurrent operations safely",
            "[-] Should provide thread safety statistics"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:00.0725277",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.7654217-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0537485",
            "UserDuration": "00:00:00.0187792",
            "OwnDuration": "00:00:00.0725277",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 290,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should create thread-safe CPG wrapper",
            "[-] Should handle concurrent operations safely",
            "[-] Should provide thread safety statistics"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "9128a9df-53d8-43d0-a90e-512a2f006dc7",
            "Ast": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }"
          },
          "StartLine": 352,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 354,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should handle concurrent operations safely",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Thread-Safe Operations",
          "Should handle concurrent operations safely"
        ],
        "Data": null,
        "ExpandedName": "Should handle concurrent operations safely",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should handle concurrent operations safely",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }",
            "Type": 19,
            "Start": 18184,
            "Length": 737,
            "StartLine": 363,
            "StartColumn": 130,
            "EndLine": 381,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "0881dba1-d0e9-4abd-9294-5bb2a13e4d5f",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }",
            "Parent": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Thread-Safe Operations",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Thread-Safe Operations"
          ],
          "Data": null,
          "ExpandedName": "Thread-Safe Operations",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
          "Blocks": [],
          "Tests": [
            "[-] Should create thread-safe CPG wrapper",
            "[-] Should handle concurrent operations safely",
            "[-] Should provide thread safety statistics"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:00.0725277",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.7654217-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0537485",
            "UserDuration": "00:00:00.0187792",
            "OwnDuration": "00:00:00.0725277",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 290,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should create thread-safe CPG wrapper",
            "[-] Should handle concurrent operations safely",
            "[-] Should provide thread safety statistics"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "9128a9df-53d8-43d0-a90e-512a2f006dc7",
            "Ast": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }"
          },
          "StartLine": 352,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 363,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should provide thread safety statistics",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Thread-Safe Operations",
          "Should provide thread safety statistics"
        ],
        "Data": null,
        "ExpandedName": "Should provide thread safety statistics",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should provide thread safety statistics",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }",
            "Type": 19,
            "Start": 19063,
            "Length": 311,
            "StartLine": 383,
            "StartColumn": 127,
            "EndLine": 389,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "456e5c44-2900-473a-9e06-1d0ed647a195",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }",
            "Parent": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Thread-Safe Operations",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Thread-Safe Operations"
          ],
          "Data": null,
          "ExpandedName": "Thread-Safe Operations",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
          "Blocks": [],
          "Tests": [
            "[-] Should create thread-safe CPG wrapper",
            "[-] Should handle concurrent operations safely",
            "[-] Should provide thread safety statistics"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:00.0725277",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.7654217-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0537485",
            "UserDuration": "00:00:00.0187792",
            "OwnDuration": "00:00:00.0725277",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 290,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should create thread-safe CPG wrapper",
            "[-] Should handle concurrent operations safely",
            "[-] Should provide thread safety statistics"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "9128a9df-53d8-43d0-a90e-512a2f006dc7",
            "Ast": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }"
          },
          "StartLine": 352,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 383,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should build call graphs from source code",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Call Graph Builder",
          "Should build call graphs from source code"
        ],
        "Data": null,
        "ExpandedName": "Should build call graphs from source code",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should build call graphs from source code",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Type": 19,
            "Start": 19811,
            "Length": 665,
            "StartLine": 399,
            "StartColumn": 125,
            "EndLine": 419,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "8d0f3ea0-de04-4406-8bc7-9e7f57785fc2",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Call Graph Builder",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Call Graph Builder"
          ],
          "Data": null,
          "ExpandedName": "Call Graph Builder",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder",
          "Blocks": [],
          "Tests": [
            "[-] Should build call graphs from source code",
            "[-] Should detect recursive calls"
          ],
          "Result": "Failed",
          "FailedCount": 2,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:00.0725277",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.7654217-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0537485",
            "UserDuration": "00:00:00.0187792",
            "OwnDuration": "00:00:00.0725277",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 290,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "1cbd759b-d381-4722-8fe0-9704109a0376",
            "Ast": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should build call graphs from source code",
            "[-] Should detect recursive calls"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "6d2d908c-b8ed-4140-b6a8-270966fd5d3e",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 392,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 2,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 399,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should detect recursive calls",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Call Graph Builder",
          "Should detect recursive calls"
        ],
        "Data": null,
        "ExpandedName": "Should detect recursive calls",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should detect recursive calls",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Type": 19,
            "Start": 20604,
            "Length": 589,
            "StartLine": 421,
            "StartColumn": 113,
            "EndLine": 436,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "dbdcce3d-2f73-44e8-b20d-964990c4e221",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Call Graph Builder",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Call Graph Builder"
          ],
          "Data": null,
          "ExpandedName": "Call Graph Builder",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder",
          "Blocks": [],
          "Tests": [
            "[-] Should build call graphs from source code",
            "[-] Should detect recursive calls"
          ],
          "Result": "Failed",
          "FailedCount": 2,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:00.0725277",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.7654217-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0537485",
            "UserDuration": "00:00:00.0187792",
            "OwnDuration": "00:00:00.0725277",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 290,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "1cbd759b-d381-4722-8fe0-9704109a0376",
            "Ast": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should build call graphs from source code",
            "[-] Should detect recursive calls"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "6d2d908c-b8ed-4140-b6a8-270966fd5d3e",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 392,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 2,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 421,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should track variable definitions and uses",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Data Flow Tracker",
          "Should track variable definitions and uses"
        ],
        "Data": null,
        "ExpandedName": "Should track variable definitions and uses",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should track variable definitions and uses",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Type": 19,
            "Start": 21627,
            "Length": 475,
            "StartLine": 446,
            "StartColumn": 125,
            "EndLine": 458,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "f576a3fc-fd5f-4c7d-94fd-bd3249231580",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Data Flow Tracker",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Data Flow Tracker"
          ],
          "Data": null,
          "ExpandedName": "Data Flow Tracker",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker",
          "Blocks": [],
          "Tests": [
            "[-] Should track variable definitions and uses",
            "[-] Should perform taint analysis"
          ],
          "Result": "Failed",
          "FailedCount": 2,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:00.0725277",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.7654217-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0537485",
            "UserDuration": "00:00:00.0187792",
            "OwnDuration": "00:00:00.0725277",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 290,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "2454aebd-1662-47d2-bcb4-025e8d0d4d29",
            "Ast": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should track variable definitions and uses",
            "[-] Should perform taint analysis"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "6641cbdb-0b65-4829-85ab-21524a39d311",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 439,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 2,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 446,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should perform taint analysis",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Data Flow Tracker",
          "Should perform taint analysis"
        ],
        "Data": null,
        "ExpandedName": "Should perform taint analysis",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should perform taint analysis",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Type": 19,
            "Start": 22229,
            "Length": 563,
            "StartLine": 460,
            "StartColumn": 112,
            "EndLine": 472,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "69138754-6557-4312-8f8f-79bfb9d77cea",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Data Flow Tracker",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Data Flow Tracker"
          ],
          "Data": null,
          "ExpandedName": "Data Flow Tracker",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker",
          "Blocks": [],
          "Tests": [
            "[-] Should track variable definitions and uses",
            "[-] Should perform taint analysis"
          ],
          "Result": "Failed",
          "FailedCount": 2,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:00.0725277",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.7654217-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0537485",
            "UserDuration": "00:00:00.0187792",
            "OwnDuration": "00:00:00.0725277",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 290,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "2454aebd-1662-47d2-bcb4-025e8d0d4d29",
            "Ast": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should track variable definitions and uses",
            "[-] Should perform taint analysis"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "6641cbdb-0b65-4829-85ab-21524a39d311",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 439,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 2,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 460,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should connect to Ollama service",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Ollama API Integration",
          "Should connect to Ollama service"
        ],
        "Data": null,
        "ExpandedName": "Should connect to Ollama service",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should connect to Ollama service",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }",
            "Type": 19,
            "Start": 25513,
            "Length": 222,
            "StartLine": 526,
            "StartColumn": 88,
            "EndLine": 531,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "56c7e4de-dbad-4159-bf02-17825f60a697",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Ollama API Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Ollama API Integration"
          ],
          "Data": null,
          "ExpandedName": "Ollama API Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration",
          "Blocks": [],
          "Tests": [
            "[-] Should connect to Ollama service",
            "[-] Should list available models",
            "[-] Should generate responses for code analysis"
          ],
          "Result": "Skipped",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 9,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.1704310",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.8379525-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0614595",
            "UserDuration": "00:00:02.1089715",
            "OwnDuration": "00:00:02.1704310",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 480,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should connect to Ollama service",
            "[-] Should list available models",
            "[-] Should generate responses for code analysis"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "89912ec4-4d17-43bc-8e36-02f8d7fca109",
            "Ast": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 525,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 526,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should list available models",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Ollama API Integration",
          "Should list available models"
        ],
        "Data": null,
        "ExpandedName": "Should list available models",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should list available models",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }",
            "Type": 19,
            "Start": 25834,
            "Length": 279,
            "StartLine": 533,
            "StartColumn": 84,
            "EndLine": 539,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "a4a42429-05b7-4f02-88e2-c8bb1af580f6",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Ollama API Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Ollama API Integration"
          ],
          "Data": null,
          "ExpandedName": "Ollama API Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration",
          "Blocks": [],
          "Tests": [
            "[-] Should connect to Ollama service",
            "[-] Should list available models",
            "[-] Should generate responses for code analysis"
          ],
          "Result": "Skipped",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 9,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.1704310",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.8379525-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0614595",
            "UserDuration": "00:00:02.1089715",
            "OwnDuration": "00:00:02.1704310",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 480,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should connect to Ollama service",
            "[-] Should list available models",
            "[-] Should generate responses for code analysis"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "89912ec4-4d17-43bc-8e36-02f8d7fca109",
            "Ast": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 525,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 533,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate responses for code analysis",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Ollama API Integration",
          "Should generate responses for code analysis"
        ],
        "Data": null,
        "ExpandedName": "Should generate responses for code analysis",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should generate responses for code analysis",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }",
            "Type": 19,
            "Start": 26227,
            "Length": 545,
            "StartLine": 541,
            "StartColumn": 99,
            "EndLine": 550,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "81f3c91a-1b3f-4cf3-a258-4d0c6a2f641c",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Ollama API Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Ollama API Integration"
          ],
          "Data": null,
          "ExpandedName": "Ollama API Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration",
          "Blocks": [],
          "Tests": [
            "[-] Should connect to Ollama service",
            "[-] Should list available models",
            "[-] Should generate responses for code analysis"
          ],
          "Result": "Skipped",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 9,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.1704310",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.8379525-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0614595",
            "UserDuration": "00:00:02.1089715",
            "OwnDuration": "00:00:02.1704310",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 480,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should connect to Ollama service",
            "[-] Should list available models",
            "[-] Should generate responses for code analysis"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "89912ec4-4d17-43bc-8e36-02f8d7fca109",
            "Ast": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 525,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 541,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should create function documentation prompts",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Prompt Templates",
          "Should create function documentation prompts"
        ],
        "Data": null,
        "ExpandedName": "Should create function documentation prompts",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create function documentation prompts",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 27207,
            "Length": 427,
            "StartLine": 560,
            "StartColumn": 127,
            "EndLine": 567,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "83ec978c-8306-4512-bd04-cc0369056cff",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Prompt Templates",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Prompt Templates"
          ],
          "Data": null,
          "ExpandedName": "Prompt Templates",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
          "Blocks": [],
          "Tests": [
            "[-] Should create function documentation prompts",
            "[-] Should create module documentation prompts",
            "[-] Should support variable substitution"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 9,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.1704310",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.8379525-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0614595",
            "UserDuration": "00:00:02.1089715",
            "OwnDuration": "00:00:02.1704310",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 480,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "7b47f2d8-ff04-40d0-b942-ac6974905e4b",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should create function documentation prompts",
            "[-] Should create module documentation prompts",
            "[-] Should support variable substitution"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "c6f817ec-ae39-43bf-aa91-acb2a2b42492",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 553,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 560,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should create module documentation prompts",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Prompt Templates",
          "Should create module documentation prompts"
        ],
        "Data": null,
        "ExpandedName": "Should create module documentation prompts",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create module documentation prompts",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 27774,
            "Length": 411,
            "StartLine": 569,
            "StartColumn": 125,
            "EndLine": 576,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "ece90f4a-8142-44b6-ae0f-83622f3c6b42",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Prompt Templates",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Prompt Templates"
          ],
          "Data": null,
          "ExpandedName": "Prompt Templates",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
          "Blocks": [],
          "Tests": [
            "[-] Should create function documentation prompts",
            "[-] Should create module documentation prompts",
            "[-] Should support variable substitution"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 9,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.1704310",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.8379525-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0614595",
            "UserDuration": "00:00:02.1089715",
            "OwnDuration": "00:00:02.1704310",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 480,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "7b47f2d8-ff04-40d0-b942-ac6974905e4b",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should create function documentation prompts",
            "[-] Should create module documentation prompts",
            "[-] Should support variable substitution"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "c6f817ec-ae39-43bf-aa91-acb2a2b42492",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 553,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 569,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should support variable substitution",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Prompt Templates",
          "Should support variable substitution"
        ],
        "Data": null,
        "ExpandedName": "Should support variable substitution",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should support variable substitution",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 28319,
            "Length": 542,
            "StartLine": 578,
            "StartColumn": 119,
            "EndLine": 588,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "949cad73-53cd-4805-ae84-f1e9eb50d1bd",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Prompt Templates",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Prompt Templates"
          ],
          "Data": null,
          "ExpandedName": "Prompt Templates",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
          "Blocks": [],
          "Tests": [
            "[-] Should create function documentation prompts",
            "[-] Should create module documentation prompts",
            "[-] Should support variable substitution"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 9,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.1704310",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.8379525-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0614595",
            "UserDuration": "00:00:02.1089715",
            "OwnDuration": "00:00:02.1704310",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 480,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "7b47f2d8-ff04-40d0-b942-ac6974905e4b",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should create function documentation prompts",
            "[-] Should create module documentation prompts",
            "[-] Should support variable substitution"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "c6f817ec-ae39-43bf-aa91-acb2a2b42492",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 553,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 578,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should cache and retrieve responses",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Response Cache",
          "Should cache and retrieve responses"
        ],
        "Data": null,
        "ExpandedName": "Should cache and retrieve responses",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should cache and retrieve responses",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }",
            "Type": 19,
            "Start": 29279,
            "Length": 485,
            "StartLine": 598,
            "StartColumn": 116,
            "EndLine": 608,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "f75dcb13-56a9-464f-b2e9-feb8512d39ec",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Response Cache",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Response Cache"
          ],
          "Data": null,
          "ExpandedName": "Response Cache",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
          "Blocks": [],
          "Tests": [
            "[-] Should cache and retrieve responses",
            "[-] Should handle TTL expiration",
            "[-] Should provide cache statistics"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 9,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.1704310",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.8379525-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0614595",
            "UserDuration": "00:00:02.1089715",
            "OwnDuration": "00:00:02.1704310",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 480,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a3100a39-d922-4e8f-bb81-a253234119f7",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should cache and retrieve responses",
            "[-] Should handle TTL expiration",
            "[-] Should provide cache statistics"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "9764edb0-b3d3-422d-91fc-81404a2dcf1f",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 591,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 598,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should handle TTL expiration",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Response Cache",
          "Should handle TTL expiration"
        ],
        "Data": null,
        "ExpandedName": "Should handle TTL expiration",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should handle TTL expiration",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }",
            "Type": 19,
            "Start": 29888,
            "Length": 522,
            "StartLine": 610,
            "StartColumn": 109,
            "EndLine": 621,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "2e7982f2-5b3d-49cc-b2b9-2541ecdbaa66",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Response Cache",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Response Cache"
          ],
          "Data": null,
          "ExpandedName": "Response Cache",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
          "Blocks": [],
          "Tests": [
            "[-] Should cache and retrieve responses",
            "[-] Should handle TTL expiration",
            "[-] Should provide cache statistics"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 9,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.1704310",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.8379525-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0614595",
            "UserDuration": "00:00:02.1089715",
            "OwnDuration": "00:00:02.1704310",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 480,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a3100a39-d922-4e8f-bb81-a253234119f7",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should cache and retrieve responses",
            "[-] Should handle TTL expiration",
            "[-] Should provide cache statistics"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "9764edb0-b3d3-422d-91fc-81404a2dcf1f",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 591,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 610,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should provide cache statistics",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Response Cache",
          "Should provide cache statistics"
        ],
        "Data": null,
        "ExpandedName": "Should provide cache statistics",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should provide cache statistics",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }",
            "Type": 19,
            "Start": 30537,
            "Length": 402,
            "StartLine": 623,
            "StartColumn": 112,
            "EndLine": 631,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "267ef21d-c6fa-4e65-9dcf-48095bd27ce3",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Response Cache",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Response Cache"
          ],
          "Data": null,
          "ExpandedName": "Response Cache",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
          "Blocks": [],
          "Tests": [
            "[-] Should cache and retrieve responses",
            "[-] Should handle TTL expiration",
            "[-] Should provide cache statistics"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 9,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.1704310",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.8379525-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0614595",
            "UserDuration": "00:00:02.1089715",
            "OwnDuration": "00:00:02.1704310",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 480,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "a3100a39-d922-4e8f-bb81-a253234119f7",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should cache and retrieve responses",
            "[-] Should handle TTL expiration",
            "[-] Should provide cache statistics"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "9764edb0-b3d3-422d-91fc-81404a2dcf1f",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 591,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 623,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate PowerShell documentation templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should generate PowerShell documentation templates"
        ],
        "Data": null,
        "ExpandedName": "Should generate PowerShell documentation templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate PowerShell documentation templates",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }",
            "Type": 19,
            "Start": 33364,
            "Length": 396,
            "StartLine": 674,
            "StartColumn": 140,
            "EndLine": 680,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "fb2452e8-67b3-41ef-8e17-de143c4beb46",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }",
            "Parent": "{\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Result": "Failed",
          "FailedCount": 5,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[-] Language-Specific Templates [-] Automation Triggers",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.1803866",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Language-Specific Templates [-] Automation Triggers",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:18.9358625-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0696061",
            "UserDuration": "00:00:02.1107805",
            "OwnDuration": "00:00:02.1803866",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    ",
            "StartLine": 639,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "143e92b1-db11-4f14-b6de-b37419abadd5",
            "Ast": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }"
          },
          "StartLine": 672,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 5,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 674,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate Python documentation templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should generate Python documentation templates"
        ],
        "Data": null,
        "ExpandedName": "Should generate Python documentation templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate Python documentation templates",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }",
            "Type": 19,
            "Start": 33911,
            "Length": 385,
            "StartLine": 682,
            "StartColumn": 136,
            "EndLine": 688,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "6bbc8202-5f97-48a0-b7fc-a5fa983ec895",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }",
            "Parent": "{\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Result": "Failed",
          "FailedCount": 5,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[-] Language-Specific Templates [-] Automation Triggers",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.1803866",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Language-Specific Templates [-] Automation Triggers",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:18.9358625-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0696061",
            "UserDuration": "00:00:02.1107805",
            "OwnDuration": "00:00:02.1803866",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    ",
            "StartLine": 639,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "143e92b1-db11-4f14-b6de-b37419abadd5",
            "Ast": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }"
          },
          "StartLine": 672,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 5,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 682,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate C# documentation templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should generate C# documentation templates"
        ],
        "Data": null,
        "ExpandedName": "Should generate C# documentation templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate C# documentation templates",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }",
            "Type": 19,
            "Start": 34443,
            "Length": 400,
            "StartLine": 690,
            "StartColumn": 132,
            "EndLine": 696,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "bed2f1ab-379b-4445-883a-d9a979419567",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }",
            "Parent": "{\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Result": "Failed",
          "FailedCount": 5,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[-] Language-Specific Templates [-] Automation Triggers",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.1803866",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Language-Specific Templates [-] Automation Triggers",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:18.9358625-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0696061",
            "UserDuration": "00:00:02.1107805",
            "OwnDuration": "00:00:02.1803866",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    ",
            "StartLine": 639,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "143e92b1-db11-4f14-b6de-b37419abadd5",
            "Ast": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }"
          },
          "StartLine": 672,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 5,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 690,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate JavaScript documentation templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should generate JavaScript documentation templates"
        ],
        "Data": null,
        "ExpandedName": "Should generate JavaScript documentation templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate JavaScript documentation templates",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }",
            "Type": 19,
            "Start": 34998,
            "Length": 437,
            "StartLine": 698,
            "StartColumn": 140,
            "EndLine": 705,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "07c28935-8d4d-4d5c-a283-734c0d3bc011",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }",
            "Parent": "{\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Result": "Failed",
          "FailedCount": 5,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[-] Language-Specific Templates [-] Automation Triggers",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.1803866",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Language-Specific Templates [-] Automation Triggers",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:18.9358625-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0696061",
            "UserDuration": "00:00:02.1107805",
            "OwnDuration": "00:00:02.1803866",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    ",
            "StartLine": 639,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "143e92b1-db11-4f14-b6de-b37419abadd5",
            "Ast": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }"
          },
          "StartLine": 672,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 5,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 698,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should detect language from file extensions",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should detect language from file extensions"
        ],
        "Data": null,
        "ExpandedName": "Should detect language from file extensions",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should detect language from file extensions",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }",
            "Type": 19,
            "Start": 35583,
            "Length": 455,
            "StartLine": 707,
            "StartColumn": 133,
            "EndLine": 713,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "bdcdd878-026d-4fe4-b043-0ec21fc7819e",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }",
            "Parent": "{\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Result": "Failed",
          "FailedCount": 5,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[-] Language-Specific Templates [-] Automation Triggers",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.1803866",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Language-Specific Templates [-] Automation Triggers",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:18.9358625-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0696061",
            "UserDuration": "00:00:02.1107805",
            "OwnDuration": "00:00:02.1803866",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    ",
            "StartLine": 639,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "143e92b1-db11-4f14-b6de-b37419abadd5",
            "Ast": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }"
          },
          "StartLine": 672,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 5,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 707,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should initialize documentation triggers",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Automation Triggers",
          "Should initialize documentation triggers"
        ],
        "Data": null,
        "ExpandedName": "Should initialize documentation triggers",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should initialize documentation triggers",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }",
            "Type": 19,
            "Start": 36246,
            "Length": 120,
            "StartLine": 718,
            "StartColumn": 131,
            "EndLine": 721,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "42b0d357-c9d2-427c-acb3-f1a0feab68c5",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }",
            "Parent": "{\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Automation Triggers",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Automation Triggers"
          ],
          "Data": null,
          "ExpandedName": "Automation Triggers",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers",
          "Blocks": [],
          "Tests": [
            "[-] Should initialize documentation triggers",
            "[-] Should log trigger activity"
          ],
          "Result": "Failed",
          "FailedCount": 2,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[-] Language-Specific Templates [-] Automation Triggers",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.1803866",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Language-Specific Templates [-] Automation Triggers",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:18.9358625-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0696061",
            "UserDuration": "00:00:02.1107805",
            "OwnDuration": "00:00:02.1803866",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    ",
            "StartLine": 639,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should initialize documentation triggers",
            "[-] Should log trigger activity"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "df14d535-23b7-48f4-bdf3-0b1419915eef",
            "Ast": "{\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }"
          },
          "StartLine": 716,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 2,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 718,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should log trigger activity",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Automation Triggers",
          "Should log trigger activity"
        ],
        "Data": null,
        "ExpandedName": "Should log trigger activity",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should log trigger activity",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }",
            "Type": 19,
            "Start": 36499,
            "Length": 557,
            "StartLine": 723,
            "StartColumn": 118,
            "EndLine": 736,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "bd1ab19b-ebaa-43c8-a3b6-226bc96015e1",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }",
            "Parent": "{\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Automation Triggers",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Automation Triggers"
          ],
          "Data": null,
          "ExpandedName": "Automation Triggers",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers",
          "Blocks": [],
          "Tests": [
            "[-] Should initialize documentation triggers",
            "[-] Should log trigger activity"
          ],
          "Result": "Failed",
          "FailedCount": 2,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[-] Language-Specific Templates [-] Automation Triggers",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "Cannot index into a null array.",
            "Duration": "00:00:02.1803866",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Language-Specific Templates [-] Automation Triggers",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:18.9358625-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0696061",
            "UserDuration": "00:00:02.1107805",
            "OwnDuration": "00:00:02.1803866",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    ",
            "StartLine": 639,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should initialize documentation triggers",
            "[-] Should log trigger activity"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "df14d535-23b7-48f4-bdf3-0b1419915eef",
            "Ast": "{\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }"
          },
          "StartLine": 716,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 2,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 723,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should meet cache performance benchmarks",
        "Path": [
          "Enhanced Documentation System - Performance",
          "Cache Performance",
          "Should meet cache performance benchmarks"
        ],
        "Data": null,
        "ExpandedName": "Should meet cache performance benchmarks",
        "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should meet cache performance benchmarks",
        "Result": "Failed",
        "ErrorRecord": [
          {
            "Exception": "System.Management.Automation.CommandNotFoundException: The term 'New-PerformanceCache' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\n   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
            "TargetObject": "New-PerformanceCache",
            "CategoryInfo": "ObjectNotFound: (New-PerformanceCache:String) [], CommandNotFoundException",
            "FullyQualifiedErrorId": "CommandNotFoundException",
            "ErrorDetails": null,
            "InvocationInfo": "System.Management.Automation.InvocationInfo",
            "ScriptStackTrace": "at <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 789\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2157\r\nat Invoke-TestItem, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1199\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 835\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60",
            "PipelineIterationInfo": ""
          }
        ],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 632716,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 63,
          "Microseconds": 271,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 7.323101851851852E-07,
          "TotalHours": 1.7575444444444443E-05,
          "TotalMilliseconds": 63.2716,
          "TotalMicroseconds": 63271.6,
          "TotalNanoseconds": 63271600.0,
          "TotalMinutes": 0.0010545266666666666,
          "TotalSeconds": 0.0632716
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }",
            "Type": 19,
            "Start": 39944,
            "Length": 841,
            "StartLine": 788,
            "StartColumn": 122,
            "EndLine": 808,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "8a3da7a6-d704-4623-97cb-ef3eb93f03ce",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }",
            "Parent": "{\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Cache Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "Cache Performance"
          ],
          "Data": null,
          "ExpandedName": "Cache Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance",
          "Blocks": [],
          "Tests": [
            "[-] Should meet cache performance benchmarks",
            "[-] Should handle cache warming efficiently"
          ],
          "Result": "Failed",
          "FailedCount": 2,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 928866,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 92,
            "Microseconds": 886,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.0750763888888889E-06,
            "TotalHours": 2.5801833333333334E-05,
            "TotalMilliseconds": 92.8866,
            "TotalMicroseconds": 92886.6,
            "TotalNanoseconds": 92886600.0,
            "TotalMinutes": 0.00154811,
            "TotalSeconds": 0.0928866
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 3,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:04.0598124",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Passed": false,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:18.9458204-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1431616",
            "UserDuration": "00:00:03.9166508",
            "OwnDuration": "00:00:01.9589221",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 744,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should meet cache performance benchmarks",
            "[-] Should handle cache warming efficiently"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:18.9990364-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 387475,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 38,
            "Microseconds": 747,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.484664351851852E-07,
            "TotalHours": 1.0763194444444444E-05,
            "TotalMilliseconds": 38.7475,
            "TotalMicroseconds": 38747.5,
            "TotalNanoseconds": 38747500.0,
            "TotalMinutes": 0.0006457916666666667,
            "TotalSeconds": 0.0387475
          },
          "UserDuration": {
            "Ticks": 541391,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 54,
            "Microseconds": 139,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.266099537037037E-07,
            "TotalHours": 1.5038638888888888E-05,
            "TotalMilliseconds": 54.1391,
            "TotalMicroseconds": 54139.1,
            "TotalNanoseconds": 54139100.0,
            "TotalMinutes": 0.0009023183333333333,
            "TotalSeconds": 0.0541391
          },
          "OwnDuration": {
            "Ticks": 93128,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 9,
            "Microseconds": 312,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.0778703703703703E-07,
            "TotalHours": 2.5868888888888888E-06,
            "TotalMilliseconds": 9.3128,
            "TotalMicroseconds": 9312.8,
            "TotalNanoseconds": 9312800.0,
            "TotalMinutes": 0.00015521333333333334,
            "TotalSeconds": 0.0093128
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "680d5692-16b1-473f-9910-b69c7ac1bc63",
            "Ast": "{\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }"
          },
          "StartLine": 786,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 2,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 788,
        "Executed": true,
        "ExecutedAt": "2025-08-28T21:12:19.0041457-04:00",
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 386125,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 38,
          "Microseconds": 612,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.4690393518518516E-07,
          "TotalHours": 1.0725694444444445E-05,
          "TotalMilliseconds": 38.6125,
          "TotalMicroseconds": 38612.5,
          "TotalNanoseconds": 38612500.0,
          "TotalMinutes": 0.0006435416666666667,
          "TotalSeconds": 0.0386125
        },
        "FrameworkDuration": {
          "Ticks": 246591,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 24,
          "Microseconds": 659,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.8540625E-07,
          "TotalHours": 6.84975E-06,
          "TotalMilliseconds": 24.6591,
          "TotalMicroseconds": 24659.1,
          "TotalNanoseconds": 24659100.0,
          "TotalMinutes": 0.000410985,
          "TotalSeconds": 0.0246591
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should handle cache warming efficiently",
        "Path": [
          "Enhanced Documentation System - Performance",
          "Cache Performance",
          "Should handle cache warming efficiently"
        ],
        "Data": null,
        "ExpandedName": "Should handle cache warming efficiently",
        "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should handle cache warming efficiently",
        "Result": "Failed",
        "ErrorRecord": [
          {
            "Exception": "System.Management.Automation.CommandNotFoundException: The term 'New-PerformanceCache' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\n   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
            "TargetObject": "New-PerformanceCache",
            "CategoryInfo": "ObjectNotFound: (New-PerformanceCache:String) [], CommandNotFoundException",
            "FullyQualifiedErrorId": "CommandNotFoundException",
            "ErrorDetails": null,
            "InvocationInfo": "System.Management.Automation.InvocationInfo",
            "ScriptStackTrace": "at <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 811\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2157\r\nat Invoke-TestItem, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1199\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 835\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60",
            "PipelineIterationInfo": ""
          }
        ],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 203022,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 20,
          "Microseconds": 302,
          "Nanoseconds": 200,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.3497916666666667E-07,
          "TotalHours": 5.6395E-06,
          "TotalMilliseconds": 20.3022,
          "TotalMicroseconds": 20302.2,
          "TotalNanoseconds": 20302200.0,
          "TotalMinutes": 0.00033837,
          "TotalSeconds": 0.0203022
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }",
            "Type": 19,
            "Start": 40921,
            "Length": 640,
            "StartLine": 810,
            "StartColumn": 121,
            "EndLine": 821,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "4f33f43a-93d3-4472-a301-821f231a944b",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }",
            "Parent": "{\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Cache Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "Cache Performance"
          ],
          "Data": null,
          "ExpandedName": "Cache Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance",
          "Blocks": [],
          "Tests": [
            "[-] Should meet cache performance benchmarks",
            "[-] Should handle cache warming efficiently"
          ],
          "Result": "Failed",
          "FailedCount": 2,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 928866,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 92,
            "Microseconds": 886,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.0750763888888889E-06,
            "TotalHours": 2.5801833333333334E-05,
            "TotalMilliseconds": 92.8866,
            "TotalMicroseconds": 92886.6,
            "TotalNanoseconds": 92886600.0,
            "TotalMinutes": 0.00154811,
            "TotalSeconds": 0.0928866
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 3,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:04.0598124",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Passed": false,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:18.9458204-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1431616",
            "UserDuration": "00:00:03.9166508",
            "OwnDuration": "00:00:01.9589221",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 744,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should meet cache performance benchmarks",
            "[-] Should handle cache warming efficiently"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:18.9990364-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 387475,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 38,
            "Microseconds": 747,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.484664351851852E-07,
            "TotalHours": 1.0763194444444444E-05,
            "TotalMilliseconds": 38.7475,
            "TotalMicroseconds": 38747.5,
            "TotalNanoseconds": 38747500.0,
            "TotalMinutes": 0.0006457916666666667,
            "TotalSeconds": 0.0387475
          },
          "UserDuration": {
            "Ticks": 541391,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 54,
            "Microseconds": 139,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.266099537037037E-07,
            "TotalHours": 1.5038638888888888E-05,
            "TotalMilliseconds": 54.1391,
            "TotalMicroseconds": 54139.1,
            "TotalNanoseconds": 54139100.0,
            "TotalMinutes": 0.0009023183333333333,
            "TotalSeconds": 0.0541391
          },
          "OwnDuration": {
            "Ticks": 93128,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 9,
            "Microseconds": 312,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.0778703703703703E-07,
            "TotalHours": 2.5868888888888888E-06,
            "TotalMilliseconds": 9.3128,
            "TotalMicroseconds": 9312.8,
            "TotalNanoseconds": 9312800.0,
            "TotalMinutes": 0.00015521333333333334,
            "TotalSeconds": 0.0093128
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "680d5692-16b1-473f-9910-b69c7ac1bc63",
            "Ast": "{\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }"
          },
          "StartLine": 786,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 2,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 810,
        "Executed": true,
        "ExecutedAt": "2025-08-28T21:12:19.0668925-04:00",
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 152516,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 15,
          "Microseconds": 251,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.7652314814814816E-07,
          "TotalHours": 4.236555555555555E-06,
          "TotalMilliseconds": 15.2516,
          "TotalMicroseconds": 15251.6,
          "TotalNanoseconds": 15251600.0,
          "TotalMinutes": 0.0002541933333333333,
          "TotalSeconds": 0.0152516
        },
        "FrameworkDuration": {
          "Ticks": 50506,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 5,
          "Microseconds": 50,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.845601851851852E-08,
          "TotalHours": 1.4029444444444443E-06,
          "TotalMilliseconds": 5.0506,
          "TotalMicroseconds": 5050.6,
          "TotalNanoseconds": 5050600.0,
          "TotalMinutes": 8.417666666666667E-05,
          "TotalSeconds": 0.0050506
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should process files at 100+ files per second",
        "Path": [
          "Enhanced Documentation System - Performance",
          "File Processing Performance",
          "Should process files at 100+ files per second"
        ],
        "Data": null,
        "ExpandedName": "Should process files at 100+ files per second",
        "ExpandedPath": "Enhanced Documentation System - Performance.File Processing Performance.Should process files at 100+ files per second",
        "Result": "Passed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 652409,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 65,
          "Microseconds": 240,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 7.551030092592593E-07,
          "TotalHours": 1.8122472222222222E-05,
          "TotalMilliseconds": 65.2409,
          "TotalMicroseconds": 65240.9,
          "TotalNanoseconds": 65240900.0,
          "TotalMinutes": 0.0010873483333333333,
          "TotalSeconds": 0.0652409
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }",
            "Type": 19,
            "Start": 42906,
            "Length": 1371,
            "StartLine": 857,
            "StartColumn": 64,
            "EndLine": 882,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "6f5e1b8f-caf2-41cb-b2b7-a8511dc09ffe",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }",
            "Parent": "{\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "File Processing Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "File Processing Performance"
          ],
          "Data": null,
          "ExpandedName": "File Processing Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.File Processing Performance",
          "Blocks": [],
          "Tests": [
            "[+] Should process files at 100+ files per second",
            "[+] Should handle incremental updates efficiently"
          ],
          "Result": "Passed",
          "FailedCount": 0,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 2180238,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 218,
            "Microseconds": 23,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.5234236111111113E-06,
            "TotalHours": 6.056216666666667E-05,
            "TotalMilliseconds": 218.0238,
            "TotalMicroseconds": 218023.8,
            "TotalNanoseconds": 218023800.0,
            "TotalMinutes": 0.00363373,
            "TotalSeconds": 0.2180238
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 3,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:04.0598124",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Passed": false,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:18.9458204-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1431616",
            "UserDuration": "00:00:03.9166508",
            "OwnDuration": "00:00:01.9589221",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 744,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "dd96a26f-a12d-4e09-ada3-69ada4fe0766",
            "Ast": "{\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[+] Should process files at 100+ files per second",
            "[+] Should handle incremental updates efficiently"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:19.0919248-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 466244,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 46,
            "Microseconds": 624,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.396342592592593E-07,
            "TotalHours": 1.2951222222222222E-05,
            "TotalMilliseconds": 46.6244,
            "TotalMicroseconds": 46624.4,
            "TotalNanoseconds": 46624400.0,
            "TotalMinutes": 0.0007770733333333334,
            "TotalSeconds": 0.0466244
          },
          "UserDuration": {
            "Ticks": 1713994,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 171,
            "Microseconds": 399,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.9837893518518517E-06,
            "TotalHours": 4.7610944444444444E-05,
            "TotalMilliseconds": 171.3994,
            "TotalMicroseconds": 171399.4,
            "TotalNanoseconds": 171399400.0,
            "TotalMinutes": 0.0028566566666666667,
            "TotalSeconds": 0.1713994
          },
          "OwnDuration": {
            "Ticks": 1279657,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 127,
            "Microseconds": 965,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4810844907407406E-06,
            "TotalHours": 3.554602777777778E-05,
            "TotalMilliseconds": 127.9657,
            "TotalMicroseconds": 127965.7,
            "TotalNanoseconds": 127965700.0,
            "TotalMinutes": 0.0021327616666666667,
            "TotalSeconds": 0.1279657
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "d357e8cd-e813-4432-90f1-8648a3278f71",
            "Ast": "{\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }"
          },
          "StartLine": 824,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 2,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 857,
        "Executed": true,
        "ExecutedAt": "2025-08-28T21:12:19.1223376-04:00",
        "Passed": true,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 639116,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 63,
          "Microseconds": 911,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 7.397175925925926E-07,
          "TotalHours": 1.7753222222222223E-05,
          "TotalMilliseconds": 63.9116,
          "TotalMicroseconds": 63911.6,
          "TotalNanoseconds": 63911600.0,
          "TotalMinutes": 0.0010651933333333332,
          "TotalSeconds": 0.0639116
        },
        "FrameworkDuration": {
          "Ticks": 13293,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 1,
          "Microseconds": 329,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.5385416666666667E-08,
          "TotalHours": 3.6925E-07,
          "TotalMilliseconds": 1.3293,
          "TotalMicroseconds": 1329.3,
          "TotalNanoseconds": 1329300.0,
          "TotalMinutes": 2.2155E-05,
          "TotalSeconds": 0.0013293
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should handle incremental updates efficiently",
        "Path": [
          "Enhanced Documentation System - Performance",
          "File Processing Performance",
          "Should handle incremental updates efficiently"
        ],
        "Data": null,
        "ExpandedName": "Should handle incremental updates efficiently",
        "ExpandedPath": "Enhanced Documentation System - Performance.File Processing Performance.Should handle incremental updates efficiently",
        "Result": "Passed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 248172,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 24,
          "Microseconds": 817,
          "Nanoseconds": 200,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.8723611111111113E-07,
          "TotalHours": 6.893666666666666E-06,
          "TotalMilliseconds": 24.8172,
          "TotalMicroseconds": 24817.2,
          "TotalNanoseconds": 24817200.0,
          "TotalMinutes": 0.00041362,
          "TotalSeconds": 0.0248172
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }",
            "Type": 19,
            "Start": 44432,
            "Length": 938,
            "StartLine": 884,
            "StartColumn": 140,
            "EndLine": 905,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "8b728217-ccf2-45d4-a976-629110b4b196",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }",
            "Parent": "{\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "File Processing Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "File Processing Performance"
          ],
          "Data": null,
          "ExpandedName": "File Processing Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.File Processing Performance",
          "Blocks": [],
          "Tests": [
            "[+] Should process files at 100+ files per second",
            "[+] Should handle incremental updates efficiently"
          ],
          "Result": "Passed",
          "FailedCount": 0,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 2180238,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 218,
            "Microseconds": 23,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.5234236111111113E-06,
            "TotalHours": 6.056216666666667E-05,
            "TotalMilliseconds": 218.0238,
            "TotalMicroseconds": 218023.8,
            "TotalNanoseconds": 218023800.0,
            "TotalMinutes": 0.00363373,
            "TotalSeconds": 0.2180238
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 3,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:04.0598124",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Passed": false,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:18.9458204-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1431616",
            "UserDuration": "00:00:03.9166508",
            "OwnDuration": "00:00:01.9589221",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 744,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "dd96a26f-a12d-4e09-ada3-69ada4fe0766",
            "Ast": "{\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[+] Should process files at 100+ files per second",
            "[+] Should handle incremental updates efficiently"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:19.0919248-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 466244,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 46,
            "Microseconds": 624,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.396342592592593E-07,
            "TotalHours": 1.2951222222222222E-05,
            "TotalMilliseconds": 46.6244,
            "TotalMicroseconds": 46624.4,
            "TotalNanoseconds": 46624400.0,
            "TotalMinutes": 0.0007770733333333334,
            "TotalSeconds": 0.0466244
          },
          "UserDuration": {
            "Ticks": 1713994,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 171,
            "Microseconds": 399,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.9837893518518517E-06,
            "TotalHours": 4.7610944444444444E-05,
            "TotalMilliseconds": 171.3994,
            "TotalMicroseconds": 171399.4,
            "TotalNanoseconds": 171399400.0,
            "TotalMinutes": 0.0028566566666666667,
            "TotalSeconds": 0.1713994
          },
          "OwnDuration": {
            "Ticks": 1279657,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 127,
            "Microseconds": 965,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4810844907407406E-06,
            "TotalHours": 3.554602777777778E-05,
            "TotalMilliseconds": 127.9657,
            "TotalMicroseconds": 127965.7,
            "TotalNanoseconds": 127965700.0,
            "TotalMinutes": 0.0021327616666666667,
            "TotalSeconds": 0.1279657
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "d357e8cd-e813-4432-90f1-8648a3278f71",
            "Ast": "{\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }"
          },
          "StartLine": 824,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 2,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 884,
        "Executed": true,
        "ExecutedAt": "2025-08-28T21:12:19.1875762-04:00",
        "Passed": true,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 239416,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 23,
          "Microseconds": 941,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.7710185185185183E-07,
          "TotalHours": 6.650444444444445E-06,
          "TotalMilliseconds": 23.9416,
          "TotalMicroseconds": 23941.6,
          "TotalNanoseconds": 23941600.0,
          "TotalMinutes": 0.00039902666666666667,
          "TotalSeconds": 0.0239416
        },
        "FrameworkDuration": {
          "Ticks": 8756,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 875,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.0134259259259259E-08,
          "TotalHours": 2.432222222222222E-07,
          "TotalMilliseconds": 0.8756,
          "TotalMicroseconds": 875.6,
          "TotalNanoseconds": 875600.0,
          "TotalMinutes": 1.4593333333333333E-05,
          "TotalSeconds": 0.0008756
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should demonstrate parallel processing benefits",
        "Path": [
          "Enhanced Documentation System - Performance",
          "Parallel Processing Performance",
          "Should demonstrate parallel processing benefits"
        ],
        "Data": null,
        "ExpandedName": "Should demonstrate parallel processing benefits",
        "ExpandedPath": "Enhanced Documentation System - Performance.Parallel Processing Performance.Should demonstrate parallel processing benefits",
        "Result": "Failed",
        "ErrorRecord": [
          {
            "Exception": "System.Exception: Expected the actual value to be less than 404.4512, but got 719.7523.",
            "TargetObject": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "CategoryInfo": "InvalidResult: (System.Collections.…ring,System.Object]:Dictionary`2) [], Exception",
            "FullyQualifiedErrorId": "PesterAssertionFailed",
            "ErrorDetails": null,
            "InvocationInfo": "System.Management.Automation.InvocationInfo",
            "ScriptStackTrace": "at Invoke-Assertion, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 8250\r\nat Should<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 8193\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 929\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2157\r\nat Invoke-TestItem, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1199\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 835\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60",
            "PipelineIterationInfo": ""
          }
        ],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 15648034,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 564,
          "Microseconds": 803,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 1,
          "TotalDays": 1.8111150462962964E-05,
          "TotalHours": 0.0004346676111111111,
          "TotalMilliseconds": 1564.8034,
          "TotalMicroseconds": 1564803.4,
          "TotalNanoseconds": 1564803400.0,
          "TotalMinutes": 0.026080056666666667,
          "TotalSeconds": 1.5648034
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }",
            "Type": 19,
            "Start": 45589,
            "Length": 1070,
            "StartLine": 910,
            "StartColumn": 130,
            "EndLine": 930,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "e36acadb-c8c7-4ea3-ae89-1220fa9a62ce",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }",
            "Parent": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Parallel Processing Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "Parallel Processing Performance"
          ],
          "Data": null,
          "ExpandedName": "Parallel Processing Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.Parallel Processing Performance",
          "Blocks": [],
          "Tests": [
            "[-] Should demonstrate parallel processing benefits"
          ],
          "Result": "Failed",
          "FailedCount": 1,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 1,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 17899799,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 789,
            "Microseconds": 979,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 1,
            "TotalDays": 2.0717359953703703E-05,
            "TotalHours": 0.0004972166388888889,
            "TotalMilliseconds": 1789.9799,
            "TotalMicroseconds": 1789979.9,
            "TotalNanoseconds": 1789979900.0,
            "TotalMinutes": 0.029832998333333333,
            "TotalSeconds": 1.7899799
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 3,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:04.0598124",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Passed": false,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:18.9458204-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1431616",
            "UserDuration": "00:00:03.9166508",
            "OwnDuration": "00:00:01.9589221",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 744,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should demonstrate parallel processing benefits"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:19.217064-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 673140,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 67,
            "Microseconds": 314,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 7.790972222222222E-07,
            "TotalHours": 1.8698333333333334E-05,
            "TotalMilliseconds": 67.314,
            "TotalMicroseconds": 67314.0,
            "TotalNanoseconds": 67314000.0,
            "TotalMinutes": 0.0011219,
            "TotalSeconds": 0.067314
          },
          "UserDuration": {
            "Ticks": 17226659,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 722,
            "Microseconds": 665,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 1,
            "TotalDays": 1.9938262731481483E-05,
            "TotalHours": 0.00047851830555555556,
            "TotalMilliseconds": 1722.6659,
            "TotalMicroseconds": 1722665.9,
            "TotalNanoseconds": 1722665900.0,
            "TotalMinutes": 0.028711098333333334,
            "TotalSeconds": 1.7226659
          },
          "OwnDuration": {
            "Ticks": 2251765,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 225,
            "Microseconds": 176,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.606209490740741E-06,
            "TotalHours": 6.254902777777777E-05,
            "TotalMilliseconds": 225.1765,
            "TotalMicroseconds": 225176.5,
            "TotalNanoseconds": 225176500.0,
            "TotalMinutes": 0.003752941666666667,
            "TotalSeconds": 0.2251765
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "832d3e93-1055-49b0-b9a9-38481e82c6ab",
            "Ast": "{\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }"
          },
          "StartLine": 908,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 1,
          "OwnPassedCount": 0,
          "OwnFailedCount": 1,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 910,
        "Executed": true,
        "ExecutedAt": "2025-08-28T21:12:19.2188885-04:00",
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 15509523,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 550,
          "Microseconds": 952,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 1,
          "TotalDays": 1.7950836805555556E-05,
          "TotalHours": 0.00043082008333333334,
          "TotalMilliseconds": 1550.9523,
          "TotalMicroseconds": 1550952.3,
          "TotalNanoseconds": 1550952300.0,
          "TotalMinutes": 0.025849205,
          "TotalSeconds": 1.5509523
        },
        "FrameworkDuration": {
          "Ticks": 138511,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 13,
          "Microseconds": 851,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.603136574074074E-07,
          "TotalHours": 3.847527777777778E-06,
          "TotalMilliseconds": 13.8511,
          "TotalMicroseconds": 13851.1,
          "TotalNanoseconds": 13851100.0,
          "TotalMinutes": 0.00023085166666666666,
          "TotalSeconds": 0.0138511
        },
        "PluginData": null,
        "FrameworkData": null
      }
    ],
    "CodeCoverage": null
  },
  "Summary": {
    "Passed": 2,
    "Skipped": 0,
    "Failed": 26,
    "TestScope": "All",
    "TotalTests": 28,
    "StartTime": "2025-08-28T21:12:21.4037361-04:00",
    "TestScript": "Test-EnhancedDocumentationSystem.ps1",
    "Duration": 4.3926513,
    "SuccessRate": 7.1
  },
  "FailedTests": [
    {
      "Name": "Should create thread-safe CPG wrapper",
      "Path": [
        "Enhanced Documentation System - CPG Components",
        "Thread-Safe Operations",
        "Should create thread-safe CPG wrapper"
      ],
      "Data": null,
      "ExpandedName": "Should create thread-safe CPG wrapper",
      "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should create thread-safe CPG wrapper",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }",
          "Type": 19,
          "Start": 17420,
          "Length": 619,
          "StartLine": 354,
          "StartColumn": 125,
          "EndLine": 361,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "dda2d12d-1db4-4952-a200-69b9e111c85b",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow $cpg = New-ThreadSafeCPG $cpg | Should -Not -BeNullOrEmpty $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"",
            "Traps": null,
            "Extent": "Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"",
            "Parent": "{\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 354,
            "StartColumnNumber": 125,
            "EndLineNumber": 361,
            "EndColumnNumber": 14,
            "Text": "{\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }",
            "StartOffset": 17420,
            "EndOffset": 18039
          },
          "Parent": {
            "ScriptBlock": "{\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }",
            "Parent": "It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Thread-Safe Operations",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Thread-Safe Operations"
        ],
        "Data": null,
        "ExpandedName": "Thread-Safe Operations",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should create thread-safe CPG wrapper",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should create thread-safe CPG wrapper",
            "Data": null,
            "ExpandedName": "Should create thread-safe CPG wrapper",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should create thread-safe CPG wrapper",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 354,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle concurrent operations safely",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should handle concurrent operations safely",
            "Data": null,
            "ExpandedName": "Should handle concurrent operations safely",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should handle concurrent operations safely",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 363,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should provide thread safety statistics",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should provide thread safety statistics",
            "Data": null,
            "ExpandedName": "Should provide thread safety statistics",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should provide thread safety statistics",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 383,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 3,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 3,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:12:03.5268689-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:12:03.5268689Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 43374678,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 337,
            "Microseconds": 467,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.020217361111111E-05,
            "TotalHours": 0.0012048521666666668,
            "TotalMilliseconds": 4337.4678,
            "TotalMicroseconds": 4337467.8,
            "TotalNanoseconds": 4337467800.0,
            "TotalMinutes": 0.07229113,
            "TotalSeconds": 4.3374678
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_ae38e9fc-4db5-4172-8954-fe64e3e59e6d",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0c91d161-b6ae-41fa-9bfa-b03991a212ce",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1206408,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 120,
            "Microseconds": 640,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3963055555555556E-06,
            "TotalHours": 3.351133333333333E-05,
            "TotalMilliseconds": 120.6408,
            "TotalMicroseconds": 120640.8,
            "TotalNanoseconds": 120640800.0,
            "TotalMinutes": 0.00201068,
            "TotalSeconds": 0.1206408
          },
          "FrameworkDuration": {
            "Ticks": 2967369,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 296,
            "Microseconds": 736,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.434454861111111E-06,
            "TotalHours": 8.242691666666667E-05,
            "TotalMilliseconds": 296.7369,
            "TotalMicroseconds": 296736.9,
            "TotalNanoseconds": 296736900.0,
            "TotalMinutes": 0.004945615,
            "TotalSeconds": 0.2967369
          },
          "UserDuration": {
            "Ticks": 39200901,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 920,
            "Microseconds": 90,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 3,
            "TotalDays": 4.537141319444444E-05,
            "TotalHours": 0.0010889139166666666,
            "TotalMilliseconds": 3920.0901,
            "TotalMicroseconds": 3920090.1,
            "TotalNanoseconds": 3920090100.0,
            "TotalMinutes": 0.065334835,
            "TotalSeconds": 3.9200901
          },
          "OwnDuration": {
            "Ticks": -41456899,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -145,
            "Microseconds": -689,
            "Nanoseconds": -900,
            "Minutes": 0,
            "Seconds": -4,
            "TotalDays": -4.798252199074074E-05,
            "TotalHours": -0.0011515805277777778,
            "TotalMilliseconds": -4145.6899,
            "TotalMicroseconds": -4145689.9,
            "TotalNanoseconds": -4145689900.0,
            "TotalMinutes": -0.06909483166666666,
            "TotalSeconds": -4.1456899
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b503736c-5fd8-428d-abbc-2f1c83333ee5",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - CPG Components",
          "Path": [
            "Enhanced Documentation System - CPG Components"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - CPG Components",
          "ExpandedPath": "Enhanced Documentation System - CPG Components",
          "Blocks": [
            "[-] Thread-Safe Operations",
            "[-] Call Graph Builder",
            "[-] Data Flow Tracker"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 7,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 7,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 725277,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 72,
            "Microseconds": 527,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.394409722222222E-07,
            "TotalHours": 2.0146583333333335E-05,
            "TotalMilliseconds": 72.5277,
            "TotalMicroseconds": 72527.7,
            "TotalNanoseconds": 72527700.0,
            "TotalMinutes": 0.001208795,
            "TotalSeconds": 0.0725277
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "CPG",
            "Core"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e1fced62-6ff5-4cd8-a453-3d5c58d73688",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Thread-Safe Operations",
            "[-] Call Graph Builder",
            "[-] Data Flow Tracker"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:16.7654217-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 537485,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 53,
            "Microseconds": 748,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.220891203703704E-07,
            "TotalHours": 1.4930138888888889E-05,
            "TotalMilliseconds": 53.7485,
            "TotalMicroseconds": 53748.5,
            "TotalNanoseconds": 53748500.0,
            "TotalMinutes": 0.0008958083333333334,
            "TotalSeconds": 0.0537485
          },
          "UserDuration": {
            "Ticks": 187792,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 18,
            "Microseconds": 779,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.1735185185185184E-07,
            "TotalHours": 5.2164444444444446E-06,
            "TotalMilliseconds": 18.7792,
            "TotalMicroseconds": 18779.2,
            "TotalNanoseconds": 18779200.0,
            "TotalMinutes": 0.00031298666666666666,
            "TotalSeconds": 0.0187792
          },
          "OwnDuration": {
            "Ticks": 725277,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 72,
            "Microseconds": 527,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.394409722222222E-07,
            "TotalHours": 2.0146583333333335E-05,
            "TotalMilliseconds": 72.5277,
            "TotalMicroseconds": 72527.7,
            "TotalNanoseconds": 72527700.0,
            "TotalMinutes": 0.001208795,
            "TotalSeconds": 0.0725277
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "4f6d5987-259d-4a4d-b35f-8b09077ef656",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 290,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": null,
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should create thread-safe CPG wrapper",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should create thread-safe CPG wrapper",
            "Data": null,
            "ExpandedName": "Should create thread-safe CPG wrapper",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should create thread-safe CPG wrapper",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 354,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle concurrent operations safely",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should handle concurrent operations safely",
            "Data": null,
            "ExpandedName": "Should handle concurrent operations safely",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should handle concurrent operations safely",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 363,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should provide thread safety statistics",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should provide thread safety statistics",
            "Data": null,
            "ExpandedName": "Should provide thread safety statistics",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should provide thread safety statistics",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 383,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": true,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }",
            "Type": 19,
            "Start": 17279,
            "Length": 2106,
            "StartLine": 352,
            "StartColumn": 42,
            "EndLine": 390,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "9128a9df-53d8-43d0-a90e-512a2f006dc7",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }",
            "Parent": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }"
          }
        },
        "StartLine": 352,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 3,
        "OwnPassedCount": 0,
        "OwnFailedCount": 3,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": true,
      "Last": false,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 354,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should handle concurrent operations safely",
      "Path": [
        "Enhanced Documentation System - CPG Components",
        "Thread-Safe Operations",
        "Should handle concurrent operations safely"
      ],
      "Data": null,
      "ExpandedName": "Should handle concurrent operations safely",
      "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should handle concurrent operations safely",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }",
          "Type": 19,
          "Start": 18184,
          "Length": 737,
          "StartLine": 363,
          "StartColumn": 130,
          "EndLine": 381,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "0881dba1-d0e9-4abd-9294-5bb2a13e4d5f",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "$cpg = New-ThreadSafeCPG $results = @() $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                } $results = $jobs | Wait-Job | Receive-Job $jobs | Remove-Job $results.Count | Should -Be 10 $results | Should -Match \"Success-\"",
            "Traps": null,
            "Extent": "$cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"",
            "Parent": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 363,
            "StartColumnNumber": 130,
            "EndLineNumber": 381,
            "EndColumnNumber": 14,
            "Text": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }",
            "StartOffset": 18184,
            "EndOffset": 18921
          },
          "Parent": {
            "ScriptBlock": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }",
            "Parent": "It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Thread-Safe Operations",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Thread-Safe Operations"
        ],
        "Data": null,
        "ExpandedName": "Thread-Safe Operations",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should create thread-safe CPG wrapper",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should create thread-safe CPG wrapper",
            "Data": null,
            "ExpandedName": "Should create thread-safe CPG wrapper",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should create thread-safe CPG wrapper",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 354,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle concurrent operations safely",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should handle concurrent operations safely",
            "Data": null,
            "ExpandedName": "Should handle concurrent operations safely",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should handle concurrent operations safely",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 363,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should provide thread safety statistics",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should provide thread safety statistics",
            "Data": null,
            "ExpandedName": "Should provide thread safety statistics",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should provide thread safety statistics",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 383,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 3,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 3,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:12:03.5268689-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:12:03.5268689Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 43374678,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 337,
            "Microseconds": 467,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.020217361111111E-05,
            "TotalHours": 0.0012048521666666668,
            "TotalMilliseconds": 4337.4678,
            "TotalMicroseconds": 4337467.8,
            "TotalNanoseconds": 4337467800.0,
            "TotalMinutes": 0.07229113,
            "TotalSeconds": 4.3374678
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_ae38e9fc-4db5-4172-8954-fe64e3e59e6d",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0c91d161-b6ae-41fa-9bfa-b03991a212ce",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1206408,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 120,
            "Microseconds": 640,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3963055555555556E-06,
            "TotalHours": 3.351133333333333E-05,
            "TotalMilliseconds": 120.6408,
            "TotalMicroseconds": 120640.8,
            "TotalNanoseconds": 120640800.0,
            "TotalMinutes": 0.00201068,
            "TotalSeconds": 0.1206408
          },
          "FrameworkDuration": {
            "Ticks": 2967369,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 296,
            "Microseconds": 736,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.434454861111111E-06,
            "TotalHours": 8.242691666666667E-05,
            "TotalMilliseconds": 296.7369,
            "TotalMicroseconds": 296736.9,
            "TotalNanoseconds": 296736900.0,
            "TotalMinutes": 0.004945615,
            "TotalSeconds": 0.2967369
          },
          "UserDuration": {
            "Ticks": 39200901,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 920,
            "Microseconds": 90,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 3,
            "TotalDays": 4.537141319444444E-05,
            "TotalHours": 0.0010889139166666666,
            "TotalMilliseconds": 3920.0901,
            "TotalMicroseconds": 3920090.1,
            "TotalNanoseconds": 3920090100.0,
            "TotalMinutes": 0.065334835,
            "TotalSeconds": 3.9200901
          },
          "OwnDuration": {
            "Ticks": -41456899,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -145,
            "Microseconds": -689,
            "Nanoseconds": -900,
            "Minutes": 0,
            "Seconds": -4,
            "TotalDays": -4.798252199074074E-05,
            "TotalHours": -0.0011515805277777778,
            "TotalMilliseconds": -4145.6899,
            "TotalMicroseconds": -4145689.9,
            "TotalNanoseconds": -4145689900.0,
            "TotalMinutes": -0.06909483166666666,
            "TotalSeconds": -4.1456899
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b503736c-5fd8-428d-abbc-2f1c83333ee5",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - CPG Components",
          "Path": [
            "Enhanced Documentation System - CPG Components"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - CPG Components",
          "ExpandedPath": "Enhanced Documentation System - CPG Components",
          "Blocks": [
            "[-] Thread-Safe Operations",
            "[-] Call Graph Builder",
            "[-] Data Flow Tracker"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 7,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 7,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 725277,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 72,
            "Microseconds": 527,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.394409722222222E-07,
            "TotalHours": 2.0146583333333335E-05,
            "TotalMilliseconds": 72.5277,
            "TotalMicroseconds": 72527.7,
            "TotalNanoseconds": 72527700.0,
            "TotalMinutes": 0.001208795,
            "TotalSeconds": 0.0725277
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "CPG",
            "Core"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e1fced62-6ff5-4cd8-a453-3d5c58d73688",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Thread-Safe Operations",
            "[-] Call Graph Builder",
            "[-] Data Flow Tracker"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:16.7654217-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 537485,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 53,
            "Microseconds": 748,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.220891203703704E-07,
            "TotalHours": 1.4930138888888889E-05,
            "TotalMilliseconds": 53.7485,
            "TotalMicroseconds": 53748.5,
            "TotalNanoseconds": 53748500.0,
            "TotalMinutes": 0.0008958083333333334,
            "TotalSeconds": 0.0537485
          },
          "UserDuration": {
            "Ticks": 187792,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 18,
            "Microseconds": 779,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.1735185185185184E-07,
            "TotalHours": 5.2164444444444446E-06,
            "TotalMilliseconds": 18.7792,
            "TotalMicroseconds": 18779.2,
            "TotalNanoseconds": 18779200.0,
            "TotalMinutes": 0.00031298666666666666,
            "TotalSeconds": 0.0187792
          },
          "OwnDuration": {
            "Ticks": 725277,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 72,
            "Microseconds": 527,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.394409722222222E-07,
            "TotalHours": 2.0146583333333335E-05,
            "TotalMilliseconds": 72.5277,
            "TotalMicroseconds": 72527.7,
            "TotalNanoseconds": 72527700.0,
            "TotalMinutes": 0.001208795,
            "TotalSeconds": 0.0725277
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "4f6d5987-259d-4a4d-b35f-8b09077ef656",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 290,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": null,
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should create thread-safe CPG wrapper",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should create thread-safe CPG wrapper",
            "Data": null,
            "ExpandedName": "Should create thread-safe CPG wrapper",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should create thread-safe CPG wrapper",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 354,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle concurrent operations safely",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should handle concurrent operations safely",
            "Data": null,
            "ExpandedName": "Should handle concurrent operations safely",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should handle concurrent operations safely",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 363,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should provide thread safety statistics",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should provide thread safety statistics",
            "Data": null,
            "ExpandedName": "Should provide thread safety statistics",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should provide thread safety statistics",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 383,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": true,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }",
            "Type": 19,
            "Start": 17279,
            "Length": 2106,
            "StartLine": 352,
            "StartColumn": 42,
            "EndLine": 390,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "9128a9df-53d8-43d0-a90e-512a2f006dc7",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }",
            "Parent": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }"
          }
        },
        "StartLine": 352,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 3,
        "OwnPassedCount": 0,
        "OwnFailedCount": 3,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": false,
      "Last": false,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 363,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should provide thread safety statistics",
      "Path": [
        "Enhanced Documentation System - CPG Components",
        "Thread-Safe Operations",
        "Should provide thread safety statistics"
      ],
      "Data": null,
      "ExpandedName": "Should provide thread safety statistics",
      "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should provide thread safety statistics",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }",
          "Type": 19,
          "Start": 19063,
          "Length": 311,
          "StartLine": 383,
          "StartColumn": 127,
          "EndLine": 389,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "456e5c44-2900-473a-9e06-1d0ed647a195",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "$stats = Get-ThreadSafetyStats $stats | Should -Not -BeNullOrEmpty $stats.TotalOperations | Should -BeOfType [int] $stats.ReadOperations | Should -BeOfType [int] $stats.WriteOperations | Should -BeOfType [int]",
            "Traps": null,
            "Extent": "$stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]",
            "Parent": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 383,
            "StartColumnNumber": 127,
            "EndLineNumber": 389,
            "EndColumnNumber": 14,
            "Text": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }",
            "StartOffset": 19063,
            "EndOffset": 19374
          },
          "Parent": {
            "ScriptBlock": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }",
            "Parent": "It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Thread-Safe Operations",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Thread-Safe Operations"
        ],
        "Data": null,
        "ExpandedName": "Thread-Safe Operations",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should create thread-safe CPG wrapper",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should create thread-safe CPG wrapper",
            "Data": null,
            "ExpandedName": "Should create thread-safe CPG wrapper",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should create thread-safe CPG wrapper",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 354,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle concurrent operations safely",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should handle concurrent operations safely",
            "Data": null,
            "ExpandedName": "Should handle concurrent operations safely",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should handle concurrent operations safely",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 363,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should provide thread safety statistics",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should provide thread safety statistics",
            "Data": null,
            "ExpandedName": "Should provide thread safety statistics",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should provide thread safety statistics",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 383,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 3,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 3,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:12:03.5268689-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:12:03.5268689Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 43374678,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 337,
            "Microseconds": 467,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.020217361111111E-05,
            "TotalHours": 0.0012048521666666668,
            "TotalMilliseconds": 4337.4678,
            "TotalMicroseconds": 4337467.8,
            "TotalNanoseconds": 4337467800.0,
            "TotalMinutes": 0.07229113,
            "TotalSeconds": 4.3374678
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_ae38e9fc-4db5-4172-8954-fe64e3e59e6d",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0c91d161-b6ae-41fa-9bfa-b03991a212ce",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1206408,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 120,
            "Microseconds": 640,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3963055555555556E-06,
            "TotalHours": 3.351133333333333E-05,
            "TotalMilliseconds": 120.6408,
            "TotalMicroseconds": 120640.8,
            "TotalNanoseconds": 120640800.0,
            "TotalMinutes": 0.00201068,
            "TotalSeconds": 0.1206408
          },
          "FrameworkDuration": {
            "Ticks": 2967369,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 296,
            "Microseconds": 736,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.434454861111111E-06,
            "TotalHours": 8.242691666666667E-05,
            "TotalMilliseconds": 296.7369,
            "TotalMicroseconds": 296736.9,
            "TotalNanoseconds": 296736900.0,
            "TotalMinutes": 0.004945615,
            "TotalSeconds": 0.2967369
          },
          "UserDuration": {
            "Ticks": 39200901,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 920,
            "Microseconds": 90,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 3,
            "TotalDays": 4.537141319444444E-05,
            "TotalHours": 0.0010889139166666666,
            "TotalMilliseconds": 3920.0901,
            "TotalMicroseconds": 3920090.1,
            "TotalNanoseconds": 3920090100.0,
            "TotalMinutes": 0.065334835,
            "TotalSeconds": 3.9200901
          },
          "OwnDuration": {
            "Ticks": -41456899,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -145,
            "Microseconds": -689,
            "Nanoseconds": -900,
            "Minutes": 0,
            "Seconds": -4,
            "TotalDays": -4.798252199074074E-05,
            "TotalHours": -0.0011515805277777778,
            "TotalMilliseconds": -4145.6899,
            "TotalMicroseconds": -4145689.9,
            "TotalNanoseconds": -4145689900.0,
            "TotalMinutes": -0.06909483166666666,
            "TotalSeconds": -4.1456899
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b503736c-5fd8-428d-abbc-2f1c83333ee5",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - CPG Components",
          "Path": [
            "Enhanced Documentation System - CPG Components"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - CPG Components",
          "ExpandedPath": "Enhanced Documentation System - CPG Components",
          "Blocks": [
            "[-] Thread-Safe Operations",
            "[-] Call Graph Builder",
            "[-] Data Flow Tracker"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 7,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 7,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 725277,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 72,
            "Microseconds": 527,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.394409722222222E-07,
            "TotalHours": 2.0146583333333335E-05,
            "TotalMilliseconds": 72.5277,
            "TotalMicroseconds": 72527.7,
            "TotalNanoseconds": 72527700.0,
            "TotalMinutes": 0.001208795,
            "TotalSeconds": 0.0725277
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "CPG",
            "Core"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e1fced62-6ff5-4cd8-a453-3d5c58d73688",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Thread-Safe Operations",
            "[-] Call Graph Builder",
            "[-] Data Flow Tracker"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:16.7654217-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 537485,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 53,
            "Microseconds": 748,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.220891203703704E-07,
            "TotalHours": 1.4930138888888889E-05,
            "TotalMilliseconds": 53.7485,
            "TotalMicroseconds": 53748.5,
            "TotalNanoseconds": 53748500.0,
            "TotalMinutes": 0.0008958083333333334,
            "TotalSeconds": 0.0537485
          },
          "UserDuration": {
            "Ticks": 187792,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 18,
            "Microseconds": 779,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.1735185185185184E-07,
            "TotalHours": 5.2164444444444446E-06,
            "TotalMilliseconds": 18.7792,
            "TotalMicroseconds": 18779.2,
            "TotalNanoseconds": 18779200.0,
            "TotalMinutes": 0.00031298666666666666,
            "TotalSeconds": 0.0187792
          },
          "OwnDuration": {
            "Ticks": 725277,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 72,
            "Microseconds": 527,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.394409722222222E-07,
            "TotalHours": 2.0146583333333335E-05,
            "TotalMilliseconds": 72.5277,
            "TotalMicroseconds": 72527.7,
            "TotalNanoseconds": 72527700.0,
            "TotalMinutes": 0.001208795,
            "TotalSeconds": 0.0725277
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "4f6d5987-259d-4a4d-b35f-8b09077ef656",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 290,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": null,
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should create thread-safe CPG wrapper",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should create thread-safe CPG wrapper",
            "Data": null,
            "ExpandedName": "Should create thread-safe CPG wrapper",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should create thread-safe CPG wrapper",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 354,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle concurrent operations safely",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should handle concurrent operations safely",
            "Data": null,
            "ExpandedName": "Should handle concurrent operations safely",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should handle concurrent operations safely",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 363,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should provide thread safety statistics",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should provide thread safety statistics",
            "Data": null,
            "ExpandedName": "Should provide thread safety statistics",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should provide thread safety statistics",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 383,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": true,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }",
            "Type": 19,
            "Start": 17279,
            "Length": 2106,
            "StartLine": 352,
            "StartColumn": 42,
            "EndLine": 390,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "9128a9df-53d8-43d0-a90e-512a2f006dc7",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }",
            "Parent": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }"
          }
        },
        "StartLine": 352,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 3,
        "OwnPassedCount": 0,
        "OwnFailedCount": 3,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": false,
      "Last": true,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 383,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should build call graphs from source code",
      "Path": [
        "Enhanced Documentation System - CPG Components",
        "Call Graph Builder",
        "Should build call graphs from source code"
      ],
      "Data": null,
      "ExpandedName": "Should build call graphs from source code",
      "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should build call graphs from source code",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
          "Type": 19,
          "Start": 19811,
          "Length": 665,
          "StartLine": 399,
          "StartColumn": 125,
          "EndLine": 419,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "8d0f3ea0-de04-4406-8bc7-9e7f57785fc2",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }",
            "Traps": null,
            "Extent": "Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 399,
            "StartColumnNumber": 125,
            "EndLineNumber": 419,
            "EndColumnNumber": 14,
            "Text": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "StartOffset": 19811,
            "EndOffset": 20476
          },
          "Parent": {
            "ScriptBlock": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Parent": "It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Call Graph Builder",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Call Graph Builder"
        ],
        "Data": null,
        "ExpandedName": "Call Graph Builder",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should build call graphs from source code",
            "Path": "Enhanced Documentation System - CPG Components Call Graph Builder Should build call graphs from source code",
            "Data": null,
            "ExpandedName": "Should build call graphs from source code",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should build call graphs from source code",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Call Graph Builder",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 399,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should detect recursive calls",
            "Path": "Enhanced Documentation System - CPG Components Call Graph Builder Should detect recursive calls",
            "Data": null,
            "ExpandedName": "Should detect recursive calls",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should detect recursive calls",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Call Graph Builder",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 421,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 2,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 2,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:12:03.5268689-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:12:03.5268689Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 43374678,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 337,
            "Microseconds": 467,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.020217361111111E-05,
            "TotalHours": 0.0012048521666666668,
            "TotalMilliseconds": 4337.4678,
            "TotalMicroseconds": 4337467.8,
            "TotalNanoseconds": 4337467800.0,
            "TotalMinutes": 0.07229113,
            "TotalSeconds": 4.3374678
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_ae38e9fc-4db5-4172-8954-fe64e3e59e6d",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0c91d161-b6ae-41fa-9bfa-b03991a212ce",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1206408,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 120,
            "Microseconds": 640,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3963055555555556E-06,
            "TotalHours": 3.351133333333333E-05,
            "TotalMilliseconds": 120.6408,
            "TotalMicroseconds": 120640.8,
            "TotalNanoseconds": 120640800.0,
            "TotalMinutes": 0.00201068,
            "TotalSeconds": 0.1206408
          },
          "FrameworkDuration": {
            "Ticks": 2967369,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 296,
            "Microseconds": 736,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.434454861111111E-06,
            "TotalHours": 8.242691666666667E-05,
            "TotalMilliseconds": 296.7369,
            "TotalMicroseconds": 296736.9,
            "TotalNanoseconds": 296736900.0,
            "TotalMinutes": 0.004945615,
            "TotalSeconds": 0.2967369
          },
          "UserDuration": {
            "Ticks": 39200901,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 920,
            "Microseconds": 90,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 3,
            "TotalDays": 4.537141319444444E-05,
            "TotalHours": 0.0010889139166666666,
            "TotalMilliseconds": 3920.0901,
            "TotalMicroseconds": 3920090.1,
            "TotalNanoseconds": 3920090100.0,
            "TotalMinutes": 0.065334835,
            "TotalSeconds": 3.9200901
          },
          "OwnDuration": {
            "Ticks": -41456899,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -145,
            "Microseconds": -689,
            "Nanoseconds": -900,
            "Minutes": 0,
            "Seconds": -4,
            "TotalDays": -4.798252199074074E-05,
            "TotalHours": -0.0011515805277777778,
            "TotalMilliseconds": -4145.6899,
            "TotalMicroseconds": -4145689.9,
            "TotalNanoseconds": -4145689900.0,
            "TotalMinutes": -0.06909483166666666,
            "TotalSeconds": -4.1456899
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b503736c-5fd8-428d-abbc-2f1c83333ee5",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - CPG Components",
          "Path": [
            "Enhanced Documentation System - CPG Components"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - CPG Components",
          "ExpandedPath": "Enhanced Documentation System - CPG Components",
          "Blocks": [
            "[-] Thread-Safe Operations",
            "[-] Call Graph Builder",
            "[-] Data Flow Tracker"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 7,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 7,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 725277,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 72,
            "Microseconds": 527,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.394409722222222E-07,
            "TotalHours": 2.0146583333333335E-05,
            "TotalMilliseconds": 72.5277,
            "TotalMicroseconds": 72527.7,
            "TotalNanoseconds": 72527700.0,
            "TotalMinutes": 0.001208795,
            "TotalSeconds": 0.0725277
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "CPG",
            "Core"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e1fced62-6ff5-4cd8-a453-3d5c58d73688",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Thread-Safe Operations",
            "[-] Call Graph Builder",
            "[-] Data Flow Tracker"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:16.7654217-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 537485,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 53,
            "Microseconds": 748,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.220891203703704E-07,
            "TotalHours": 1.4930138888888889E-05,
            "TotalMilliseconds": 53.7485,
            "TotalMicroseconds": 53748.5,
            "TotalNanoseconds": 53748500.0,
            "TotalMinutes": 0.0008958083333333334,
            "TotalSeconds": 0.0537485
          },
          "UserDuration": {
            "Ticks": 187792,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 18,
            "Microseconds": 779,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.1735185185185184E-07,
            "TotalHours": 5.2164444444444446E-06,
            "TotalMilliseconds": 18.7792,
            "TotalMicroseconds": 18779.2,
            "TotalNanoseconds": 18779200.0,
            "TotalMinutes": 0.00031298666666666666,
            "TotalSeconds": 0.0187792
          },
          "OwnDuration": {
            "Ticks": 725277,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 72,
            "Microseconds": 527,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.394409722222222E-07,
            "TotalHours": 2.0146583333333335E-05,
            "TotalMilliseconds": 72.5277,
            "TotalMicroseconds": 72527.7,
            "TotalNanoseconds": 72527700.0,
            "TotalMinutes": 0.001208795,
            "TotalSeconds": 0.0725277
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "4f6d5987-259d-4a4d-b35f-8b09077ef656",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 290,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 19459,
            "Length": 212,
            "StartLine": 393,
            "StartColumn": 23,
            "EndLine": 397,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "1cbd759b-d381-4722-8fe0-9704109a0376",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }",
            "Parent": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }"
          }
        },
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should build call graphs from source code",
            "Path": "Enhanced Documentation System - CPG Components Call Graph Builder Should build call graphs from source code",
            "Data": null,
            "ExpandedName": "Should build call graphs from source code",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should build call graphs from source code",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Call Graph Builder",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 399,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should detect recursive calls",
            "Path": "Enhanced Documentation System - CPG Components Call Graph Builder Should detect recursive calls",
            "Data": null,
            "ExpandedName": "Should detect recursive calls",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should detect recursive calls",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Call Graph Builder",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 421,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": false,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 19434,
            "Length": 1770,
            "StartLine": 392,
            "StartColumn": 38,
            "EndLine": 437,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "6d2d908c-b8ed-4140-b6a8-270966fd5d3e",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }"
          }
        },
        "StartLine": 392,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 2,
        "OwnPassedCount": 0,
        "OwnFailedCount": 2,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": true,
      "Last": false,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 399,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should detect recursive calls",
      "Path": [
        "Enhanced Documentation System - CPG Components",
        "Call Graph Builder",
        "Should detect recursive calls"
      ],
      "Data": null,
      "ExpandedName": "Should detect recursive calls",
      "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should detect recursive calls",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
          "Type": 19,
          "Start": 20604,
          "Length": 589,
          "StartLine": 421,
          "StartColumn": 113,
          "EndLine": 436,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "dbdcce3d-2f73-44e8-b20d-964990c4e221",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }",
            "Traps": null,
            "Extent": "Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 421,
            "StartColumnNumber": 113,
            "EndLineNumber": 436,
            "EndColumnNumber": 14,
            "Text": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "StartOffset": 20604,
            "EndOffset": 21193
          },
          "Parent": {
            "ScriptBlock": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Parent": "It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Call Graph Builder",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Call Graph Builder"
        ],
        "Data": null,
        "ExpandedName": "Call Graph Builder",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should build call graphs from source code",
            "Path": "Enhanced Documentation System - CPG Components Call Graph Builder Should build call graphs from source code",
            "Data": null,
            "ExpandedName": "Should build call graphs from source code",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should build call graphs from source code",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Call Graph Builder",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 399,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should detect recursive calls",
            "Path": "Enhanced Documentation System - CPG Components Call Graph Builder Should detect recursive calls",
            "Data": null,
            "ExpandedName": "Should detect recursive calls",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should detect recursive calls",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Call Graph Builder",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 421,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 2,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 2,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:12:03.5268689-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:12:03.5268689Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 43374678,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 337,
            "Microseconds": 467,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.020217361111111E-05,
            "TotalHours": 0.0012048521666666668,
            "TotalMilliseconds": 4337.4678,
            "TotalMicroseconds": 4337467.8,
            "TotalNanoseconds": 4337467800.0,
            "TotalMinutes": 0.07229113,
            "TotalSeconds": 4.3374678
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_ae38e9fc-4db5-4172-8954-fe64e3e59e6d",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0c91d161-b6ae-41fa-9bfa-b03991a212ce",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1206408,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 120,
            "Microseconds": 640,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3963055555555556E-06,
            "TotalHours": 3.351133333333333E-05,
            "TotalMilliseconds": 120.6408,
            "TotalMicroseconds": 120640.8,
            "TotalNanoseconds": 120640800.0,
            "TotalMinutes": 0.00201068,
            "TotalSeconds": 0.1206408
          },
          "FrameworkDuration": {
            "Ticks": 2967369,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 296,
            "Microseconds": 736,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.434454861111111E-06,
            "TotalHours": 8.242691666666667E-05,
            "TotalMilliseconds": 296.7369,
            "TotalMicroseconds": 296736.9,
            "TotalNanoseconds": 296736900.0,
            "TotalMinutes": 0.004945615,
            "TotalSeconds": 0.2967369
          },
          "UserDuration": {
            "Ticks": 39200901,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 920,
            "Microseconds": 90,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 3,
            "TotalDays": 4.537141319444444E-05,
            "TotalHours": 0.0010889139166666666,
            "TotalMilliseconds": 3920.0901,
            "TotalMicroseconds": 3920090.1,
            "TotalNanoseconds": 3920090100.0,
            "TotalMinutes": 0.065334835,
            "TotalSeconds": 3.9200901
          },
          "OwnDuration": {
            "Ticks": -41456899,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -145,
            "Microseconds": -689,
            "Nanoseconds": -900,
            "Minutes": 0,
            "Seconds": -4,
            "TotalDays": -4.798252199074074E-05,
            "TotalHours": -0.0011515805277777778,
            "TotalMilliseconds": -4145.6899,
            "TotalMicroseconds": -4145689.9,
            "TotalNanoseconds": -4145689900.0,
            "TotalMinutes": -0.06909483166666666,
            "TotalSeconds": -4.1456899
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b503736c-5fd8-428d-abbc-2f1c83333ee5",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - CPG Components",
          "Path": [
            "Enhanced Documentation System - CPG Components"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - CPG Components",
          "ExpandedPath": "Enhanced Documentation System - CPG Components",
          "Blocks": [
            "[-] Thread-Safe Operations",
            "[-] Call Graph Builder",
            "[-] Data Flow Tracker"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 7,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 7,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 725277,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 72,
            "Microseconds": 527,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.394409722222222E-07,
            "TotalHours": 2.0146583333333335E-05,
            "TotalMilliseconds": 72.5277,
            "TotalMicroseconds": 72527.7,
            "TotalNanoseconds": 72527700.0,
            "TotalMinutes": 0.001208795,
            "TotalSeconds": 0.0725277
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "CPG",
            "Core"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e1fced62-6ff5-4cd8-a453-3d5c58d73688",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Thread-Safe Operations",
            "[-] Call Graph Builder",
            "[-] Data Flow Tracker"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:16.7654217-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 537485,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 53,
            "Microseconds": 748,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.220891203703704E-07,
            "TotalHours": 1.4930138888888889E-05,
            "TotalMilliseconds": 53.7485,
            "TotalMicroseconds": 53748.5,
            "TotalNanoseconds": 53748500.0,
            "TotalMinutes": 0.0008958083333333334,
            "TotalSeconds": 0.0537485
          },
          "UserDuration": {
            "Ticks": 187792,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 18,
            "Microseconds": 779,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.1735185185185184E-07,
            "TotalHours": 5.2164444444444446E-06,
            "TotalMilliseconds": 18.7792,
            "TotalMicroseconds": 18779.2,
            "TotalNanoseconds": 18779200.0,
            "TotalMinutes": 0.00031298666666666666,
            "TotalSeconds": 0.0187792
          },
          "OwnDuration": {
            "Ticks": 725277,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 72,
            "Microseconds": 527,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.394409722222222E-07,
            "TotalHours": 2.0146583333333335E-05,
            "TotalMilliseconds": 72.5277,
            "TotalMicroseconds": 72527.7,
            "TotalNanoseconds": 72527700.0,
            "TotalMinutes": 0.001208795,
            "TotalSeconds": 0.0725277
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "4f6d5987-259d-4a4d-b35f-8b09077ef656",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 290,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 19459,
            "Length": 212,
            "StartLine": 393,
            "StartColumn": 23,
            "EndLine": 397,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "1cbd759b-d381-4722-8fe0-9704109a0376",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }",
            "Parent": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }"
          }
        },
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should build call graphs from source code",
            "Path": "Enhanced Documentation System - CPG Components Call Graph Builder Should build call graphs from source code",
            "Data": null,
            "ExpandedName": "Should build call graphs from source code",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should build call graphs from source code",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Call Graph Builder",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 399,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should detect recursive calls",
            "Path": "Enhanced Documentation System - CPG Components Call Graph Builder Should detect recursive calls",
            "Data": null,
            "ExpandedName": "Should detect recursive calls",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should detect recursive calls",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Call Graph Builder",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 421,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": false,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 19434,
            "Length": 1770,
            "StartLine": 392,
            "StartColumn": 38,
            "EndLine": 437,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "6d2d908c-b8ed-4140-b6a8-270966fd5d3e",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }"
          }
        },
        "StartLine": 392,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 2,
        "OwnPassedCount": 0,
        "OwnFailedCount": 2,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": false,
      "Last": true,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 421,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should track variable definitions and uses",
      "Path": [
        "Enhanced Documentation System - CPG Components",
        "Data Flow Tracker",
        "Should track variable definitions and uses"
      ],
      "Data": null,
      "ExpandedName": "Should track variable definitions and uses",
      "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should track variable definitions and uses",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
          "Type": 19,
          "Start": 21627,
          "Length": 475,
          "StartLine": 446,
          "StartColumn": 125,
          "EndLine": 458,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "f576a3fc-fd5f-4c7d-94fd-bd3249231580",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }",
            "Traps": null,
            "Extent": "Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 446,
            "StartColumnNumber": 125,
            "EndLineNumber": 458,
            "EndColumnNumber": 14,
            "Text": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "StartOffset": 21627,
            "EndOffset": 22102
          },
          "Parent": {
            "ScriptBlock": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Parent": "It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Data Flow Tracker",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Data Flow Tracker"
        ],
        "Data": null,
        "ExpandedName": "Data Flow Tracker",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should track variable definitions and uses",
            "Path": "Enhanced Documentation System - CPG Components Data Flow Tracker Should track variable definitions and uses",
            "Data": null,
            "ExpandedName": "Should track variable definitions and uses",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should track variable definitions and uses",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Data Flow Tracker",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 446,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should perform taint analysis",
            "Path": "Enhanced Documentation System - CPG Components Data Flow Tracker Should perform taint analysis",
            "Data": null,
            "ExpandedName": "Should perform taint analysis",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should perform taint analysis",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Data Flow Tracker",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 460,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 2,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 2,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:12:03.5268689-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:12:03.5268689Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 43374678,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 337,
            "Microseconds": 467,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.020217361111111E-05,
            "TotalHours": 0.0012048521666666668,
            "TotalMilliseconds": 4337.4678,
            "TotalMicroseconds": 4337467.8,
            "TotalNanoseconds": 4337467800.0,
            "TotalMinutes": 0.07229113,
            "TotalSeconds": 4.3374678
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_ae38e9fc-4db5-4172-8954-fe64e3e59e6d",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0c91d161-b6ae-41fa-9bfa-b03991a212ce",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1206408,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 120,
            "Microseconds": 640,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3963055555555556E-06,
            "TotalHours": 3.351133333333333E-05,
            "TotalMilliseconds": 120.6408,
            "TotalMicroseconds": 120640.8,
            "TotalNanoseconds": 120640800.0,
            "TotalMinutes": 0.00201068,
            "TotalSeconds": 0.1206408
          },
          "FrameworkDuration": {
            "Ticks": 2967369,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 296,
            "Microseconds": 736,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.434454861111111E-06,
            "TotalHours": 8.242691666666667E-05,
            "TotalMilliseconds": 296.7369,
            "TotalMicroseconds": 296736.9,
            "TotalNanoseconds": 296736900.0,
            "TotalMinutes": 0.004945615,
            "TotalSeconds": 0.2967369
          },
          "UserDuration": {
            "Ticks": 39200901,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 920,
            "Microseconds": 90,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 3,
            "TotalDays": 4.537141319444444E-05,
            "TotalHours": 0.0010889139166666666,
            "TotalMilliseconds": 3920.0901,
            "TotalMicroseconds": 3920090.1,
            "TotalNanoseconds": 3920090100.0,
            "TotalMinutes": 0.065334835,
            "TotalSeconds": 3.9200901
          },
          "OwnDuration": {
            "Ticks": -41456899,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -145,
            "Microseconds": -689,
            "Nanoseconds": -900,
            "Minutes": 0,
            "Seconds": -4,
            "TotalDays": -4.798252199074074E-05,
            "TotalHours": -0.0011515805277777778,
            "TotalMilliseconds": -4145.6899,
            "TotalMicroseconds": -4145689.9,
            "TotalNanoseconds": -4145689900.0,
            "TotalMinutes": -0.06909483166666666,
            "TotalSeconds": -4.1456899
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b503736c-5fd8-428d-abbc-2f1c83333ee5",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - CPG Components",
          "Path": [
            "Enhanced Documentation System - CPG Components"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - CPG Components",
          "ExpandedPath": "Enhanced Documentation System - CPG Components",
          "Blocks": [
            "[-] Thread-Safe Operations",
            "[-] Call Graph Builder",
            "[-] Data Flow Tracker"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 7,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 7,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 725277,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 72,
            "Microseconds": 527,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.394409722222222E-07,
            "TotalHours": 2.0146583333333335E-05,
            "TotalMilliseconds": 72.5277,
            "TotalMicroseconds": 72527.7,
            "TotalNanoseconds": 72527700.0,
            "TotalMinutes": 0.001208795,
            "TotalSeconds": 0.0725277
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "CPG",
            "Core"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e1fced62-6ff5-4cd8-a453-3d5c58d73688",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Thread-Safe Operations",
            "[-] Call Graph Builder",
            "[-] Data Flow Tracker"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:16.7654217-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 537485,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 53,
            "Microseconds": 748,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.220891203703704E-07,
            "TotalHours": 1.4930138888888889E-05,
            "TotalMilliseconds": 53.7485,
            "TotalMicroseconds": 53748.5,
            "TotalNanoseconds": 53748500.0,
            "TotalMinutes": 0.0008958083333333334,
            "TotalSeconds": 0.0537485
          },
          "UserDuration": {
            "Ticks": 187792,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 18,
            "Microseconds": 779,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.1735185185185184E-07,
            "TotalHours": 5.2164444444444446E-06,
            "TotalMilliseconds": 18.7792,
            "TotalMicroseconds": 18779.2,
            "TotalNanoseconds": 18779200.0,
            "TotalMinutes": 0.00031298666666666666,
            "TotalSeconds": 0.0187792
          },
          "OwnDuration": {
            "Ticks": 725277,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 72,
            "Microseconds": 527,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.394409722222222E-07,
            "TotalHours": 2.0146583333333335E-05,
            "TotalMilliseconds": 72.5277,
            "TotalMicroseconds": 72527.7,
            "TotalNanoseconds": 72527700.0,
            "TotalMinutes": 0.001208795,
            "TotalSeconds": 0.0725277
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "4f6d5987-259d-4a4d-b35f-8b09077ef656",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 290,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 21277,
            "Length": 210,
            "StartLine": 440,
            "StartColumn": 23,
            "EndLine": 444,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "2454aebd-1662-47d2-bcb4-025e8d0d4d29",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }",
            "Parent": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }"
          }
        },
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should track variable definitions and uses",
            "Path": "Enhanced Documentation System - CPG Components Data Flow Tracker Should track variable definitions and uses",
            "Data": null,
            "ExpandedName": "Should track variable definitions and uses",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should track variable definitions and uses",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Data Flow Tracker",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 446,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should perform taint analysis",
            "Path": "Enhanced Documentation System - CPG Components Data Flow Tracker Should perform taint analysis",
            "Data": null,
            "ExpandedName": "Should perform taint analysis",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should perform taint analysis",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Data Flow Tracker",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 460,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": false,
        "Last": true,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 21252,
            "Length": 1551,
            "StartLine": 439,
            "StartColumn": 37,
            "EndLine": 473,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "6641cbdb-0b65-4829-85ab-21524a39d311",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }"
          }
        },
        "StartLine": 439,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 2,
        "OwnPassedCount": 0,
        "OwnFailedCount": 2,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": true,
      "Last": false,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 446,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should perform taint analysis",
      "Path": [
        "Enhanced Documentation System - CPG Components",
        "Data Flow Tracker",
        "Should perform taint analysis"
      ],
      "Data": null,
      "ExpandedName": "Should perform taint analysis",
      "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should perform taint analysis",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
          "Type": 19,
          "Start": 22229,
          "Length": 563,
          "StartLine": 460,
          "StartColumn": 112,
          "EndLine": 472,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "69138754-6557-4312-8f8f-79bfb9d77cea",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }",
            "Traps": null,
            "Extent": "Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 460,
            "StartColumnNumber": 112,
            "EndLineNumber": 472,
            "EndColumnNumber": 14,
            "Text": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "StartOffset": 22229,
            "EndOffset": 22792
          },
          "Parent": {
            "ScriptBlock": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Parent": "It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Data Flow Tracker",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Data Flow Tracker"
        ],
        "Data": null,
        "ExpandedName": "Data Flow Tracker",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should track variable definitions and uses",
            "Path": "Enhanced Documentation System - CPG Components Data Flow Tracker Should track variable definitions and uses",
            "Data": null,
            "ExpandedName": "Should track variable definitions and uses",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should track variable definitions and uses",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Data Flow Tracker",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 446,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should perform taint analysis",
            "Path": "Enhanced Documentation System - CPG Components Data Flow Tracker Should perform taint analysis",
            "Data": null,
            "ExpandedName": "Should perform taint analysis",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should perform taint analysis",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Data Flow Tracker",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 460,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 2,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 2,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:12:03.5268689-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:12:03.5268689Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 43374678,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 337,
            "Microseconds": 467,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.020217361111111E-05,
            "TotalHours": 0.0012048521666666668,
            "TotalMilliseconds": 4337.4678,
            "TotalMicroseconds": 4337467.8,
            "TotalNanoseconds": 4337467800.0,
            "TotalMinutes": 0.07229113,
            "TotalSeconds": 4.3374678
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_ae38e9fc-4db5-4172-8954-fe64e3e59e6d",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0c91d161-b6ae-41fa-9bfa-b03991a212ce",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1206408,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 120,
            "Microseconds": 640,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3963055555555556E-06,
            "TotalHours": 3.351133333333333E-05,
            "TotalMilliseconds": 120.6408,
            "TotalMicroseconds": 120640.8,
            "TotalNanoseconds": 120640800.0,
            "TotalMinutes": 0.00201068,
            "TotalSeconds": 0.1206408
          },
          "FrameworkDuration": {
            "Ticks": 2967369,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 296,
            "Microseconds": 736,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.434454861111111E-06,
            "TotalHours": 8.242691666666667E-05,
            "TotalMilliseconds": 296.7369,
            "TotalMicroseconds": 296736.9,
            "TotalNanoseconds": 296736900.0,
            "TotalMinutes": 0.004945615,
            "TotalSeconds": 0.2967369
          },
          "UserDuration": {
            "Ticks": 39200901,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 920,
            "Microseconds": 90,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 3,
            "TotalDays": 4.537141319444444E-05,
            "TotalHours": 0.0010889139166666666,
            "TotalMilliseconds": 3920.0901,
            "TotalMicroseconds": 3920090.1,
            "TotalNanoseconds": 3920090100.0,
            "TotalMinutes": 0.065334835,
            "TotalSeconds": 3.9200901
          },
          "OwnDuration": {
            "Ticks": -41456899,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -145,
            "Microseconds": -689,
            "Nanoseconds": -900,
            "Minutes": 0,
            "Seconds": -4,
            "TotalDays": -4.798252199074074E-05,
            "TotalHours": -0.0011515805277777778,
            "TotalMilliseconds": -4145.6899,
            "TotalMicroseconds": -4145689.9,
            "TotalNanoseconds": -4145689900.0,
            "TotalMinutes": -0.06909483166666666,
            "TotalSeconds": -4.1456899
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b503736c-5fd8-428d-abbc-2f1c83333ee5",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - CPG Components",
          "Path": [
            "Enhanced Documentation System - CPG Components"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - CPG Components",
          "ExpandedPath": "Enhanced Documentation System - CPG Components",
          "Blocks": [
            "[-] Thread-Safe Operations",
            "[-] Call Graph Builder",
            "[-] Data Flow Tracker"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 7,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 7,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 725277,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 72,
            "Microseconds": 527,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.394409722222222E-07,
            "TotalHours": 2.0146583333333335E-05,
            "TotalMilliseconds": 72.5277,
            "TotalMicroseconds": 72527.7,
            "TotalNanoseconds": 72527700.0,
            "TotalMinutes": 0.001208795,
            "TotalSeconds": 0.0725277
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "CPG",
            "Core"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e1fced62-6ff5-4cd8-a453-3d5c58d73688",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Thread-Safe Operations",
            "[-] Call Graph Builder",
            "[-] Data Flow Tracker"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:16.7654217-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 537485,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 53,
            "Microseconds": 748,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.220891203703704E-07,
            "TotalHours": 1.4930138888888889E-05,
            "TotalMilliseconds": 53.7485,
            "TotalMicroseconds": 53748.5,
            "TotalNanoseconds": 53748500.0,
            "TotalMinutes": 0.0008958083333333334,
            "TotalSeconds": 0.0537485
          },
          "UserDuration": {
            "Ticks": 187792,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 18,
            "Microseconds": 779,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.1735185185185184E-07,
            "TotalHours": 5.2164444444444446E-06,
            "TotalMilliseconds": 18.7792,
            "TotalMicroseconds": 18779.2,
            "TotalNanoseconds": 18779200.0,
            "TotalMinutes": 0.00031298666666666666,
            "TotalSeconds": 0.0187792
          },
          "OwnDuration": {
            "Ticks": 725277,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 72,
            "Microseconds": 527,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.394409722222222E-07,
            "TotalHours": 2.0146583333333335E-05,
            "TotalMilliseconds": 72.5277,
            "TotalMicroseconds": 72527.7,
            "TotalNanoseconds": 72527700.0,
            "TotalMinutes": 0.001208795,
            "TotalSeconds": 0.0725277
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "4f6d5987-259d-4a4d-b35f-8b09077ef656",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Import available CPG modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-CPG] Importing available CPG modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ($script:CPGModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-CPG] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $cpgModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-CPG] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-CPG] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-CPG] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 290,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 21277,
            "Length": 210,
            "StartLine": 440,
            "StartColumn": 23,
            "EndLine": 444,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "2454aebd-1662-47d2-bcb4-025e8d0d4d29",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }",
            "Parent": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }"
          }
        },
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should track variable definitions and uses",
            "Path": "Enhanced Documentation System - CPG Components Data Flow Tracker Should track variable definitions and uses",
            "Data": null,
            "ExpandedName": "Should track variable definitions and uses",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should track variable definitions and uses",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Data Flow Tracker",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 446,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should perform taint analysis",
            "Path": "Enhanced Documentation System - CPG Components Data Flow Tracker Should perform taint analysis",
            "Data": null,
            "ExpandedName": "Should perform taint analysis",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should perform taint analysis",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Data Flow Tracker",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 460,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": false,
        "Last": true,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 21252,
            "Length": 1551,
            "StartLine": 439,
            "StartColumn": 37,
            "EndLine": 473,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "6641cbdb-0b65-4829-85ab-21524a39d311",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }"
          }
        },
        "StartLine": 439,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 2,
        "OwnPassedCount": 0,
        "OwnFailedCount": 2,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": false,
      "Last": true,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 460,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should connect to Ollama service",
      "Path": [
        "Enhanced Documentation System - LLM Integration",
        "Ollama API Integration",
        "Should connect to Ollama service"
      ],
      "Data": null,
      "ExpandedName": "Should connect to Ollama service",
      "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should connect to Ollama service",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }",
          "Type": 19,
          "Start": 25513,
          "Length": 222,
          "StartLine": 526,
          "StartColumn": 88,
          "EndLine": 531,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "56c7e4de-dbad-4159-bf02-17825f60a697",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }",
            "Traps": null,
            "Extent": "Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 526,
            "StartColumnNumber": 88,
            "EndLineNumber": 531,
            "EndColumnNumber": 14,
            "Text": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }",
            "StartOffset": 25513,
            "EndOffset": 25735
          },
          "Parent": {
            "ScriptBlock": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }",
            "Parent": "It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": true,
      "Block": {
        "Name": "Ollama API Integration",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Ollama API Integration"
        ],
        "Data": null,
        "ExpandedName": "Ollama API Integration",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should connect to Ollama service",
            "Path": "Enhanced Documentation System - LLM Integration Ollama API Integration Should connect to Ollama service",
            "Data": null,
            "ExpandedName": "Should connect to Ollama service",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should connect to Ollama service",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": true,
            "Block": "[!] Ollama API Integration",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 526,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should list available models",
            "Path": "Enhanced Documentation System - LLM Integration Ollama API Integration Should list available models",
            "Data": null,
            "ExpandedName": "Should list available models",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should list available models",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": true,
            "Block": "[!] Ollama API Integration",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 533,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate responses for code analysis",
            "Path": "Enhanced Documentation System - LLM Integration Ollama API Integration Should generate responses for code analysis",
            "Data": null,
            "ExpandedName": "Should generate responses for code analysis",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should generate responses for code analysis",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": true,
            "Block": "[!] Ollama API Integration",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 541,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Skipped",
        "FailedCount": 3,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 3,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": true,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:12:03.5268689-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:12:03.5268689Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 43374678,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 337,
            "Microseconds": 467,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.020217361111111E-05,
            "TotalHours": 0.0012048521666666668,
            "TotalMilliseconds": 4337.4678,
            "TotalMicroseconds": 4337467.8,
            "TotalNanoseconds": 4337467800.0,
            "TotalMinutes": 0.07229113,
            "TotalSeconds": 4.3374678
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_ae38e9fc-4db5-4172-8954-fe64e3e59e6d",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0c91d161-b6ae-41fa-9bfa-b03991a212ce",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1206408,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 120,
            "Microseconds": 640,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3963055555555556E-06,
            "TotalHours": 3.351133333333333E-05,
            "TotalMilliseconds": 120.6408,
            "TotalMicroseconds": 120640.8,
            "TotalNanoseconds": 120640800.0,
            "TotalMinutes": 0.00201068,
            "TotalSeconds": 0.1206408
          },
          "FrameworkDuration": {
            "Ticks": 2967369,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 296,
            "Microseconds": 736,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.434454861111111E-06,
            "TotalHours": 8.242691666666667E-05,
            "TotalMilliseconds": 296.7369,
            "TotalMicroseconds": 296736.9,
            "TotalNanoseconds": 296736900.0,
            "TotalMinutes": 0.004945615,
            "TotalSeconds": 0.2967369
          },
          "UserDuration": {
            "Ticks": 39200901,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 920,
            "Microseconds": 90,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 3,
            "TotalDays": 4.537141319444444E-05,
            "TotalHours": 0.0010889139166666666,
            "TotalMilliseconds": 3920.0901,
            "TotalMicroseconds": 3920090.1,
            "TotalNanoseconds": 3920090100.0,
            "TotalMinutes": 0.065334835,
            "TotalSeconds": 3.9200901
          },
          "OwnDuration": {
            "Ticks": -41456899,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -145,
            "Microseconds": -689,
            "Nanoseconds": -900,
            "Minutes": 0,
            "Seconds": -4,
            "TotalDays": -4.798252199074074E-05,
            "TotalHours": -0.0011515805277777778,
            "TotalMilliseconds": -4145.6899,
            "TotalMicroseconds": -4145689.9,
            "TotalNanoseconds": -4145689900.0,
            "TotalMinutes": -0.06909483166666666,
            "TotalSeconds": -4.1456899
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b503736c-5fd8-428d-abbc-2f1c83333ee5",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - LLM Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - LLM Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration",
          "Blocks": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 9,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 9,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 21704310,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 170,
            "Microseconds": 431,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.5120729166666666E-05,
            "TotalHours": 0.0006028975,
            "TotalMilliseconds": 2170.431,
            "TotalMicroseconds": 2170431.0,
            "TotalNanoseconds": 2170431000.0,
            "TotalMinutes": 0.03617385,
            "TotalSeconds": 2.170431
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "LLM",
            "Integration"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b746f930-7e6b-4fba-a60d-121f3a577b69",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:16.8379525-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 614595,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 61,
            "Microseconds": 459,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 7.113368055555555E-07,
            "TotalHours": 1.7072083333333332E-05,
            "TotalMilliseconds": 61.4595,
            "TotalMicroseconds": 61459.5,
            "TotalNanoseconds": 61459500.0,
            "TotalMinutes": 0.001024325,
            "TotalSeconds": 0.0614595
          },
          "UserDuration": {
            "Ticks": 21089715,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 108,
            "Microseconds": 971,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.440939236111111E-05,
            "TotalHours": 0.0005858254166666667,
            "TotalMilliseconds": 2108.9715,
            "TotalMicroseconds": 2108971.5,
            "TotalNanoseconds": 2108971500.0,
            "TotalMinutes": 0.035149525,
            "TotalSeconds": 2.1089715
          },
          "OwnDuration": {
            "Ticks": 21704310,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 170,
            "Microseconds": 431,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.5120729166666666E-05,
            "TotalHours": 0.0006028975,
            "TotalMilliseconds": 2170.431,
            "TotalMicroseconds": 2170431.0,
            "TotalNanoseconds": 2170431000.0,
            "TotalMinutes": 0.03617385,
            "TotalSeconds": 2.170431
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "8f73dcf0-2fdd-4fde-8632-627345783476",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 480,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": null,
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should connect to Ollama service",
            "Path": "Enhanced Documentation System - LLM Integration Ollama API Integration Should connect to Ollama service",
            "Data": null,
            "ExpandedName": "Should connect to Ollama service",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should connect to Ollama service",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": true,
            "Block": "[!] Ollama API Integration",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 526,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should list available models",
            "Path": "Enhanced Documentation System - LLM Integration Ollama API Integration Should list available models",
            "Data": null,
            "ExpandedName": "Should list available models",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should list available models",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": true,
            "Block": "[!] Ollama API Integration",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 533,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate responses for code analysis",
            "Path": "Enhanced Documentation System - LLM Integration Ollama API Integration Should generate responses for code analysis",
            "Data": null,
            "ExpandedName": "Should generate responses for code analysis",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should generate responses for code analysis",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": true,
            "Block": "[!] Ollama API Integration",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 541,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": true,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 25423,
            "Length": 1360,
            "StartLine": 525,
            "StartColumn": 42,
            "EndLine": 551,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "89912ec4-4d17-43bc-8e36-02f8d7fca109",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }"
          }
        },
        "StartLine": 525,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 3,
        "OwnPassedCount": 0,
        "OwnFailedCount": 3,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": true,
      "Last": false,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 526,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should list available models",
      "Path": [
        "Enhanced Documentation System - LLM Integration",
        "Ollama API Integration",
        "Should list available models"
      ],
      "Data": null,
      "ExpandedName": "Should list available models",
      "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should list available models",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }",
          "Type": 19,
          "Start": 25834,
          "Length": 279,
          "StartLine": 533,
          "StartColumn": 84,
          "EndLine": 539,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "a4a42429-05b7-4f02-88e2-c8bb1af580f6",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }",
            "Traps": null,
            "Extent": "Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 533,
            "StartColumnNumber": 84,
            "EndLineNumber": 539,
            "EndColumnNumber": 14,
            "Text": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }",
            "StartOffset": 25834,
            "EndOffset": 26113
          },
          "Parent": {
            "ScriptBlock": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }",
            "Parent": "It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": true,
      "Block": {
        "Name": "Ollama API Integration",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Ollama API Integration"
        ],
        "Data": null,
        "ExpandedName": "Ollama API Integration",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should connect to Ollama service",
            "Path": "Enhanced Documentation System - LLM Integration Ollama API Integration Should connect to Ollama service",
            "Data": null,
            "ExpandedName": "Should connect to Ollama service",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should connect to Ollama service",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": true,
            "Block": "[!] Ollama API Integration",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 526,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should list available models",
            "Path": "Enhanced Documentation System - LLM Integration Ollama API Integration Should list available models",
            "Data": null,
            "ExpandedName": "Should list available models",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should list available models",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": true,
            "Block": "[!] Ollama API Integration",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 533,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate responses for code analysis",
            "Path": "Enhanced Documentation System - LLM Integration Ollama API Integration Should generate responses for code analysis",
            "Data": null,
            "ExpandedName": "Should generate responses for code analysis",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should generate responses for code analysis",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": true,
            "Block": "[!] Ollama API Integration",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 541,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Skipped",
        "FailedCount": 3,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 3,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": true,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:12:03.5268689-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:12:03.5268689Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 43374678,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 337,
            "Microseconds": 467,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.020217361111111E-05,
            "TotalHours": 0.0012048521666666668,
            "TotalMilliseconds": 4337.4678,
            "TotalMicroseconds": 4337467.8,
            "TotalNanoseconds": 4337467800.0,
            "TotalMinutes": 0.07229113,
            "TotalSeconds": 4.3374678
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_ae38e9fc-4db5-4172-8954-fe64e3e59e6d",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0c91d161-b6ae-41fa-9bfa-b03991a212ce",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1206408,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 120,
            "Microseconds": 640,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3963055555555556E-06,
            "TotalHours": 3.351133333333333E-05,
            "TotalMilliseconds": 120.6408,
            "TotalMicroseconds": 120640.8,
            "TotalNanoseconds": 120640800.0,
            "TotalMinutes": 0.00201068,
            "TotalSeconds": 0.1206408
          },
          "FrameworkDuration": {
            "Ticks": 2967369,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 296,
            "Microseconds": 736,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.434454861111111E-06,
            "TotalHours": 8.242691666666667E-05,
            "TotalMilliseconds": 296.7369,
            "TotalMicroseconds": 296736.9,
            "TotalNanoseconds": 296736900.0,
            "TotalMinutes": 0.004945615,
            "TotalSeconds": 0.2967369
          },
          "UserDuration": {
            "Ticks": 39200901,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 920,
            "Microseconds": 90,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 3,
            "TotalDays": 4.537141319444444E-05,
            "TotalHours": 0.0010889139166666666,
            "TotalMilliseconds": 3920.0901,
            "TotalMicroseconds": 3920090.1,
            "TotalNanoseconds": 3920090100.0,
            "TotalMinutes": 0.065334835,
            "TotalSeconds": 3.9200901
          },
          "OwnDuration": {
            "Ticks": -41456899,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -145,
            "Microseconds": -689,
            "Nanoseconds": -900,
            "Minutes": 0,
            "Seconds": -4,
            "TotalDays": -4.798252199074074E-05,
            "TotalHours": -0.0011515805277777778,
            "TotalMilliseconds": -4145.6899,
            "TotalMicroseconds": -4145689.9,
            "TotalNanoseconds": -4145689900.0,
            "TotalMinutes": -0.06909483166666666,
            "TotalSeconds": -4.1456899
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b503736c-5fd8-428d-abbc-2f1c83333ee5",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - LLM Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - LLM Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration",
          "Blocks": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 9,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 9,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 21704310,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 170,
            "Microseconds": 431,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.5120729166666666E-05,
            "TotalHours": 0.0006028975,
            "TotalMilliseconds": 2170.431,
            "TotalMicroseconds": 2170431.0,
            "TotalNanoseconds": 2170431000.0,
            "TotalMinutes": 0.03617385,
            "TotalSeconds": 2.170431
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "LLM",
            "Integration"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b746f930-7e6b-4fba-a60d-121f3a577b69",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:16.8379525-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 614595,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 61,
            "Microseconds": 459,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 7.113368055555555E-07,
            "TotalHours": 1.7072083333333332E-05,
            "TotalMilliseconds": 61.4595,
            "TotalMicroseconds": 61459.5,
            "TotalNanoseconds": 61459500.0,
            "TotalMinutes": 0.001024325,
            "TotalSeconds": 0.0614595
          },
          "UserDuration": {
            "Ticks": 21089715,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 108,
            "Microseconds": 971,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.440939236111111E-05,
            "TotalHours": 0.0005858254166666667,
            "TotalMilliseconds": 2108.9715,
            "TotalMicroseconds": 2108971.5,
            "TotalNanoseconds": 2108971500.0,
            "TotalMinutes": 0.035149525,
            "TotalSeconds": 2.1089715
          },
          "OwnDuration": {
            "Ticks": 21704310,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 170,
            "Microseconds": 431,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.5120729166666666E-05,
            "TotalHours": 0.0006028975,
            "TotalMilliseconds": 2170.431,
            "TotalMicroseconds": 2170431.0,
            "TotalNanoseconds": 2170431000.0,
            "TotalMinutes": 0.03617385,
            "TotalSeconds": 2.170431
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "8f73dcf0-2fdd-4fde-8632-627345783476",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 480,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": null,
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should connect to Ollama service",
            "Path": "Enhanced Documentation System - LLM Integration Ollama API Integration Should connect to Ollama service",
            "Data": null,
            "ExpandedName": "Should connect to Ollama service",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should connect to Ollama service",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": true,
            "Block": "[!] Ollama API Integration",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 526,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should list available models",
            "Path": "Enhanced Documentation System - LLM Integration Ollama API Integration Should list available models",
            "Data": null,
            "ExpandedName": "Should list available models",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should list available models",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": true,
            "Block": "[!] Ollama API Integration",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 533,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate responses for code analysis",
            "Path": "Enhanced Documentation System - LLM Integration Ollama API Integration Should generate responses for code analysis",
            "Data": null,
            "ExpandedName": "Should generate responses for code analysis",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should generate responses for code analysis",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": true,
            "Block": "[!] Ollama API Integration",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 541,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": true,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 25423,
            "Length": 1360,
            "StartLine": 525,
            "StartColumn": 42,
            "EndLine": 551,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "89912ec4-4d17-43bc-8e36-02f8d7fca109",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }"
          }
        },
        "StartLine": 525,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 3,
        "OwnPassedCount": 0,
        "OwnFailedCount": 3,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": false,
      "Last": false,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 533,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should generate responses for code analysis",
      "Path": [
        "Enhanced Documentation System - LLM Integration",
        "Ollama API Integration",
        "Should generate responses for code analysis"
      ],
      "Data": null,
      "ExpandedName": "Should generate responses for code analysis",
      "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should generate responses for code analysis",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }",
          "Type": 19,
          "Start": 26227,
          "Length": 545,
          "StartLine": 541,
          "StartColumn": 99,
          "EndLine": 550,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "81f3c91a-1b3f-4cf3-a258-4d0c6a2f641c",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }",
            "Traps": null,
            "Extent": "Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 541,
            "StartColumnNumber": 99,
            "EndLineNumber": 550,
            "EndColumnNumber": 14,
            "Text": "{\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }",
            "StartOffset": 26227,
            "EndOffset": 26772
          },
          "Parent": {
            "ScriptBlock": "{\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }",
            "Parent": "It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": true,
      "Block": {
        "Name": "Ollama API Integration",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Ollama API Integration"
        ],
        "Data": null,
        "ExpandedName": "Ollama API Integration",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should connect to Ollama service",
            "Path": "Enhanced Documentation System - LLM Integration Ollama API Integration Should connect to Ollama service",
            "Data": null,
            "ExpandedName": "Should connect to Ollama service",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should connect to Ollama service",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": true,
            "Block": "[!] Ollama API Integration",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 526,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should list available models",
            "Path": "Enhanced Documentation System - LLM Integration Ollama API Integration Should list available models",
            "Data": null,
            "ExpandedName": "Should list available models",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should list available models",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": true,
            "Block": "[!] Ollama API Integration",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 533,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate responses for code analysis",
            "Path": "Enhanced Documentation System - LLM Integration Ollama API Integration Should generate responses for code analysis",
            "Data": null,
            "ExpandedName": "Should generate responses for code analysis",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should generate responses for code analysis",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": true,
            "Block": "[!] Ollama API Integration",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 541,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Skipped",
        "FailedCount": 3,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 3,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": true,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:12:03.5268689-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:12:03.5268689Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 43374678,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 337,
            "Microseconds": 467,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.020217361111111E-05,
            "TotalHours": 0.0012048521666666668,
            "TotalMilliseconds": 4337.4678,
            "TotalMicroseconds": 4337467.8,
            "TotalNanoseconds": 4337467800.0,
            "TotalMinutes": 0.07229113,
            "TotalSeconds": 4.3374678
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_ae38e9fc-4db5-4172-8954-fe64e3e59e6d",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0c91d161-b6ae-41fa-9bfa-b03991a212ce",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1206408,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 120,
            "Microseconds": 640,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3963055555555556E-06,
            "TotalHours": 3.351133333333333E-05,
            "TotalMilliseconds": 120.6408,
            "TotalMicroseconds": 120640.8,
            "TotalNanoseconds": 120640800.0,
            "TotalMinutes": 0.00201068,
            "TotalSeconds": 0.1206408
          },
          "FrameworkDuration": {
            "Ticks": 2967369,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 296,
            "Microseconds": 736,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.434454861111111E-06,
            "TotalHours": 8.242691666666667E-05,
            "TotalMilliseconds": 296.7369,
            "TotalMicroseconds": 296736.9,
            "TotalNanoseconds": 296736900.0,
            "TotalMinutes": 0.004945615,
            "TotalSeconds": 0.2967369
          },
          "UserDuration": {
            "Ticks": 39200901,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 920,
            "Microseconds": 90,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 3,
            "TotalDays": 4.537141319444444E-05,
            "TotalHours": 0.0010889139166666666,
            "TotalMilliseconds": 3920.0901,
            "TotalMicroseconds": 3920090.1,
            "TotalNanoseconds": 3920090100.0,
            "TotalMinutes": 0.065334835,
            "TotalSeconds": 3.9200901
          },
          "OwnDuration": {
            "Ticks": -41456899,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -145,
            "Microseconds": -689,
            "Nanoseconds": -900,
            "Minutes": 0,
            "Seconds": -4,
            "TotalDays": -4.798252199074074E-05,
            "TotalHours": -0.0011515805277777778,
            "TotalMilliseconds": -4145.6899,
            "TotalMicroseconds": -4145689.9,
            "TotalNanoseconds": -4145689900.0,
            "TotalMinutes": -0.06909483166666666,
            "TotalSeconds": -4.1456899
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b503736c-5fd8-428d-abbc-2f1c83333ee5",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - LLM Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - LLM Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration",
          "Blocks": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 9,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 9,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 21704310,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 170,
            "Microseconds": 431,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.5120729166666666E-05,
            "TotalHours": 0.0006028975,
            "TotalMilliseconds": 2170.431,
            "TotalMicroseconds": 2170431.0,
            "TotalNanoseconds": 2170431000.0,
            "TotalMinutes": 0.03617385,
            "TotalSeconds": 2.170431
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "LLM",
            "Integration"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b746f930-7e6b-4fba-a60d-121f3a577b69",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:16.8379525-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 614595,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 61,
            "Microseconds": 459,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 7.113368055555555E-07,
            "TotalHours": 1.7072083333333332E-05,
            "TotalMilliseconds": 61.4595,
            "TotalMicroseconds": 61459.5,
            "TotalNanoseconds": 61459500.0,
            "TotalMinutes": 0.001024325,
            "TotalSeconds": 0.0614595
          },
          "UserDuration": {
            "Ticks": 21089715,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 108,
            "Microseconds": 971,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.440939236111111E-05,
            "TotalHours": 0.0005858254166666667,
            "TotalMilliseconds": 2108.9715,
            "TotalMicroseconds": 2108971.5,
            "TotalNanoseconds": 2108971500.0,
            "TotalMinutes": 0.035149525,
            "TotalSeconds": 2.1089715
          },
          "OwnDuration": {
            "Ticks": 21704310,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 170,
            "Microseconds": 431,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.5120729166666666E-05,
            "TotalHours": 0.0006028975,
            "TotalMilliseconds": 2170.431,
            "TotalMicroseconds": 2170431.0,
            "TotalNanoseconds": 2170431000.0,
            "TotalMinutes": 0.03617385,
            "TotalSeconds": 2.170431
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "8f73dcf0-2fdd-4fde-8632-627345783476",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 480,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": null,
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should connect to Ollama service",
            "Path": "Enhanced Documentation System - LLM Integration Ollama API Integration Should connect to Ollama service",
            "Data": null,
            "ExpandedName": "Should connect to Ollama service",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should connect to Ollama service",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": true,
            "Block": "[!] Ollama API Integration",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 526,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should list available models",
            "Path": "Enhanced Documentation System - LLM Integration Ollama API Integration Should list available models",
            "Data": null,
            "ExpandedName": "Should list available models",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should list available models",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": true,
            "Block": "[!] Ollama API Integration",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 533,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate responses for code analysis",
            "Path": "Enhanced Documentation System - LLM Integration Ollama API Integration Should generate responses for code analysis",
            "Data": null,
            "ExpandedName": "Should generate responses for code analysis",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should generate responses for code analysis",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": true,
            "Block": "[!] Ollama API Integration",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 541,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": true,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 25423,
            "Length": 1360,
            "StartLine": 525,
            "StartColumn": 42,
            "EndLine": 551,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "89912ec4-4d17-43bc-8e36-02f8d7fca109",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }"
          }
        },
        "StartLine": 525,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 3,
        "OwnPassedCount": 0,
        "OwnFailedCount": 3,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": false,
      "Last": true,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 541,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should create function documentation prompts",
      "Path": [
        "Enhanced Documentation System - LLM Integration",
        "Prompt Templates",
        "Should create function documentation prompts"
      ],
      "Data": null,
      "ExpandedName": "Should create function documentation prompts",
      "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create function documentation prompts",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }",
          "Type": 19,
          "Start": 27207,
          "Length": 427,
          "StartLine": 560,
          "StartColumn": 127,
          "EndLine": 567,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "83ec978c-8306-4512-bd04-cc0369056cff",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }",
            "Traps": null,
            "Extent": "Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 560,
            "StartColumnNumber": 127,
            "EndLineNumber": 567,
            "EndColumnNumber": 14,
            "Text": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }",
            "StartOffset": 27207,
            "EndOffset": 27634
          },
          "Parent": {
            "ScriptBlock": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }",
            "Parent": "It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Prompt Templates",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Prompt Templates"
        ],
        "Data": null,
        "ExpandedName": "Prompt Templates",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should create function documentation prompts",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should create function documentation prompts",
            "Data": null,
            "ExpandedName": "Should create function documentation prompts",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create function documentation prompts",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 560,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should create module documentation prompts",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should create module documentation prompts",
            "Data": null,
            "ExpandedName": "Should create module documentation prompts",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create module documentation prompts",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 569,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should support variable substitution",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should support variable substitution",
            "Data": null,
            "ExpandedName": "Should support variable substitution",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should support variable substitution",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 578,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 3,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 3,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:12:03.5268689-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:12:03.5268689Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 43374678,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 337,
            "Microseconds": 467,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.020217361111111E-05,
            "TotalHours": 0.0012048521666666668,
            "TotalMilliseconds": 4337.4678,
            "TotalMicroseconds": 4337467.8,
            "TotalNanoseconds": 4337467800.0,
            "TotalMinutes": 0.07229113,
            "TotalSeconds": 4.3374678
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_ae38e9fc-4db5-4172-8954-fe64e3e59e6d",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0c91d161-b6ae-41fa-9bfa-b03991a212ce",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1206408,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 120,
            "Microseconds": 640,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3963055555555556E-06,
            "TotalHours": 3.351133333333333E-05,
            "TotalMilliseconds": 120.6408,
            "TotalMicroseconds": 120640.8,
            "TotalNanoseconds": 120640800.0,
            "TotalMinutes": 0.00201068,
            "TotalSeconds": 0.1206408
          },
          "FrameworkDuration": {
            "Ticks": 2967369,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 296,
            "Microseconds": 736,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.434454861111111E-06,
            "TotalHours": 8.242691666666667E-05,
            "TotalMilliseconds": 296.7369,
            "TotalMicroseconds": 296736.9,
            "TotalNanoseconds": 296736900.0,
            "TotalMinutes": 0.004945615,
            "TotalSeconds": 0.2967369
          },
          "UserDuration": {
            "Ticks": 39200901,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 920,
            "Microseconds": 90,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 3,
            "TotalDays": 4.537141319444444E-05,
            "TotalHours": 0.0010889139166666666,
            "TotalMilliseconds": 3920.0901,
            "TotalMicroseconds": 3920090.1,
            "TotalNanoseconds": 3920090100.0,
            "TotalMinutes": 0.065334835,
            "TotalSeconds": 3.9200901
          },
          "OwnDuration": {
            "Ticks": -41456899,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -145,
            "Microseconds": -689,
            "Nanoseconds": -900,
            "Minutes": 0,
            "Seconds": -4,
            "TotalDays": -4.798252199074074E-05,
            "TotalHours": -0.0011515805277777778,
            "TotalMilliseconds": -4145.6899,
            "TotalMicroseconds": -4145689.9,
            "TotalNanoseconds": -4145689900.0,
            "TotalMinutes": -0.06909483166666666,
            "TotalSeconds": -4.1456899
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b503736c-5fd8-428d-abbc-2f1c83333ee5",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - LLM Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - LLM Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration",
          "Blocks": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 9,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 9,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 21704310,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 170,
            "Microseconds": 431,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.5120729166666666E-05,
            "TotalHours": 0.0006028975,
            "TotalMilliseconds": 2170.431,
            "TotalMicroseconds": 2170431.0,
            "TotalNanoseconds": 2170431000.0,
            "TotalMinutes": 0.03617385,
            "TotalSeconds": 2.170431
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "LLM",
            "Integration"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b746f930-7e6b-4fba-a60d-121f3a577b69",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:16.8379525-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 614595,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 61,
            "Microseconds": 459,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 7.113368055555555E-07,
            "TotalHours": 1.7072083333333332E-05,
            "TotalMilliseconds": 61.4595,
            "TotalMicroseconds": 61459.5,
            "TotalNanoseconds": 61459500.0,
            "TotalMinutes": 0.001024325,
            "TotalSeconds": 0.0614595
          },
          "UserDuration": {
            "Ticks": 21089715,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 108,
            "Microseconds": 971,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.440939236111111E-05,
            "TotalHours": 0.0005858254166666667,
            "TotalMilliseconds": 2108.9715,
            "TotalMicroseconds": 2108971.5,
            "TotalNanoseconds": 2108971500.0,
            "TotalMinutes": 0.035149525,
            "TotalSeconds": 2.1089715
          },
          "OwnDuration": {
            "Ticks": 21704310,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 170,
            "Microseconds": 431,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.5120729166666666E-05,
            "TotalHours": 0.0006028975,
            "TotalMilliseconds": 2170.431,
            "TotalMicroseconds": 2170431.0,
            "TotalNanoseconds": 2170431000.0,
            "TotalMinutes": 0.03617385,
            "TotalSeconds": 2.170431
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "8f73dcf0-2fdd-4fde-8632-627345783476",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 480,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 26855,
            "Length": 210,
            "StartLine": 554,
            "StartColumn": 23,
            "EndLine": 558,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "7b47f2d8-ff04-40d0-b942-ac6974905e4b",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }",
            "Parent": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }"
          }
        },
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should create function documentation prompts",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should create function documentation prompts",
            "Data": null,
            "ExpandedName": "Should create function documentation prompts",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create function documentation prompts",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 560,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should create module documentation prompts",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should create module documentation prompts",
            "Data": null,
            "ExpandedName": "Should create module documentation prompts",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create module documentation prompts",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 569,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should support variable substitution",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should support variable substitution",
            "Data": null,
            "ExpandedName": "Should support variable substitution",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should support variable substitution",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 578,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": false,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 26830,
            "Length": 2042,
            "StartLine": 553,
            "StartColumn": 36,
            "EndLine": 589,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "c6f817ec-ae39-43bf-aa91-acb2a2b42492",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }"
          }
        },
        "StartLine": 553,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 3,
        "OwnPassedCount": 0,
        "OwnFailedCount": 3,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": true,
      "Last": false,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 560,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should create module documentation prompts",
      "Path": [
        "Enhanced Documentation System - LLM Integration",
        "Prompt Templates",
        "Should create module documentation prompts"
      ],
      "Data": null,
      "ExpandedName": "Should create module documentation prompts",
      "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create module documentation prompts",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }",
          "Type": 19,
          "Start": 27774,
          "Length": 411,
          "StartLine": 569,
          "StartColumn": 125,
          "EndLine": 576,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "ece90f4a-8142-44b6-ae0f-83622f3c6b42",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }",
            "Traps": null,
            "Extent": "Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 569,
            "StartColumnNumber": 125,
            "EndLineNumber": 576,
            "EndColumnNumber": 14,
            "Text": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }",
            "StartOffset": 27774,
            "EndOffset": 28185
          },
          "Parent": {
            "ScriptBlock": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }",
            "Parent": "It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Prompt Templates",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Prompt Templates"
        ],
        "Data": null,
        "ExpandedName": "Prompt Templates",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should create function documentation prompts",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should create function documentation prompts",
            "Data": null,
            "ExpandedName": "Should create function documentation prompts",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create function documentation prompts",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 560,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should create module documentation prompts",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should create module documentation prompts",
            "Data": null,
            "ExpandedName": "Should create module documentation prompts",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create module documentation prompts",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 569,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should support variable substitution",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should support variable substitution",
            "Data": null,
            "ExpandedName": "Should support variable substitution",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should support variable substitution",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 578,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 3,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 3,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:12:03.5268689-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:12:03.5268689Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 43374678,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 337,
            "Microseconds": 467,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.020217361111111E-05,
            "TotalHours": 0.0012048521666666668,
            "TotalMilliseconds": 4337.4678,
            "TotalMicroseconds": 4337467.8,
            "TotalNanoseconds": 4337467800.0,
            "TotalMinutes": 0.07229113,
            "TotalSeconds": 4.3374678
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_ae38e9fc-4db5-4172-8954-fe64e3e59e6d",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0c91d161-b6ae-41fa-9bfa-b03991a212ce",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1206408,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 120,
            "Microseconds": 640,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3963055555555556E-06,
            "TotalHours": 3.351133333333333E-05,
            "TotalMilliseconds": 120.6408,
            "TotalMicroseconds": 120640.8,
            "TotalNanoseconds": 120640800.0,
            "TotalMinutes": 0.00201068,
            "TotalSeconds": 0.1206408
          },
          "FrameworkDuration": {
            "Ticks": 2967369,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 296,
            "Microseconds": 736,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.434454861111111E-06,
            "TotalHours": 8.242691666666667E-05,
            "TotalMilliseconds": 296.7369,
            "TotalMicroseconds": 296736.9,
            "TotalNanoseconds": 296736900.0,
            "TotalMinutes": 0.004945615,
            "TotalSeconds": 0.2967369
          },
          "UserDuration": {
            "Ticks": 39200901,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 920,
            "Microseconds": 90,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 3,
            "TotalDays": 4.537141319444444E-05,
            "TotalHours": 0.0010889139166666666,
            "TotalMilliseconds": 3920.0901,
            "TotalMicroseconds": 3920090.1,
            "TotalNanoseconds": 3920090100.0,
            "TotalMinutes": 0.065334835,
            "TotalSeconds": 3.9200901
          },
          "OwnDuration": {
            "Ticks": -41456899,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -145,
            "Microseconds": -689,
            "Nanoseconds": -900,
            "Minutes": 0,
            "Seconds": -4,
            "TotalDays": -4.798252199074074E-05,
            "TotalHours": -0.0011515805277777778,
            "TotalMilliseconds": -4145.6899,
            "TotalMicroseconds": -4145689.9,
            "TotalNanoseconds": -4145689900.0,
            "TotalMinutes": -0.06909483166666666,
            "TotalSeconds": -4.1456899
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b503736c-5fd8-428d-abbc-2f1c83333ee5",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - LLM Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - LLM Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration",
          "Blocks": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 9,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 9,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 21704310,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 170,
            "Microseconds": 431,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.5120729166666666E-05,
            "TotalHours": 0.0006028975,
            "TotalMilliseconds": 2170.431,
            "TotalMicroseconds": 2170431.0,
            "TotalNanoseconds": 2170431000.0,
            "TotalMinutes": 0.03617385,
            "TotalSeconds": 2.170431
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "LLM",
            "Integration"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b746f930-7e6b-4fba-a60d-121f3a577b69",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:16.8379525-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 614595,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 61,
            "Microseconds": 459,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 7.113368055555555E-07,
            "TotalHours": 1.7072083333333332E-05,
            "TotalMilliseconds": 61.4595,
            "TotalMicroseconds": 61459.5,
            "TotalNanoseconds": 61459500.0,
            "TotalMinutes": 0.001024325,
            "TotalSeconds": 0.0614595
          },
          "UserDuration": {
            "Ticks": 21089715,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 108,
            "Microseconds": 971,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.440939236111111E-05,
            "TotalHours": 0.0005858254166666667,
            "TotalMilliseconds": 2108.9715,
            "TotalMicroseconds": 2108971.5,
            "TotalNanoseconds": 2108971500.0,
            "TotalMinutes": 0.035149525,
            "TotalSeconds": 2.1089715
          },
          "OwnDuration": {
            "Ticks": 21704310,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 170,
            "Microseconds": 431,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.5120729166666666E-05,
            "TotalHours": 0.0006028975,
            "TotalMilliseconds": 2170.431,
            "TotalMicroseconds": 2170431.0,
            "TotalNanoseconds": 2170431000.0,
            "TotalMinutes": 0.03617385,
            "TotalSeconds": 2.170431
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "8f73dcf0-2fdd-4fde-8632-627345783476",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 480,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 26855,
            "Length": 210,
            "StartLine": 554,
            "StartColumn": 23,
            "EndLine": 558,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "7b47f2d8-ff04-40d0-b942-ac6974905e4b",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }",
            "Parent": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }"
          }
        },
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should create function documentation prompts",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should create function documentation prompts",
            "Data": null,
            "ExpandedName": "Should create function documentation prompts",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create function documentation prompts",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 560,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should create module documentation prompts",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should create module documentation prompts",
            "Data": null,
            "ExpandedName": "Should create module documentation prompts",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create module documentation prompts",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 569,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should support variable substitution",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should support variable substitution",
            "Data": null,
            "ExpandedName": "Should support variable substitution",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should support variable substitution",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 578,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": false,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 26830,
            "Length": 2042,
            "StartLine": 553,
            "StartColumn": 36,
            "EndLine": 589,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "c6f817ec-ae39-43bf-aa91-acb2a2b42492",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }"
          }
        },
        "StartLine": 553,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 3,
        "OwnPassedCount": 0,
        "OwnFailedCount": 3,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": false,
      "Last": false,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 569,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should support variable substitution",
      "Path": [
        "Enhanced Documentation System - LLM Integration",
        "Prompt Templates",
        "Should support variable substitution"
      ],
      "Data": null,
      "ExpandedName": "Should support variable substitution",
      "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should support variable substitution",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }",
          "Type": 19,
          "Start": 28319,
          "Length": 542,
          "StartLine": 578,
          "StartColumn": 119,
          "EndLine": 588,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "949cad73-53cd-4805-ae84-f1e9eb50d1bd",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }",
            "Traps": null,
            "Extent": "Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 578,
            "StartColumnNumber": 119,
            "EndLineNumber": 588,
            "EndColumnNumber": 14,
            "Text": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }",
            "StartOffset": 28319,
            "EndOffset": 28861
          },
          "Parent": {
            "ScriptBlock": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }",
            "Parent": "It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Prompt Templates",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Prompt Templates"
        ],
        "Data": null,
        "ExpandedName": "Prompt Templates",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should create function documentation prompts",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should create function documentation prompts",
            "Data": null,
            "ExpandedName": "Should create function documentation prompts",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create function documentation prompts",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 560,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should create module documentation prompts",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should create module documentation prompts",
            "Data": null,
            "ExpandedName": "Should create module documentation prompts",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create module documentation prompts",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 569,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should support variable substitution",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should support variable substitution",
            "Data": null,
            "ExpandedName": "Should support variable substitution",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should support variable substitution",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 578,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 3,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 3,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:12:03.5268689-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:12:03.5268689Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 43374678,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 337,
            "Microseconds": 467,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.020217361111111E-05,
            "TotalHours": 0.0012048521666666668,
            "TotalMilliseconds": 4337.4678,
            "TotalMicroseconds": 4337467.8,
            "TotalNanoseconds": 4337467800.0,
            "TotalMinutes": 0.07229113,
            "TotalSeconds": 4.3374678
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_ae38e9fc-4db5-4172-8954-fe64e3e59e6d",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0c91d161-b6ae-41fa-9bfa-b03991a212ce",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1206408,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 120,
            "Microseconds": 640,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3963055555555556E-06,
            "TotalHours": 3.351133333333333E-05,
            "TotalMilliseconds": 120.6408,
            "TotalMicroseconds": 120640.8,
            "TotalNanoseconds": 120640800.0,
            "TotalMinutes": 0.00201068,
            "TotalSeconds": 0.1206408
          },
          "FrameworkDuration": {
            "Ticks": 2967369,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 296,
            "Microseconds": 736,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.434454861111111E-06,
            "TotalHours": 8.242691666666667E-05,
            "TotalMilliseconds": 296.7369,
            "TotalMicroseconds": 296736.9,
            "TotalNanoseconds": 296736900.0,
            "TotalMinutes": 0.004945615,
            "TotalSeconds": 0.2967369
          },
          "UserDuration": {
            "Ticks": 39200901,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 920,
            "Microseconds": 90,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 3,
            "TotalDays": 4.537141319444444E-05,
            "TotalHours": 0.0010889139166666666,
            "TotalMilliseconds": 3920.0901,
            "TotalMicroseconds": 3920090.1,
            "TotalNanoseconds": 3920090100.0,
            "TotalMinutes": 0.065334835,
            "TotalSeconds": 3.9200901
          },
          "OwnDuration": {
            "Ticks": -41456899,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -145,
            "Microseconds": -689,
            "Nanoseconds": -900,
            "Minutes": 0,
            "Seconds": -4,
            "TotalDays": -4.798252199074074E-05,
            "TotalHours": -0.0011515805277777778,
            "TotalMilliseconds": -4145.6899,
            "TotalMicroseconds": -4145689.9,
            "TotalNanoseconds": -4145689900.0,
            "TotalMinutes": -0.06909483166666666,
            "TotalSeconds": -4.1456899
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b503736c-5fd8-428d-abbc-2f1c83333ee5",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - LLM Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - LLM Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration",
          "Blocks": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 9,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 9,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 21704310,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 170,
            "Microseconds": 431,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.5120729166666666E-05,
            "TotalHours": 0.0006028975,
            "TotalMilliseconds": 2170.431,
            "TotalMicroseconds": 2170431.0,
            "TotalNanoseconds": 2170431000.0,
            "TotalMinutes": 0.03617385,
            "TotalSeconds": 2.170431
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "LLM",
            "Integration"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b746f930-7e6b-4fba-a60d-121f3a577b69",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:16.8379525-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 614595,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 61,
            "Microseconds": 459,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 7.113368055555555E-07,
            "TotalHours": 1.7072083333333332E-05,
            "TotalMilliseconds": 61.4595,
            "TotalMicroseconds": 61459.5,
            "TotalNanoseconds": 61459500.0,
            "TotalMinutes": 0.001024325,
            "TotalSeconds": 0.0614595
          },
          "UserDuration": {
            "Ticks": 21089715,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 108,
            "Microseconds": 971,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.440939236111111E-05,
            "TotalHours": 0.0005858254166666667,
            "TotalMilliseconds": 2108.9715,
            "TotalMicroseconds": 2108971.5,
            "TotalNanoseconds": 2108971500.0,
            "TotalMinutes": 0.035149525,
            "TotalSeconds": 2.1089715
          },
          "OwnDuration": {
            "Ticks": 21704310,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 170,
            "Microseconds": 431,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.5120729166666666E-05,
            "TotalHours": 0.0006028975,
            "TotalMilliseconds": 2170.431,
            "TotalMicroseconds": 2170431.0,
            "TotalNanoseconds": 2170431000.0,
            "TotalMinutes": 0.03617385,
            "TotalSeconds": 2.170431
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "8f73dcf0-2fdd-4fde-8632-627345783476",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 480,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 26855,
            "Length": 210,
            "StartLine": 554,
            "StartColumn": 23,
            "EndLine": 558,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "7b47f2d8-ff04-40d0-b942-ac6974905e4b",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }",
            "Parent": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }"
          }
        },
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should create function documentation prompts",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should create function documentation prompts",
            "Data": null,
            "ExpandedName": "Should create function documentation prompts",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create function documentation prompts",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 560,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should create module documentation prompts",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should create module documentation prompts",
            "Data": null,
            "ExpandedName": "Should create module documentation prompts",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create module documentation prompts",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 569,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should support variable substitution",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should support variable substitution",
            "Data": null,
            "ExpandedName": "Should support variable substitution",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should support variable substitution",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 578,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": false,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 26830,
            "Length": 2042,
            "StartLine": 553,
            "StartColumn": 36,
            "EndLine": 589,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "c6f817ec-ae39-43bf-aa91-acb2a2b42492",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }"
          }
        },
        "StartLine": 553,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 3,
        "OwnPassedCount": 0,
        "OwnFailedCount": 3,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": false,
      "Last": true,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 578,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should cache and retrieve responses",
      "Path": [
        "Enhanced Documentation System - LLM Integration",
        "Response Cache",
        "Should cache and retrieve responses"
      ],
      "Data": null,
      "ExpandedName": "Should cache and retrieve responses",
      "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should cache and retrieve responses",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }",
          "Type": 19,
          "Start": 29279,
          "Length": 485,
          "StartLine": 598,
          "StartColumn": 116,
          "EndLine": 608,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "f75dcb13-56a9-464f-b2e9-feb8512d39ec",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }",
            "Traps": null,
            "Extent": "Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 598,
            "StartColumnNumber": 116,
            "EndLineNumber": 608,
            "EndColumnNumber": 14,
            "Text": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }",
            "StartOffset": 29279,
            "EndOffset": 29764
          },
          "Parent": {
            "ScriptBlock": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }",
            "Parent": "It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Response Cache",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Response Cache"
        ],
        "Data": null,
        "ExpandedName": "Response Cache",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should cache and retrieve responses",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should cache and retrieve responses",
            "Data": null,
            "ExpandedName": "Should cache and retrieve responses",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should cache and retrieve responses",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 598,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle TTL expiration",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should handle TTL expiration",
            "Data": null,
            "ExpandedName": "Should handle TTL expiration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should handle TTL expiration",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 610,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should provide cache statistics",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should provide cache statistics",
            "Data": null,
            "ExpandedName": "Should provide cache statistics",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should provide cache statistics",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 623,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 3,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 3,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:12:03.5268689-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:12:03.5268689Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 43374678,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 337,
            "Microseconds": 467,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.020217361111111E-05,
            "TotalHours": 0.0012048521666666668,
            "TotalMilliseconds": 4337.4678,
            "TotalMicroseconds": 4337467.8,
            "TotalNanoseconds": 4337467800.0,
            "TotalMinutes": 0.07229113,
            "TotalSeconds": 4.3374678
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_ae38e9fc-4db5-4172-8954-fe64e3e59e6d",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0c91d161-b6ae-41fa-9bfa-b03991a212ce",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1206408,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 120,
            "Microseconds": 640,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3963055555555556E-06,
            "TotalHours": 3.351133333333333E-05,
            "TotalMilliseconds": 120.6408,
            "TotalMicroseconds": 120640.8,
            "TotalNanoseconds": 120640800.0,
            "TotalMinutes": 0.00201068,
            "TotalSeconds": 0.1206408
          },
          "FrameworkDuration": {
            "Ticks": 2967369,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 296,
            "Microseconds": 736,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.434454861111111E-06,
            "TotalHours": 8.242691666666667E-05,
            "TotalMilliseconds": 296.7369,
            "TotalMicroseconds": 296736.9,
            "TotalNanoseconds": 296736900.0,
            "TotalMinutes": 0.004945615,
            "TotalSeconds": 0.2967369
          },
          "UserDuration": {
            "Ticks": 39200901,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 920,
            "Microseconds": 90,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 3,
            "TotalDays": 4.537141319444444E-05,
            "TotalHours": 0.0010889139166666666,
            "TotalMilliseconds": 3920.0901,
            "TotalMicroseconds": 3920090.1,
            "TotalNanoseconds": 3920090100.0,
            "TotalMinutes": 0.065334835,
            "TotalSeconds": 3.9200901
          },
          "OwnDuration": {
            "Ticks": -41456899,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -145,
            "Microseconds": -689,
            "Nanoseconds": -900,
            "Minutes": 0,
            "Seconds": -4,
            "TotalDays": -4.798252199074074E-05,
            "TotalHours": -0.0011515805277777778,
            "TotalMilliseconds": -4145.6899,
            "TotalMicroseconds": -4145689.9,
            "TotalNanoseconds": -4145689900.0,
            "TotalMinutes": -0.06909483166666666,
            "TotalSeconds": -4.1456899
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b503736c-5fd8-428d-abbc-2f1c83333ee5",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - LLM Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - LLM Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration",
          "Blocks": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 9,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 9,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 21704310,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 170,
            "Microseconds": 431,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.5120729166666666E-05,
            "TotalHours": 0.0006028975,
            "TotalMilliseconds": 2170.431,
            "TotalMicroseconds": 2170431.0,
            "TotalNanoseconds": 2170431000.0,
            "TotalMinutes": 0.03617385,
            "TotalSeconds": 2.170431
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "LLM",
            "Integration"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b746f930-7e6b-4fba-a60d-121f3a577b69",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:16.8379525-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 614595,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 61,
            "Microseconds": 459,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 7.113368055555555E-07,
            "TotalHours": 1.7072083333333332E-05,
            "TotalMilliseconds": 61.4595,
            "TotalMicroseconds": 61459.5,
            "TotalNanoseconds": 61459500.0,
            "TotalMinutes": 0.001024325,
            "TotalSeconds": 0.0614595
          },
          "UserDuration": {
            "Ticks": 21089715,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 108,
            "Microseconds": 971,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.440939236111111E-05,
            "TotalHours": 0.0005858254166666667,
            "TotalMilliseconds": 2108.9715,
            "TotalMicroseconds": 2108971.5,
            "TotalNanoseconds": 2108971500.0,
            "TotalMinutes": 0.035149525,
            "TotalSeconds": 2.1089715
          },
          "OwnDuration": {
            "Ticks": 21704310,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 170,
            "Microseconds": 431,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.5120729166666666E-05,
            "TotalHours": 0.0006028975,
            "TotalMilliseconds": 2170.431,
            "TotalMicroseconds": 2170431.0,
            "TotalNanoseconds": 2170431000.0,
            "TotalMinutes": 0.03617385,
            "TotalSeconds": 2.170431
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "8f73dcf0-2fdd-4fde-8632-627345783476",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 480,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 28942,
            "Length": 206,
            "StartLine": 592,
            "StartColumn": 23,
            "EndLine": 596,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "a3100a39-d922-4e8f-bb81-a253234119f7",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }",
            "Parent": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }"
          }
        },
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should cache and retrieve responses",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should cache and retrieve responses",
            "Data": null,
            "ExpandedName": "Should cache and retrieve responses",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should cache and retrieve responses",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 598,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle TTL expiration",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should handle TTL expiration",
            "Data": null,
            "ExpandedName": "Should handle TTL expiration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should handle TTL expiration",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 610,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should provide cache statistics",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should provide cache statistics",
            "Data": null,
            "ExpandedName": "Should provide cache statistics",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should provide cache statistics",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 623,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": false,
        "Last": true,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 28917,
            "Length": 2033,
            "StartLine": 591,
            "StartColumn": 34,
            "EndLine": 632,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "9764edb0-b3d3-422d-91fc-81404a2dcf1f",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }"
          }
        },
        "StartLine": 591,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 3,
        "OwnPassedCount": 0,
        "OwnFailedCount": 3,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": true,
      "Last": false,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 598,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should handle TTL expiration",
      "Path": [
        "Enhanced Documentation System - LLM Integration",
        "Response Cache",
        "Should handle TTL expiration"
      ],
      "Data": null,
      "ExpandedName": "Should handle TTL expiration",
      "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should handle TTL expiration",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }",
          "Type": 19,
          "Start": 29888,
          "Length": 522,
          "StartLine": 610,
          "StartColumn": 109,
          "EndLine": 621,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "2e7982f2-5b3d-49cc-b2b9-2541ecdbaa66",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }",
            "Traps": null,
            "Extent": "Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 610,
            "StartColumnNumber": 109,
            "EndLineNumber": 621,
            "EndColumnNumber": 14,
            "Text": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }",
            "StartOffset": 29888,
            "EndOffset": 30410
          },
          "Parent": {
            "ScriptBlock": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }",
            "Parent": "It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Response Cache",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Response Cache"
        ],
        "Data": null,
        "ExpandedName": "Response Cache",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should cache and retrieve responses",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should cache and retrieve responses",
            "Data": null,
            "ExpandedName": "Should cache and retrieve responses",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should cache and retrieve responses",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 598,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle TTL expiration",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should handle TTL expiration",
            "Data": null,
            "ExpandedName": "Should handle TTL expiration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should handle TTL expiration",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 610,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should provide cache statistics",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should provide cache statistics",
            "Data": null,
            "ExpandedName": "Should provide cache statistics",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should provide cache statistics",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 623,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 3,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 3,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:12:03.5268689-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:12:03.5268689Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 43374678,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 337,
            "Microseconds": 467,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.020217361111111E-05,
            "TotalHours": 0.0012048521666666668,
            "TotalMilliseconds": 4337.4678,
            "TotalMicroseconds": 4337467.8,
            "TotalNanoseconds": 4337467800.0,
            "TotalMinutes": 0.07229113,
            "TotalSeconds": 4.3374678
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_ae38e9fc-4db5-4172-8954-fe64e3e59e6d",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0c91d161-b6ae-41fa-9bfa-b03991a212ce",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1206408,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 120,
            "Microseconds": 640,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3963055555555556E-06,
            "TotalHours": 3.351133333333333E-05,
            "TotalMilliseconds": 120.6408,
            "TotalMicroseconds": 120640.8,
            "TotalNanoseconds": 120640800.0,
            "TotalMinutes": 0.00201068,
            "TotalSeconds": 0.1206408
          },
          "FrameworkDuration": {
            "Ticks": 2967369,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 296,
            "Microseconds": 736,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.434454861111111E-06,
            "TotalHours": 8.242691666666667E-05,
            "TotalMilliseconds": 296.7369,
            "TotalMicroseconds": 296736.9,
            "TotalNanoseconds": 296736900.0,
            "TotalMinutes": 0.004945615,
            "TotalSeconds": 0.2967369
          },
          "UserDuration": {
            "Ticks": 39200901,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 920,
            "Microseconds": 90,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 3,
            "TotalDays": 4.537141319444444E-05,
            "TotalHours": 0.0010889139166666666,
            "TotalMilliseconds": 3920.0901,
            "TotalMicroseconds": 3920090.1,
            "TotalNanoseconds": 3920090100.0,
            "TotalMinutes": 0.065334835,
            "TotalSeconds": 3.9200901
          },
          "OwnDuration": {
            "Ticks": -41456899,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -145,
            "Microseconds": -689,
            "Nanoseconds": -900,
            "Minutes": 0,
            "Seconds": -4,
            "TotalDays": -4.798252199074074E-05,
            "TotalHours": -0.0011515805277777778,
            "TotalMilliseconds": -4145.6899,
            "TotalMicroseconds": -4145689.9,
            "TotalNanoseconds": -4145689900.0,
            "TotalMinutes": -0.06909483166666666,
            "TotalSeconds": -4.1456899
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b503736c-5fd8-428d-abbc-2f1c83333ee5",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - LLM Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - LLM Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration",
          "Blocks": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 9,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 9,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 21704310,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 170,
            "Microseconds": 431,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.5120729166666666E-05,
            "TotalHours": 0.0006028975,
            "TotalMilliseconds": 2170.431,
            "TotalMicroseconds": 2170431.0,
            "TotalNanoseconds": 2170431000.0,
            "TotalMinutes": 0.03617385,
            "TotalSeconds": 2.170431
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "LLM",
            "Integration"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b746f930-7e6b-4fba-a60d-121f3a577b69",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:16.8379525-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 614595,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 61,
            "Microseconds": 459,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 7.113368055555555E-07,
            "TotalHours": 1.7072083333333332E-05,
            "TotalMilliseconds": 61.4595,
            "TotalMicroseconds": 61459.5,
            "TotalNanoseconds": 61459500.0,
            "TotalMinutes": 0.001024325,
            "TotalSeconds": 0.0614595
          },
          "UserDuration": {
            "Ticks": 21089715,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 108,
            "Microseconds": 971,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.440939236111111E-05,
            "TotalHours": 0.0005858254166666667,
            "TotalMilliseconds": 2108.9715,
            "TotalMicroseconds": 2108971.5,
            "TotalNanoseconds": 2108971500.0,
            "TotalMinutes": 0.035149525,
            "TotalSeconds": 2.1089715
          },
          "OwnDuration": {
            "Ticks": 21704310,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 170,
            "Microseconds": 431,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.5120729166666666E-05,
            "TotalHours": 0.0006028975,
            "TotalMilliseconds": 2170.431,
            "TotalMicroseconds": 2170431.0,
            "TotalNanoseconds": 2170431000.0,
            "TotalMinutes": 0.03617385,
            "TotalSeconds": 2.170431
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "8f73dcf0-2fdd-4fde-8632-627345783476",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 480,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 28942,
            "Length": 206,
            "StartLine": 592,
            "StartColumn": 23,
            "EndLine": 596,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "a3100a39-d922-4e8f-bb81-a253234119f7",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }",
            "Parent": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }"
          }
        },
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should cache and retrieve responses",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should cache and retrieve responses",
            "Data": null,
            "ExpandedName": "Should cache and retrieve responses",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should cache and retrieve responses",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 598,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle TTL expiration",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should handle TTL expiration",
            "Data": null,
            "ExpandedName": "Should handle TTL expiration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should handle TTL expiration",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 610,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should provide cache statistics",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should provide cache statistics",
            "Data": null,
            "ExpandedName": "Should provide cache statistics",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should provide cache statistics",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 623,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": false,
        "Last": true,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 28917,
            "Length": 2033,
            "StartLine": 591,
            "StartColumn": 34,
            "EndLine": 632,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "9764edb0-b3d3-422d-91fc-81404a2dcf1f",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }"
          }
        },
        "StartLine": 591,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 3,
        "OwnPassedCount": 0,
        "OwnFailedCount": 3,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": false,
      "Last": false,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 610,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should provide cache statistics",
      "Path": [
        "Enhanced Documentation System - LLM Integration",
        "Response Cache",
        "Should provide cache statistics"
      ],
      "Data": null,
      "ExpandedName": "Should provide cache statistics",
      "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should provide cache statistics",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }",
          "Type": 19,
          "Start": 30537,
          "Length": 402,
          "StartLine": 623,
          "StartColumn": 112,
          "EndLine": 631,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "267ef21d-c6fa-4e65-9dcf-48095bd27ce3",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }",
            "Traps": null,
            "Extent": "Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 623,
            "StartColumnNumber": 112,
            "EndLineNumber": 631,
            "EndColumnNumber": 14,
            "Text": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }",
            "StartOffset": 30537,
            "EndOffset": 30939
          },
          "Parent": {
            "ScriptBlock": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }",
            "Parent": "It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Response Cache",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Response Cache"
        ],
        "Data": null,
        "ExpandedName": "Response Cache",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should cache and retrieve responses",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should cache and retrieve responses",
            "Data": null,
            "ExpandedName": "Should cache and retrieve responses",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should cache and retrieve responses",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 598,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle TTL expiration",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should handle TTL expiration",
            "Data": null,
            "ExpandedName": "Should handle TTL expiration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should handle TTL expiration",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 610,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should provide cache statistics",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should provide cache statistics",
            "Data": null,
            "ExpandedName": "Should provide cache statistics",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should provide cache statistics",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 623,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 3,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 3,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:12:03.5268689-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:12:03.5268689Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 43374678,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 337,
            "Microseconds": 467,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.020217361111111E-05,
            "TotalHours": 0.0012048521666666668,
            "TotalMilliseconds": 4337.4678,
            "TotalMicroseconds": 4337467.8,
            "TotalNanoseconds": 4337467800.0,
            "TotalMinutes": 0.07229113,
            "TotalSeconds": 4.3374678
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_ae38e9fc-4db5-4172-8954-fe64e3e59e6d",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0c91d161-b6ae-41fa-9bfa-b03991a212ce",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1206408,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 120,
            "Microseconds": 640,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3963055555555556E-06,
            "TotalHours": 3.351133333333333E-05,
            "TotalMilliseconds": 120.6408,
            "TotalMicroseconds": 120640.8,
            "TotalNanoseconds": 120640800.0,
            "TotalMinutes": 0.00201068,
            "TotalSeconds": 0.1206408
          },
          "FrameworkDuration": {
            "Ticks": 2967369,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 296,
            "Microseconds": 736,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.434454861111111E-06,
            "TotalHours": 8.242691666666667E-05,
            "TotalMilliseconds": 296.7369,
            "TotalMicroseconds": 296736.9,
            "TotalNanoseconds": 296736900.0,
            "TotalMinutes": 0.004945615,
            "TotalSeconds": 0.2967369
          },
          "UserDuration": {
            "Ticks": 39200901,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 920,
            "Microseconds": 90,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 3,
            "TotalDays": 4.537141319444444E-05,
            "TotalHours": 0.0010889139166666666,
            "TotalMilliseconds": 3920.0901,
            "TotalMicroseconds": 3920090.1,
            "TotalNanoseconds": 3920090100.0,
            "TotalMinutes": 0.065334835,
            "TotalSeconds": 3.9200901
          },
          "OwnDuration": {
            "Ticks": -41456899,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -145,
            "Microseconds": -689,
            "Nanoseconds": -900,
            "Minutes": 0,
            "Seconds": -4,
            "TotalDays": -4.798252199074074E-05,
            "TotalHours": -0.0011515805277777778,
            "TotalMilliseconds": -4145.6899,
            "TotalMicroseconds": -4145689.9,
            "TotalNanoseconds": -4145689900.0,
            "TotalMinutes": -0.06909483166666666,
            "TotalSeconds": -4.1456899
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b503736c-5fd8-428d-abbc-2f1c83333ee5",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - LLM Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - LLM Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration",
          "Blocks": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 9,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 9,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 21704310,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 170,
            "Microseconds": 431,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.5120729166666666E-05,
            "TotalHours": 0.0006028975,
            "TotalMilliseconds": 2170.431,
            "TotalMicroseconds": 2170431.0,
            "TotalNanoseconds": 2170431000.0,
            "TotalMinutes": 0.03617385,
            "TotalSeconds": 2.170431
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "LLM",
            "Integration"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b746f930-7e6b-4fba-a60d-121f3a577b69",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:16.8379525-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 614595,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 61,
            "Microseconds": 459,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 7.113368055555555E-07,
            "TotalHours": 1.7072083333333332E-05,
            "TotalMilliseconds": 61.4595,
            "TotalMicroseconds": 61459.5,
            "TotalNanoseconds": 61459500.0,
            "TotalMinutes": 0.001024325,
            "TotalSeconds": 0.0614595
          },
          "UserDuration": {
            "Ticks": 21089715,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 108,
            "Microseconds": 971,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.440939236111111E-05,
            "TotalHours": 0.0005858254166666667,
            "TotalMilliseconds": 2108.9715,
            "TotalMicroseconds": 2108971.5,
            "TotalNanoseconds": 2108971500.0,
            "TotalMinutes": 0.035149525,
            "TotalSeconds": 2.1089715
          },
          "OwnDuration": {
            "Ticks": 21704310,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 170,
            "Microseconds": 431,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.5120729166666666E-05,
            "TotalHours": 0.0006028975,
            "TotalMilliseconds": 2170.431,
            "TotalMicroseconds": 2170431.0,
            "TotalNanoseconds": 2170431000.0,
            "TotalMinutes": 0.03617385,
            "TotalSeconds": 2.170431
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "8f73dcf0-2fdd-4fde-8632-627345783476",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available LLM modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-LLM] Importing available LLM modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $llmModulePaths.Keys) {\r\n                if ($script:LLMModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $llmModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-LLM] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-LLM] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 480,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 28942,
            "Length": 206,
            "StartLine": 592,
            "StartColumn": 23,
            "EndLine": 596,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "a3100a39-d922-4e8f-bb81-a253234119f7",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }",
            "Parent": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }"
          }
        },
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should cache and retrieve responses",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should cache and retrieve responses",
            "Data": null,
            "ExpandedName": "Should cache and retrieve responses",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should cache and retrieve responses",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 598,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle TTL expiration",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should handle TTL expiration",
            "Data": null,
            "ExpandedName": "Should handle TTL expiration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should handle TTL expiration",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 610,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should provide cache statistics",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should provide cache statistics",
            "Data": null,
            "ExpandedName": "Should provide cache statistics",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should provide cache statistics",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 623,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": false,
        "Last": true,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 28917,
            "Length": 2033,
            "StartLine": 591,
            "StartColumn": 34,
            "EndLine": 632,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "9764edb0-b3d3-422d-91fc-81404a2dcf1f",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }"
          }
        },
        "StartLine": 591,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 3,
        "OwnPassedCount": 0,
        "OwnFailedCount": 3,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": false,
      "Last": true,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 623,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should generate PowerShell documentation templates",
      "Path": [
        "Enhanced Documentation System - Templates & Automation",
        "Language-Specific Templates",
        "Should generate PowerShell documentation templates"
      ],
      "Data": null,
      "ExpandedName": "Should generate PowerShell documentation templates",
      "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate PowerShell documentation templates",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }",
          "Type": 19,
          "Start": 33364,
          "Length": 396,
          "StartLine": 674,
          "StartColumn": 140,
          "EndLine": 680,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "fb2452e8-67b3-41ef-8e17-de143c4beb46",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "$template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\" $template | Should -Not -BeNullOrEmpty $template | Should -Match \"\\.SYNOPSIS\" $template | Should -Match \"Test function\" $template | Should -Match \"\\.PARAMETER Param1\"",
            "Traps": null,
            "Extent": "$template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"",
            "Parent": "{\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 674,
            "StartColumnNumber": 140,
            "EndLineNumber": 680,
            "EndColumnNumber": 14,
            "Text": "{\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }",
            "StartOffset": 33364,
            "EndOffset": 33760
          },
          "Parent": {
            "ScriptBlock": "{\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }",
            "Parent": "It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Language-Specific Templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates"
        ],
        "Data": null,
        "ExpandedName": "Language-Specific Templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should generate PowerShell documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate PowerShell documentation templates",
            "Data": null,
            "ExpandedName": "Should generate PowerShell documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate PowerShell documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 674,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate Python documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate Python documentation templates",
            "Data": null,
            "ExpandedName": "Should generate Python documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate Python documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 682,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate C# documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate C# documentation templates",
            "Data": null,
            "ExpandedName": "Should generate C# documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate C# documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 690,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate JavaScript documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate JavaScript documentation templates",
            "Data": null,
            "ExpandedName": "Should generate JavaScript documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate JavaScript documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 698,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should detect language from file extensions",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should detect language from file extensions",
            "Data": null,
            "ExpandedName": "Should detect language from file extensions",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should detect language from file extensions",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 707,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 5,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 5,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:12:03.5268689-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:12:03.5268689Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 43374678,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 337,
            "Microseconds": 467,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.020217361111111E-05,
            "TotalHours": 0.0012048521666666668,
            "TotalMilliseconds": 4337.4678,
            "TotalMicroseconds": 4337467.8,
            "TotalNanoseconds": 4337467800.0,
            "TotalMinutes": 0.07229113,
            "TotalSeconds": 4.3374678
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_ae38e9fc-4db5-4172-8954-fe64e3e59e6d",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0c91d161-b6ae-41fa-9bfa-b03991a212ce",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1206408,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 120,
            "Microseconds": 640,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3963055555555556E-06,
            "TotalHours": 3.351133333333333E-05,
            "TotalMilliseconds": 120.6408,
            "TotalMicroseconds": 120640.8,
            "TotalNanoseconds": 120640800.0,
            "TotalMinutes": 0.00201068,
            "TotalSeconds": 0.1206408
          },
          "FrameworkDuration": {
            "Ticks": 2967369,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 296,
            "Microseconds": 736,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.434454861111111E-06,
            "TotalHours": 8.242691666666667E-05,
            "TotalMilliseconds": 296.7369,
            "TotalMicroseconds": 296736.9,
            "TotalNanoseconds": 296736900.0,
            "TotalMinutes": 0.004945615,
            "TotalSeconds": 0.2967369
          },
          "UserDuration": {
            "Ticks": 39200901,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 920,
            "Microseconds": 90,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 3,
            "TotalDays": 4.537141319444444E-05,
            "TotalHours": 0.0010889139166666666,
            "TotalMilliseconds": 3920.0901,
            "TotalMicroseconds": 3920090.1,
            "TotalNanoseconds": 3920090100.0,
            "TotalMinutes": 0.065334835,
            "TotalSeconds": 3.9200901
          },
          "OwnDuration": {
            "Ticks": -41456899,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -145,
            "Microseconds": -689,
            "Nanoseconds": -900,
            "Minutes": 0,
            "Seconds": -4,
            "TotalDays": -4.798252199074074E-05,
            "TotalHours": -0.0011515805277777778,
            "TotalMilliseconds": -4145.6899,
            "TotalMicroseconds": -4145689.9,
            "TotalNanoseconds": -4145689900.0,
            "TotalMinutes": -0.06909483166666666,
            "TotalSeconds": -4.1456899
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b503736c-5fd8-428d-abbc-2f1c83333ee5",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - Templates & Automation",
          "Path": [
            "Enhanced Documentation System - Templates & Automation"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - Templates & Automation",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
          "Blocks": [
            "[-] Language-Specific Templates",
            "[-] Automation Triggers"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 7,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 7,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 21803866,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 180,
            "Microseconds": 386,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.523595601851852E-05,
            "TotalHours": 0.0006056629444444444,
            "TotalMilliseconds": 2180.3866,
            "TotalMicroseconds": 2180386.6,
            "TotalNanoseconds": 2180386600.0,
            "TotalMinutes": 0.036339776666666664,
            "TotalSeconds": 2.1803866
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "Templates",
            "Automation"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "d4ef720c-cc2a-4f42-b95e-f7e2182d13b0",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Language-Specific Templates",
            "[-] Automation Triggers"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:18.9358625-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 696061,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 69,
            "Microseconds": 606,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.056261574074074E-07,
            "TotalHours": 1.933502777777778E-05,
            "TotalMilliseconds": 69.6061,
            "TotalMicroseconds": 69606.1,
            "TotalNanoseconds": 69606100.0,
            "TotalMinutes": 0.0011601016666666667,
            "TotalSeconds": 0.0696061
          },
          "UserDuration": {
            "Ticks": 21107805,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 110,
            "Microseconds": 780,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.443032986111111E-05,
            "TotalHours": 0.0005863279166666667,
            "TotalMilliseconds": 2110.7805,
            "TotalMicroseconds": 2110780.5,
            "TotalNanoseconds": 2110780500.0,
            "TotalMinutes": 0.035179675,
            "TotalSeconds": 2.1107805
          },
          "OwnDuration": {
            "Ticks": 21803866,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 180,
            "Microseconds": 386,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.523595601851852E-05,
            "TotalHours": 0.0006056629444444444,
            "TotalMilliseconds": 2180.3866,
            "TotalMicroseconds": 2180386.6,
            "TotalNanoseconds": 2180386600.0,
            "TotalMinutes": 0.036339776666666664,
            "TotalSeconds": 2.1803866
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "830c44a9-083f-4190-95c0-f1c48f479e68",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 639,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": null,
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should generate PowerShell documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate PowerShell documentation templates",
            "Data": null,
            "ExpandedName": "Should generate PowerShell documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate PowerShell documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 674,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate Python documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate Python documentation templates",
            "Data": null,
            "ExpandedName": "Should generate Python documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate Python documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 682,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate C# documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate C# documentation templates",
            "Data": null,
            "ExpandedName": "Should generate C# documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate C# documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 690,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate JavaScript documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate JavaScript documentation templates",
            "Data": null,
            "ExpandedName": "Should generate JavaScript documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate JavaScript documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 698,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should detect language from file extensions",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should detect language from file extensions",
            "Data": null,
            "ExpandedName": "Should detect language from file extensions",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should detect language from file extensions",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 707,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": true,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }",
            "Type": 19,
            "Start": 33208,
            "Length": 2841,
            "StartLine": 672,
            "StartColumn": 47,
            "EndLine": 714,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "143e92b1-db11-4f14-b6de-b37419abadd5",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }",
            "Parent": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }"
          }
        },
        "StartLine": 672,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 5,
        "OwnPassedCount": 0,
        "OwnFailedCount": 5,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": true,
      "Last": false,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 674,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should generate Python documentation templates",
      "Path": [
        "Enhanced Documentation System - Templates & Automation",
        "Language-Specific Templates",
        "Should generate Python documentation templates"
      ],
      "Data": null,
      "ExpandedName": "Should generate Python documentation templates",
      "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate Python documentation templates",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }",
          "Type": 19,
          "Start": 33911,
          "Length": 385,
          "StartLine": 682,
          "StartColumn": 136,
          "EndLine": 688,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "6bbc8202-5f97-48a0-b7fc-a5fa983ec895",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "$template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\" $template | Should -Not -BeNullOrEmpty $template | Should -Match \"Args:\" $template | Should -Match \"Returns:\" $template | Should -Match \"param1\"",
            "Traps": null,
            "Extent": "$template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"",
            "Parent": "{\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 682,
            "StartColumnNumber": 136,
            "EndLineNumber": 688,
            "EndColumnNumber": 14,
            "Text": "{\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }",
            "StartOffset": 33911,
            "EndOffset": 34296
          },
          "Parent": {
            "ScriptBlock": "{\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }",
            "Parent": "It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Language-Specific Templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates"
        ],
        "Data": null,
        "ExpandedName": "Language-Specific Templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should generate PowerShell documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate PowerShell documentation templates",
            "Data": null,
            "ExpandedName": "Should generate PowerShell documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate PowerShell documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 674,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate Python documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate Python documentation templates",
            "Data": null,
            "ExpandedName": "Should generate Python documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate Python documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 682,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate C# documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate C# documentation templates",
            "Data": null,
            "ExpandedName": "Should generate C# documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate C# documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 690,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate JavaScript documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate JavaScript documentation templates",
            "Data": null,
            "ExpandedName": "Should generate JavaScript documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate JavaScript documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 698,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should detect language from file extensions",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should detect language from file extensions",
            "Data": null,
            "ExpandedName": "Should detect language from file extensions",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should detect language from file extensions",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 707,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 5,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 5,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:12:03.5268689-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:12:03.5268689Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 43374678,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 337,
            "Microseconds": 467,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.020217361111111E-05,
            "TotalHours": 0.0012048521666666668,
            "TotalMilliseconds": 4337.4678,
            "TotalMicroseconds": 4337467.8,
            "TotalNanoseconds": 4337467800.0,
            "TotalMinutes": 0.07229113,
            "TotalSeconds": 4.3374678
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_ae38e9fc-4db5-4172-8954-fe64e3e59e6d",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0c91d161-b6ae-41fa-9bfa-b03991a212ce",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1206408,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 120,
            "Microseconds": 640,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3963055555555556E-06,
            "TotalHours": 3.351133333333333E-05,
            "TotalMilliseconds": 120.6408,
            "TotalMicroseconds": 120640.8,
            "TotalNanoseconds": 120640800.0,
            "TotalMinutes": 0.00201068,
            "TotalSeconds": 0.1206408
          },
          "FrameworkDuration": {
            "Ticks": 2967369,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 296,
            "Microseconds": 736,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.434454861111111E-06,
            "TotalHours": 8.242691666666667E-05,
            "TotalMilliseconds": 296.7369,
            "TotalMicroseconds": 296736.9,
            "TotalNanoseconds": 296736900.0,
            "TotalMinutes": 0.004945615,
            "TotalSeconds": 0.2967369
          },
          "UserDuration": {
            "Ticks": 39200901,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 920,
            "Microseconds": 90,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 3,
            "TotalDays": 4.537141319444444E-05,
            "TotalHours": 0.0010889139166666666,
            "TotalMilliseconds": 3920.0901,
            "TotalMicroseconds": 3920090.1,
            "TotalNanoseconds": 3920090100.0,
            "TotalMinutes": 0.065334835,
            "TotalSeconds": 3.9200901
          },
          "OwnDuration": {
            "Ticks": -41456899,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -145,
            "Microseconds": -689,
            "Nanoseconds": -900,
            "Minutes": 0,
            "Seconds": -4,
            "TotalDays": -4.798252199074074E-05,
            "TotalHours": -0.0011515805277777778,
            "TotalMilliseconds": -4145.6899,
            "TotalMicroseconds": -4145689.9,
            "TotalNanoseconds": -4145689900.0,
            "TotalMinutes": -0.06909483166666666,
            "TotalSeconds": -4.1456899
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b503736c-5fd8-428d-abbc-2f1c83333ee5",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - Templates & Automation",
          "Path": [
            "Enhanced Documentation System - Templates & Automation"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - Templates & Automation",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
          "Blocks": [
            "[-] Language-Specific Templates",
            "[-] Automation Triggers"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 7,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 7,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 21803866,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 180,
            "Microseconds": 386,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.523595601851852E-05,
            "TotalHours": 0.0006056629444444444,
            "TotalMilliseconds": 2180.3866,
            "TotalMicroseconds": 2180386.6,
            "TotalNanoseconds": 2180386600.0,
            "TotalMinutes": 0.036339776666666664,
            "TotalSeconds": 2.1803866
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "Templates",
            "Automation"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "d4ef720c-cc2a-4f42-b95e-f7e2182d13b0",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Language-Specific Templates",
            "[-] Automation Triggers"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:18.9358625-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 696061,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 69,
            "Microseconds": 606,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.056261574074074E-07,
            "TotalHours": 1.933502777777778E-05,
            "TotalMilliseconds": 69.6061,
            "TotalMicroseconds": 69606.1,
            "TotalNanoseconds": 69606100.0,
            "TotalMinutes": 0.0011601016666666667,
            "TotalSeconds": 0.0696061
          },
          "UserDuration": {
            "Ticks": 21107805,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 110,
            "Microseconds": 780,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.443032986111111E-05,
            "TotalHours": 0.0005863279166666667,
            "TotalMilliseconds": 2110.7805,
            "TotalMicroseconds": 2110780.5,
            "TotalNanoseconds": 2110780500.0,
            "TotalMinutes": 0.035179675,
            "TotalSeconds": 2.1107805
          },
          "OwnDuration": {
            "Ticks": 21803866,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 180,
            "Microseconds": 386,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.523595601851852E-05,
            "TotalHours": 0.0006056629444444444,
            "TotalMilliseconds": 2180.3866,
            "TotalMicroseconds": 2180386.6,
            "TotalNanoseconds": 2180386600.0,
            "TotalMinutes": 0.036339776666666664,
            "TotalSeconds": 2.1803866
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "830c44a9-083f-4190-95c0-f1c48f479e68",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 639,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": null,
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should generate PowerShell documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate PowerShell documentation templates",
            "Data": null,
            "ExpandedName": "Should generate PowerShell documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate PowerShell documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 674,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate Python documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate Python documentation templates",
            "Data": null,
            "ExpandedName": "Should generate Python documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate Python documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 682,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate C# documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate C# documentation templates",
            "Data": null,
            "ExpandedName": "Should generate C# documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate C# documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 690,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate JavaScript documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate JavaScript documentation templates",
            "Data": null,
            "ExpandedName": "Should generate JavaScript documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate JavaScript documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 698,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should detect language from file extensions",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should detect language from file extensions",
            "Data": null,
            "ExpandedName": "Should detect language from file extensions",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should detect language from file extensions",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 707,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": true,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }",
            "Type": 19,
            "Start": 33208,
            "Length": 2841,
            "StartLine": 672,
            "StartColumn": 47,
            "EndLine": 714,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "143e92b1-db11-4f14-b6de-b37419abadd5",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }",
            "Parent": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }"
          }
        },
        "StartLine": 672,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 5,
        "OwnPassedCount": 0,
        "OwnFailedCount": 5,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": false,
      "Last": false,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 682,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should generate C# documentation templates",
      "Path": [
        "Enhanced Documentation System - Templates & Automation",
        "Language-Specific Templates",
        "Should generate C# documentation templates"
      ],
      "Data": null,
      "ExpandedName": "Should generate C# documentation templates",
      "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate C# documentation templates",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }",
          "Type": 19,
          "Start": 34443,
          "Length": 400,
          "StartLine": 690,
          "StartColumn": 132,
          "EndLine": 696,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "bed2f1ab-379b-4445-883a-d9a979419567",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "$template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\" $template | Should -Not -BeNullOrEmpty $template | Should -Match \"<summary>\" $template | Should -Match \"Test method summary\" $template | Should -Match '<param name=\"param1\">'",
            "Traps": null,
            "Extent": "$template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'",
            "Parent": "{\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 690,
            "StartColumnNumber": 132,
            "EndLineNumber": 696,
            "EndColumnNumber": 14,
            "Text": "{\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }",
            "StartOffset": 34443,
            "EndOffset": 34843
          },
          "Parent": {
            "ScriptBlock": "{\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }",
            "Parent": "It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Language-Specific Templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates"
        ],
        "Data": null,
        "ExpandedName": "Language-Specific Templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should generate PowerShell documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate PowerShell documentation templates",
            "Data": null,
            "ExpandedName": "Should generate PowerShell documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate PowerShell documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 674,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate Python documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate Python documentation templates",
            "Data": null,
            "ExpandedName": "Should generate Python documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate Python documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 682,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate C# documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate C# documentation templates",
            "Data": null,
            "ExpandedName": "Should generate C# documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate C# documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 690,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate JavaScript documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate JavaScript documentation templates",
            "Data": null,
            "ExpandedName": "Should generate JavaScript documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate JavaScript documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 698,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should detect language from file extensions",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should detect language from file extensions",
            "Data": null,
            "ExpandedName": "Should detect language from file extensions",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should detect language from file extensions",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 707,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 5,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 5,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:12:03.5268689-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:12:03.5268689Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 43374678,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 337,
            "Microseconds": 467,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.020217361111111E-05,
            "TotalHours": 0.0012048521666666668,
            "TotalMilliseconds": 4337.4678,
            "TotalMicroseconds": 4337467.8,
            "TotalNanoseconds": 4337467800.0,
            "TotalMinutes": 0.07229113,
            "TotalSeconds": 4.3374678
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_ae38e9fc-4db5-4172-8954-fe64e3e59e6d",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0c91d161-b6ae-41fa-9bfa-b03991a212ce",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1206408,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 120,
            "Microseconds": 640,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3963055555555556E-06,
            "TotalHours": 3.351133333333333E-05,
            "TotalMilliseconds": 120.6408,
            "TotalMicroseconds": 120640.8,
            "TotalNanoseconds": 120640800.0,
            "TotalMinutes": 0.00201068,
            "TotalSeconds": 0.1206408
          },
          "FrameworkDuration": {
            "Ticks": 2967369,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 296,
            "Microseconds": 736,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.434454861111111E-06,
            "TotalHours": 8.242691666666667E-05,
            "TotalMilliseconds": 296.7369,
            "TotalMicroseconds": 296736.9,
            "TotalNanoseconds": 296736900.0,
            "TotalMinutes": 0.004945615,
            "TotalSeconds": 0.2967369
          },
          "UserDuration": {
            "Ticks": 39200901,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 920,
            "Microseconds": 90,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 3,
            "TotalDays": 4.537141319444444E-05,
            "TotalHours": 0.0010889139166666666,
            "TotalMilliseconds": 3920.0901,
            "TotalMicroseconds": 3920090.1,
            "TotalNanoseconds": 3920090100.0,
            "TotalMinutes": 0.065334835,
            "TotalSeconds": 3.9200901
          },
          "OwnDuration": {
            "Ticks": -41456899,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -145,
            "Microseconds": -689,
            "Nanoseconds": -900,
            "Minutes": 0,
            "Seconds": -4,
            "TotalDays": -4.798252199074074E-05,
            "TotalHours": -0.0011515805277777778,
            "TotalMilliseconds": -4145.6899,
            "TotalMicroseconds": -4145689.9,
            "TotalNanoseconds": -4145689900.0,
            "TotalMinutes": -0.06909483166666666,
            "TotalSeconds": -4.1456899
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b503736c-5fd8-428d-abbc-2f1c83333ee5",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - Templates & Automation",
          "Path": [
            "Enhanced Documentation System - Templates & Automation"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - Templates & Automation",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
          "Blocks": [
            "[-] Language-Specific Templates",
            "[-] Automation Triggers"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 7,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 7,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 21803866,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 180,
            "Microseconds": 386,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.523595601851852E-05,
            "TotalHours": 0.0006056629444444444,
            "TotalMilliseconds": 2180.3866,
            "TotalMicroseconds": 2180386.6,
            "TotalNanoseconds": 2180386600.0,
            "TotalMinutes": 0.036339776666666664,
            "TotalSeconds": 2.1803866
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "Templates",
            "Automation"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "d4ef720c-cc2a-4f42-b95e-f7e2182d13b0",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Language-Specific Templates",
            "[-] Automation Triggers"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:18.9358625-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 696061,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 69,
            "Microseconds": 606,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.056261574074074E-07,
            "TotalHours": 1.933502777777778E-05,
            "TotalMilliseconds": 69.6061,
            "TotalMicroseconds": 69606.1,
            "TotalNanoseconds": 69606100.0,
            "TotalMinutes": 0.0011601016666666667,
            "TotalSeconds": 0.0696061
          },
          "UserDuration": {
            "Ticks": 21107805,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 110,
            "Microseconds": 780,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.443032986111111E-05,
            "TotalHours": 0.0005863279166666667,
            "TotalMilliseconds": 2110.7805,
            "TotalMicroseconds": 2110780.5,
            "TotalNanoseconds": 2110780500.0,
            "TotalMinutes": 0.035179675,
            "TotalSeconds": 2.1107805
          },
          "OwnDuration": {
            "Ticks": 21803866,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 180,
            "Microseconds": 386,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.523595601851852E-05,
            "TotalHours": 0.0006056629444444444,
            "TotalMilliseconds": 2180.3866,
            "TotalMicroseconds": 2180386.6,
            "TotalNanoseconds": 2180386600.0,
            "TotalMinutes": 0.036339776666666664,
            "TotalSeconds": 2.1803866
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "830c44a9-083f-4190-95c0-f1c48f479e68",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 639,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": null,
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should generate PowerShell documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate PowerShell documentation templates",
            "Data": null,
            "ExpandedName": "Should generate PowerShell documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate PowerShell documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 674,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate Python documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate Python documentation templates",
            "Data": null,
            "ExpandedName": "Should generate Python documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate Python documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 682,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate C# documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate C# documentation templates",
            "Data": null,
            "ExpandedName": "Should generate C# documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate C# documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 690,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate JavaScript documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate JavaScript documentation templates",
            "Data": null,
            "ExpandedName": "Should generate JavaScript documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate JavaScript documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 698,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should detect language from file extensions",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should detect language from file extensions",
            "Data": null,
            "ExpandedName": "Should detect language from file extensions",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should detect language from file extensions",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 707,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": true,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }",
            "Type": 19,
            "Start": 33208,
            "Length": 2841,
            "StartLine": 672,
            "StartColumn": 47,
            "EndLine": 714,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "143e92b1-db11-4f14-b6de-b37419abadd5",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }",
            "Parent": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }"
          }
        },
        "StartLine": 672,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 5,
        "OwnPassedCount": 0,
        "OwnFailedCount": 5,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": false,
      "Last": false,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 690,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should generate JavaScript documentation templates",
      "Path": [
        "Enhanced Documentation System - Templates & Automation",
        "Language-Specific Templates",
        "Should generate JavaScript documentation templates"
      ],
      "Data": null,
      "ExpandedName": "Should generate JavaScript documentation templates",
      "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate JavaScript documentation templates",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }",
          "Type": 19,
          "Start": 34998,
          "Length": 437,
          "StartLine": 698,
          "StartColumn": 140,
          "EndLine": 705,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "07c28935-8d4d-4d5c-a283-734c0d3bc011",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "$template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\" $template | Should -Not -BeNullOrEmpty $template | Should -Match \"/\\*\\*\" $template | Should -Match \"@param\" $template | Should -Match \"@returns\" $template | Should -Match \"\\*/\"",
            "Traps": null,
            "Extent": "$template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"",
            "Parent": "{\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 698,
            "StartColumnNumber": 140,
            "EndLineNumber": 705,
            "EndColumnNumber": 14,
            "Text": "{\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }",
            "StartOffset": 34998,
            "EndOffset": 35435
          },
          "Parent": {
            "ScriptBlock": "{\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }",
            "Parent": "It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Language-Specific Templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates"
        ],
        "Data": null,
        "ExpandedName": "Language-Specific Templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should generate PowerShell documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate PowerShell documentation templates",
            "Data": null,
            "ExpandedName": "Should generate PowerShell documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate PowerShell documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 674,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate Python documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate Python documentation templates",
            "Data": null,
            "ExpandedName": "Should generate Python documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate Python documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 682,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate C# documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate C# documentation templates",
            "Data": null,
            "ExpandedName": "Should generate C# documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate C# documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 690,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate JavaScript documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate JavaScript documentation templates",
            "Data": null,
            "ExpandedName": "Should generate JavaScript documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate JavaScript documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 698,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should detect language from file extensions",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should detect language from file extensions",
            "Data": null,
            "ExpandedName": "Should detect language from file extensions",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should detect language from file extensions",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 707,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 5,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 5,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:12:03.5268689-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:12:03.5268689Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 43374678,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 337,
            "Microseconds": 467,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.020217361111111E-05,
            "TotalHours": 0.0012048521666666668,
            "TotalMilliseconds": 4337.4678,
            "TotalMicroseconds": 4337467.8,
            "TotalNanoseconds": 4337467800.0,
            "TotalMinutes": 0.07229113,
            "TotalSeconds": 4.3374678
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_ae38e9fc-4db5-4172-8954-fe64e3e59e6d",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0c91d161-b6ae-41fa-9bfa-b03991a212ce",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1206408,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 120,
            "Microseconds": 640,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3963055555555556E-06,
            "TotalHours": 3.351133333333333E-05,
            "TotalMilliseconds": 120.6408,
            "TotalMicroseconds": 120640.8,
            "TotalNanoseconds": 120640800.0,
            "TotalMinutes": 0.00201068,
            "TotalSeconds": 0.1206408
          },
          "FrameworkDuration": {
            "Ticks": 2967369,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 296,
            "Microseconds": 736,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.434454861111111E-06,
            "TotalHours": 8.242691666666667E-05,
            "TotalMilliseconds": 296.7369,
            "TotalMicroseconds": 296736.9,
            "TotalNanoseconds": 296736900.0,
            "TotalMinutes": 0.004945615,
            "TotalSeconds": 0.2967369
          },
          "UserDuration": {
            "Ticks": 39200901,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 920,
            "Microseconds": 90,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 3,
            "TotalDays": 4.537141319444444E-05,
            "TotalHours": 0.0010889139166666666,
            "TotalMilliseconds": 3920.0901,
            "TotalMicroseconds": 3920090.1,
            "TotalNanoseconds": 3920090100.0,
            "TotalMinutes": 0.065334835,
            "TotalSeconds": 3.9200901
          },
          "OwnDuration": {
            "Ticks": -41456899,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -145,
            "Microseconds": -689,
            "Nanoseconds": -900,
            "Minutes": 0,
            "Seconds": -4,
            "TotalDays": -4.798252199074074E-05,
            "TotalHours": -0.0011515805277777778,
            "TotalMilliseconds": -4145.6899,
            "TotalMicroseconds": -4145689.9,
            "TotalNanoseconds": -4145689900.0,
            "TotalMinutes": -0.06909483166666666,
            "TotalSeconds": -4.1456899
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b503736c-5fd8-428d-abbc-2f1c83333ee5",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - Templates & Automation",
          "Path": [
            "Enhanced Documentation System - Templates & Automation"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - Templates & Automation",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
          "Blocks": [
            "[-] Language-Specific Templates",
            "[-] Automation Triggers"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 7,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 7,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 21803866,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 180,
            "Microseconds": 386,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.523595601851852E-05,
            "TotalHours": 0.0006056629444444444,
            "TotalMilliseconds": 2180.3866,
            "TotalMicroseconds": 2180386.6,
            "TotalNanoseconds": 2180386600.0,
            "TotalMinutes": 0.036339776666666664,
            "TotalSeconds": 2.1803866
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "Templates",
            "Automation"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "d4ef720c-cc2a-4f42-b95e-f7e2182d13b0",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Language-Specific Templates",
            "[-] Automation Triggers"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:18.9358625-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 696061,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 69,
            "Microseconds": 606,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.056261574074074E-07,
            "TotalHours": 1.933502777777778E-05,
            "TotalMilliseconds": 69.6061,
            "TotalMicroseconds": 69606.1,
            "TotalNanoseconds": 69606100.0,
            "TotalMinutes": 0.0011601016666666667,
            "TotalSeconds": 0.0696061
          },
          "UserDuration": {
            "Ticks": 21107805,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 110,
            "Microseconds": 780,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.443032986111111E-05,
            "TotalHours": 0.0005863279166666667,
            "TotalMilliseconds": 2110.7805,
            "TotalMicroseconds": 2110780.5,
            "TotalNanoseconds": 2110780500.0,
            "TotalMinutes": 0.035179675,
            "TotalSeconds": 2.1107805
          },
          "OwnDuration": {
            "Ticks": 21803866,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 180,
            "Microseconds": 386,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.523595601851852E-05,
            "TotalHours": 0.0006056629444444444,
            "TotalMilliseconds": 2180.3866,
            "TotalMicroseconds": 2180386.6,
            "TotalNanoseconds": 2180386600.0,
            "TotalMinutes": 0.036339776666666664,
            "TotalSeconds": 2.1803866
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "830c44a9-083f-4190-95c0-f1c48f479e68",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 639,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": null,
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should generate PowerShell documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate PowerShell documentation templates",
            "Data": null,
            "ExpandedName": "Should generate PowerShell documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate PowerShell documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 674,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate Python documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate Python documentation templates",
            "Data": null,
            "ExpandedName": "Should generate Python documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate Python documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 682,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate C# documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate C# documentation templates",
            "Data": null,
            "ExpandedName": "Should generate C# documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate C# documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 690,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate JavaScript documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate JavaScript documentation templates",
            "Data": null,
            "ExpandedName": "Should generate JavaScript documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate JavaScript documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 698,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should detect language from file extensions",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should detect language from file extensions",
            "Data": null,
            "ExpandedName": "Should detect language from file extensions",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should detect language from file extensions",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 707,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": true,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }",
            "Type": 19,
            "Start": 33208,
            "Length": 2841,
            "StartLine": 672,
            "StartColumn": 47,
            "EndLine": 714,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "143e92b1-db11-4f14-b6de-b37419abadd5",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }",
            "Parent": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }"
          }
        },
        "StartLine": 672,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 5,
        "OwnPassedCount": 0,
        "OwnFailedCount": 5,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": false,
      "Last": false,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 698,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should detect language from file extensions",
      "Path": [
        "Enhanced Documentation System - Templates & Automation",
        "Language-Specific Templates",
        "Should detect language from file extensions"
      ],
      "Data": null,
      "ExpandedName": "Should detect language from file extensions",
      "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should detect language from file extensions",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }",
          "Type": 19,
          "Start": 35583,
          "Length": 455,
          "StartLine": 707,
          "StartColumn": 133,
          "EndLine": 713,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "bdcdd878-026d-4fe4-b043-0ec21fc7819e",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\" Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\" Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\" Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"",
            "Traps": null,
            "Extent": "Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"",
            "Parent": "{\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 707,
            "StartColumnNumber": 133,
            "EndLineNumber": 713,
            "EndColumnNumber": 14,
            "Text": "{\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }",
            "StartOffset": 35583,
            "EndOffset": 36038
          },
          "Parent": {
            "ScriptBlock": "{\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }",
            "Parent": "It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Language-Specific Templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates"
        ],
        "Data": null,
        "ExpandedName": "Language-Specific Templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should generate PowerShell documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate PowerShell documentation templates",
            "Data": null,
            "ExpandedName": "Should generate PowerShell documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate PowerShell documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 674,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate Python documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate Python documentation templates",
            "Data": null,
            "ExpandedName": "Should generate Python documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate Python documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 682,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate C# documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate C# documentation templates",
            "Data": null,
            "ExpandedName": "Should generate C# documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate C# documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 690,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate JavaScript documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate JavaScript documentation templates",
            "Data": null,
            "ExpandedName": "Should generate JavaScript documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate JavaScript documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 698,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should detect language from file extensions",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should detect language from file extensions",
            "Data": null,
            "ExpandedName": "Should detect language from file extensions",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should detect language from file extensions",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 707,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 5,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 5,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:12:03.5268689-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:12:03.5268689Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 43374678,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 337,
            "Microseconds": 467,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.020217361111111E-05,
            "TotalHours": 0.0012048521666666668,
            "TotalMilliseconds": 4337.4678,
            "TotalMicroseconds": 4337467.8,
            "TotalNanoseconds": 4337467800.0,
            "TotalMinutes": 0.07229113,
            "TotalSeconds": 4.3374678
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_ae38e9fc-4db5-4172-8954-fe64e3e59e6d",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0c91d161-b6ae-41fa-9bfa-b03991a212ce",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1206408,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 120,
            "Microseconds": 640,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3963055555555556E-06,
            "TotalHours": 3.351133333333333E-05,
            "TotalMilliseconds": 120.6408,
            "TotalMicroseconds": 120640.8,
            "TotalNanoseconds": 120640800.0,
            "TotalMinutes": 0.00201068,
            "TotalSeconds": 0.1206408
          },
          "FrameworkDuration": {
            "Ticks": 2967369,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 296,
            "Microseconds": 736,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.434454861111111E-06,
            "TotalHours": 8.242691666666667E-05,
            "TotalMilliseconds": 296.7369,
            "TotalMicroseconds": 296736.9,
            "TotalNanoseconds": 296736900.0,
            "TotalMinutes": 0.004945615,
            "TotalSeconds": 0.2967369
          },
          "UserDuration": {
            "Ticks": 39200901,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 920,
            "Microseconds": 90,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 3,
            "TotalDays": 4.537141319444444E-05,
            "TotalHours": 0.0010889139166666666,
            "TotalMilliseconds": 3920.0901,
            "TotalMicroseconds": 3920090.1,
            "TotalNanoseconds": 3920090100.0,
            "TotalMinutes": 0.065334835,
            "TotalSeconds": 3.9200901
          },
          "OwnDuration": {
            "Ticks": -41456899,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -145,
            "Microseconds": -689,
            "Nanoseconds": -900,
            "Minutes": 0,
            "Seconds": -4,
            "TotalDays": -4.798252199074074E-05,
            "TotalHours": -0.0011515805277777778,
            "TotalMilliseconds": -4145.6899,
            "TotalMicroseconds": -4145689.9,
            "TotalNanoseconds": -4145689900.0,
            "TotalMinutes": -0.06909483166666666,
            "TotalSeconds": -4.1456899
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b503736c-5fd8-428d-abbc-2f1c83333ee5",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - Templates & Automation",
          "Path": [
            "Enhanced Documentation System - Templates & Automation"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - Templates & Automation",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
          "Blocks": [
            "[-] Language-Specific Templates",
            "[-] Automation Triggers"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 7,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 7,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 21803866,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 180,
            "Microseconds": 386,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.523595601851852E-05,
            "TotalHours": 0.0006056629444444444,
            "TotalMilliseconds": 2180.3866,
            "TotalMicroseconds": 2180386.6,
            "TotalNanoseconds": 2180386600.0,
            "TotalMinutes": 0.036339776666666664,
            "TotalSeconds": 2.1803866
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "Templates",
            "Automation"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "d4ef720c-cc2a-4f42-b95e-f7e2182d13b0",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Language-Specific Templates",
            "[-] Automation Triggers"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:18.9358625-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 696061,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 69,
            "Microseconds": 606,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.056261574074074E-07,
            "TotalHours": 1.933502777777778E-05,
            "TotalMilliseconds": 69.6061,
            "TotalMicroseconds": 69606.1,
            "TotalNanoseconds": 69606100.0,
            "TotalMinutes": 0.0011601016666666667,
            "TotalSeconds": 0.0696061
          },
          "UserDuration": {
            "Ticks": 21107805,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 110,
            "Microseconds": 780,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.443032986111111E-05,
            "TotalHours": 0.0005863279166666667,
            "TotalMilliseconds": 2110.7805,
            "TotalMicroseconds": 2110780.5,
            "TotalNanoseconds": 2110780500.0,
            "TotalMinutes": 0.035179675,
            "TotalSeconds": 2.1107805
          },
          "OwnDuration": {
            "Ticks": 21803866,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 180,
            "Microseconds": 386,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.523595601851852E-05,
            "TotalHours": 0.0006056629444444444,
            "TotalMilliseconds": 2180.3866,
            "TotalMicroseconds": 2180386.6,
            "TotalNanoseconds": 2180386600.0,
            "TotalMinutes": 0.036339776666666664,
            "TotalSeconds": 2.1803866
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "830c44a9-083f-4190-95c0-f1c48f479e68",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 639,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": null,
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should generate PowerShell documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate PowerShell documentation templates",
            "Data": null,
            "ExpandedName": "Should generate PowerShell documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate PowerShell documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 674,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate Python documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate Python documentation templates",
            "Data": null,
            "ExpandedName": "Should generate Python documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate Python documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 682,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate C# documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate C# documentation templates",
            "Data": null,
            "ExpandedName": "Should generate C# documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate C# documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 690,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate JavaScript documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate JavaScript documentation templates",
            "Data": null,
            "ExpandedName": "Should generate JavaScript documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate JavaScript documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 698,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should detect language from file extensions",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should detect language from file extensions",
            "Data": null,
            "ExpandedName": "Should detect language from file extensions",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should detect language from file extensions",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 707,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": true,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }",
            "Type": 19,
            "Start": 33208,
            "Length": 2841,
            "StartLine": 672,
            "StartColumn": 47,
            "EndLine": 714,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "143e92b1-db11-4f14-b6de-b37419abadd5",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }",
            "Parent": "{\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }"
          }
        },
        "StartLine": 672,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 5,
        "OwnPassedCount": 0,
        "OwnFailedCount": 5,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": false,
      "Last": true,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 707,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should initialize documentation triggers",
      "Path": [
        "Enhanced Documentation System - Templates & Automation",
        "Automation Triggers",
        "Should initialize documentation triggers"
      ],
      "Data": null,
      "ExpandedName": "Should initialize documentation triggers",
      "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should initialize documentation triggers",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }",
          "Type": 19,
          "Start": 36246,
          "Length": 120,
          "StartLine": 718,
          "StartColumn": 131,
          "EndLine": 721,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "42b0d357-c9d2-427c-acb3-f1a0feab68c5",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "$result = Initialize-DocumentationTriggers $result | Should -Be $true",
            "Traps": null,
            "Extent": "$result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true",
            "Parent": "{\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 718,
            "StartColumnNumber": 131,
            "EndLineNumber": 721,
            "EndColumnNumber": 14,
            "Text": "{\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }",
            "StartOffset": 36246,
            "EndOffset": 36366
          },
          "Parent": {
            "ScriptBlock": "{\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }",
            "Parent": "It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Automation Triggers",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Automation Triggers"
        ],
        "Data": null,
        "ExpandedName": "Automation Triggers",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should initialize documentation triggers",
            "Path": "Enhanced Documentation System - Templates & Automation Automation Triggers Should initialize documentation triggers",
            "Data": null,
            "ExpandedName": "Should initialize documentation triggers",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should initialize documentation triggers",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Automation Triggers",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 718,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should log trigger activity",
            "Path": "Enhanced Documentation System - Templates & Automation Automation Triggers Should log trigger activity",
            "Data": null,
            "ExpandedName": "Should log trigger activity",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should log trigger activity",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Automation Triggers",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 723,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 2,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 2,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:12:03.5268689-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:12:03.5268689Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 43374678,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 337,
            "Microseconds": 467,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.020217361111111E-05,
            "TotalHours": 0.0012048521666666668,
            "TotalMilliseconds": 4337.4678,
            "TotalMicroseconds": 4337467.8,
            "TotalNanoseconds": 4337467800.0,
            "TotalMinutes": 0.07229113,
            "TotalSeconds": 4.3374678
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_ae38e9fc-4db5-4172-8954-fe64e3e59e6d",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0c91d161-b6ae-41fa-9bfa-b03991a212ce",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1206408,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 120,
            "Microseconds": 640,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3963055555555556E-06,
            "TotalHours": 3.351133333333333E-05,
            "TotalMilliseconds": 120.6408,
            "TotalMicroseconds": 120640.8,
            "TotalNanoseconds": 120640800.0,
            "TotalMinutes": 0.00201068,
            "TotalSeconds": 0.1206408
          },
          "FrameworkDuration": {
            "Ticks": 2967369,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 296,
            "Microseconds": 736,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.434454861111111E-06,
            "TotalHours": 8.242691666666667E-05,
            "TotalMilliseconds": 296.7369,
            "TotalMicroseconds": 296736.9,
            "TotalNanoseconds": 296736900.0,
            "TotalMinutes": 0.004945615,
            "TotalSeconds": 0.2967369
          },
          "UserDuration": {
            "Ticks": 39200901,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 920,
            "Microseconds": 90,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 3,
            "TotalDays": 4.537141319444444E-05,
            "TotalHours": 0.0010889139166666666,
            "TotalMilliseconds": 3920.0901,
            "TotalMicroseconds": 3920090.1,
            "TotalNanoseconds": 3920090100.0,
            "TotalMinutes": 0.065334835,
            "TotalSeconds": 3.9200901
          },
          "OwnDuration": {
            "Ticks": -41456899,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -145,
            "Microseconds": -689,
            "Nanoseconds": -900,
            "Minutes": 0,
            "Seconds": -4,
            "TotalDays": -4.798252199074074E-05,
            "TotalHours": -0.0011515805277777778,
            "TotalMilliseconds": -4145.6899,
            "TotalMicroseconds": -4145689.9,
            "TotalNanoseconds": -4145689900.0,
            "TotalMinutes": -0.06909483166666666,
            "TotalSeconds": -4.1456899
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b503736c-5fd8-428d-abbc-2f1c83333ee5",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - Templates & Automation",
          "Path": [
            "Enhanced Documentation System - Templates & Automation"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - Templates & Automation",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
          "Blocks": [
            "[-] Language-Specific Templates",
            "[-] Automation Triggers"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 7,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 7,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 21803866,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 180,
            "Microseconds": 386,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.523595601851852E-05,
            "TotalHours": 0.0006056629444444444,
            "TotalMilliseconds": 2180.3866,
            "TotalMicroseconds": 2180386.6,
            "TotalNanoseconds": 2180386600.0,
            "TotalMinutes": 0.036339776666666664,
            "TotalSeconds": 2.1803866
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "Templates",
            "Automation"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "d4ef720c-cc2a-4f42-b95e-f7e2182d13b0",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Language-Specific Templates",
            "[-] Automation Triggers"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:18.9358625-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 696061,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 69,
            "Microseconds": 606,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.056261574074074E-07,
            "TotalHours": 1.933502777777778E-05,
            "TotalMilliseconds": 69.6061,
            "TotalMicroseconds": 69606.1,
            "TotalNanoseconds": 69606100.0,
            "TotalMinutes": 0.0011601016666666667,
            "TotalSeconds": 0.0696061
          },
          "UserDuration": {
            "Ticks": 21107805,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 110,
            "Microseconds": 780,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.443032986111111E-05,
            "TotalHours": 0.0005863279166666667,
            "TotalMilliseconds": 2110.7805,
            "TotalMicroseconds": 2110780.5,
            "TotalNanoseconds": 2110780500.0,
            "TotalMinutes": 0.035179675,
            "TotalSeconds": 2.1107805
          },
          "OwnDuration": {
            "Ticks": 21803866,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 180,
            "Microseconds": 386,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.523595601851852E-05,
            "TotalHours": 0.0006056629444444444,
            "TotalMilliseconds": 2180.3866,
            "TotalMicroseconds": 2180386.6,
            "TotalNanoseconds": 2180386600.0,
            "TotalMinutes": 0.036339776666666664,
            "TotalSeconds": 2.1803866
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "830c44a9-083f-4190-95c0-f1c48f479e68",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 639,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": null,
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should initialize documentation triggers",
            "Path": "Enhanced Documentation System - Templates & Automation Automation Triggers Should initialize documentation triggers",
            "Data": null,
            "ExpandedName": "Should initialize documentation triggers",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should initialize documentation triggers",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Automation Triggers",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 718,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should log trigger activity",
            "Path": "Enhanced Documentation System - Templates & Automation Automation Triggers Should log trigger activity",
            "Data": null,
            "ExpandedName": "Should log trigger activity",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should log trigger activity",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Automation Triggers",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 723,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": false,
        "Last": true,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }",
            "Type": 19,
            "Start": 36099,
            "Length": 968,
            "StartLine": 716,
            "StartColumn": 39,
            "EndLine": 737,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "df14d535-23b7-48f4-bdf3-0b1419915eef",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }",
            "Parent": "{\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }"
          }
        },
        "StartLine": 716,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 2,
        "OwnPassedCount": 0,
        "OwnFailedCount": 2,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": true,
      "Last": false,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 718,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should log trigger activity",
      "Path": [
        "Enhanced Documentation System - Templates & Automation",
        "Automation Triggers",
        "Should log trigger activity"
      ],
      "Data": null,
      "ExpandedName": "Should log trigger activity",
      "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should log trigger activity",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }",
          "Type": 19,
          "Start": 36499,
          "Length": 557,
          "StartLine": 723,
          "StartColumn": 118,
          "EndLine": 736,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "bd1ab19b-ebaa-43c8-a3b6-226bc96015e1",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "$logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                } Add-TriggerActivity -LogEntry $logEntry $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual' $activities | Should -Not -BeNullOrEmpty $activities[0].Trigger | Should -Be 'Manual'",
            "Traps": null,
            "Extent": "$logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'",
            "Parent": "{\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 723,
            "StartColumnNumber": 118,
            "EndLineNumber": 736,
            "EndColumnNumber": 14,
            "Text": "{\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }",
            "StartOffset": 36499,
            "EndOffset": 37056
          },
          "Parent": {
            "ScriptBlock": "{\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }",
            "Parent": "It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Automation Triggers",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Automation Triggers"
        ],
        "Data": null,
        "ExpandedName": "Automation Triggers",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should initialize documentation triggers",
            "Path": "Enhanced Documentation System - Templates & Automation Automation Triggers Should initialize documentation triggers",
            "Data": null,
            "ExpandedName": "Should initialize documentation triggers",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should initialize documentation triggers",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Automation Triggers",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 718,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should log trigger activity",
            "Path": "Enhanced Documentation System - Templates & Automation Automation Triggers Should log trigger activity",
            "Data": null,
            "ExpandedName": "Should log trigger activity",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should log trigger activity",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Automation Triggers",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 723,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 2,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 2,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:12:03.5268689-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:12:03.5268689Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 43374678,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 337,
            "Microseconds": 467,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.020217361111111E-05,
            "TotalHours": 0.0012048521666666668,
            "TotalMilliseconds": 4337.4678,
            "TotalMicroseconds": 4337467.8,
            "TotalNanoseconds": 4337467800.0,
            "TotalMinutes": 0.07229113,
            "TotalSeconds": 4.3374678
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_ae38e9fc-4db5-4172-8954-fe64e3e59e6d",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0c91d161-b6ae-41fa-9bfa-b03991a212ce",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1206408,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 120,
            "Microseconds": 640,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3963055555555556E-06,
            "TotalHours": 3.351133333333333E-05,
            "TotalMilliseconds": 120.6408,
            "TotalMicroseconds": 120640.8,
            "TotalNanoseconds": 120640800.0,
            "TotalMinutes": 0.00201068,
            "TotalSeconds": 0.1206408
          },
          "FrameworkDuration": {
            "Ticks": 2967369,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 296,
            "Microseconds": 736,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.434454861111111E-06,
            "TotalHours": 8.242691666666667E-05,
            "TotalMilliseconds": 296.7369,
            "TotalMicroseconds": 296736.9,
            "TotalNanoseconds": 296736900.0,
            "TotalMinutes": 0.004945615,
            "TotalSeconds": 0.2967369
          },
          "UserDuration": {
            "Ticks": 39200901,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 920,
            "Microseconds": 90,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 3,
            "TotalDays": 4.537141319444444E-05,
            "TotalHours": 0.0010889139166666666,
            "TotalMilliseconds": 3920.0901,
            "TotalMicroseconds": 3920090.1,
            "TotalNanoseconds": 3920090100.0,
            "TotalMinutes": 0.065334835,
            "TotalSeconds": 3.9200901
          },
          "OwnDuration": {
            "Ticks": -41456899,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -145,
            "Microseconds": -689,
            "Nanoseconds": -900,
            "Minutes": 0,
            "Seconds": -4,
            "TotalDays": -4.798252199074074E-05,
            "TotalHours": -0.0011515805277777778,
            "TotalMilliseconds": -4145.6899,
            "TotalMicroseconds": -4145689.9,
            "TotalNanoseconds": -4145689900.0,
            "TotalMinutes": -0.06909483166666666,
            "TotalSeconds": -4.1456899
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b503736c-5fd8-428d-abbc-2f1c83333ee5",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - Templates & Automation",
          "Path": [
            "Enhanced Documentation System - Templates & Automation"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - Templates & Automation",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
          "Blocks": [
            "[-] Language-Specific Templates",
            "[-] Automation Triggers"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 7,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 7,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 21803866,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 180,
            "Microseconds": 386,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.523595601851852E-05,
            "TotalHours": 0.0006056629444444444,
            "TotalMilliseconds": 2180.3866,
            "TotalMicroseconds": 2180386.6,
            "TotalNanoseconds": 2180386600.0,
            "TotalMinutes": 0.036339776666666664,
            "TotalSeconds": 2.1803866
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "Templates",
            "Automation"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "d4ef720c-cc2a-4f42-b95e-f7e2182d13b0",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Language-Specific Templates",
            "[-] Automation Triggers"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:18.9358625-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 696061,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 69,
            "Microseconds": 606,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.056261574074074E-07,
            "TotalHours": 1.933502777777778E-05,
            "TotalMilliseconds": 69.6061,
            "TotalMicroseconds": 69606.1,
            "TotalNanoseconds": 69606100.0,
            "TotalMinutes": 0.0011601016666666667,
            "TotalSeconds": 0.0696061
          },
          "UserDuration": {
            "Ticks": 21107805,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 110,
            "Microseconds": 780,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.443032986111111E-05,
            "TotalHours": 0.0005863279166666667,
            "TotalMilliseconds": 2110.7805,
            "TotalMicroseconds": 2110780.5,
            "TotalNanoseconds": 2110780500.0,
            "TotalMinutes": 0.035179675,
            "TotalSeconds": 2.1107805
          },
          "OwnDuration": {
            "Ticks": 21803866,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 180,
            "Microseconds": 386,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.523595601851852E-05,
            "TotalHours": 0.0006056629444444444,
            "TotalMilliseconds": 2180.3866,
            "TotalMicroseconds": 2180386.6,
            "TotalNanoseconds": 2180386600.0,
            "TotalMinutes": 0.036339776666666664,
            "TotalSeconds": 2.1803866
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "830c44a9-083f-4190-95c0-f1c48f479e68",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Import available Template modules directly (availability already determined at script level)\r\n            Write-Host \"[BeforeAll-Templates] Importing available Template modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $templateModulePaths.Keys) {\r\n                if ($script:TemplateModulesAvailable[$moduleName]) {\r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Importing $moduleName...\" -ForegroundColor Gray\r\n                        Import-Module $templateModulePaths[$moduleName] -Force -ErrorAction SilentlyContinue\r\n                        Write-Host \"[BeforeAll-Templates] Successfully imported $moduleName\" -ForegroundColor Green\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Warning: Could not import $moduleName : $($_.Exception.Message)\" -ForegroundColor Yellow\r\n                    }\r\n                } else {\r\n                    Write-Host \"[BeforeAll-Templates] Skipping $moduleName (not available)\" -ForegroundColor Gray\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"\\.SYNOPSIS\"\r\n                $template | Should -Match \"Test function\"\r\n                $template | Should -Match \"\\.PARAMETER Param1\"\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"Args:\"\r\n                $template | Should -Match \"Returns:\"\r\n                $template | Should -Match \"param1\"\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"<summary>\"\r\n                $template | Should -Match \"Test method summary\"\r\n                $template | Should -Match '<param name=\"param1\">'\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                $template | Should -Not -BeNullOrEmpty\r\n                $template | Should -Match \"/\\*\\*\"\r\n                $template | Should -Match \"@param\"\r\n                $template | Should -Match \"@returns\"\r\n                $template | Should -Match \"\\*/\"\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 639,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": null,
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should initialize documentation triggers",
            "Path": "Enhanced Documentation System - Templates & Automation Automation Triggers Should initialize documentation triggers",
            "Data": null,
            "ExpandedName": "Should initialize documentation triggers",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should initialize documentation triggers",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Automation Triggers",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 718,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should log trigger activity",
            "Path": "Enhanced Documentation System - Templates & Automation Automation Triggers Should log trigger activity",
            "Data": null,
            "ExpandedName": "Should log trigger activity",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should log trigger activity",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Automation Triggers",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 723,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": false,
        "Last": true,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }",
            "Type": 19,
            "Start": 36099,
            "Length": 968,
            "StartLine": 716,
            "StartColumn": 39,
            "EndLine": 737,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "df14d535-23b7-48f4-bdf3-0b1419915eef",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }",
            "Parent": "{\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $result = Initialize-DocumentationTriggers\r\n                $result | Should -Be $true\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                $logEntry = @{\r\n                    Timestamp = Get-Date\r\n                    Trigger = 'Manual'\r\n                    FilePath = 'test.ps1'\r\n                    Language = 'PowerShell'\r\n                    ChangeType = 'Created'\r\n                }\r\n                \r\n                Add-TriggerActivity -LogEntry $logEntry\r\n                $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                $activities | Should -Not -BeNullOrEmpty\r\n                $activities[0].Trigger | Should -Be 'Manual'\r\n            }\r\n        }"
          }
        },
        "StartLine": 716,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 2,
        "OwnPassedCount": 0,
        "OwnFailedCount": 2,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": false,
      "Last": true,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 723,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should meet cache performance benchmarks",
      "Path": [
        "Enhanced Documentation System - Performance",
        "Cache Performance",
        "Should meet cache performance benchmarks"
      ],
      "Data": null,
      "ExpandedName": "Should meet cache performance benchmarks",
      "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should meet cache performance benchmarks",
      "Result": "Failed",
      "ErrorRecord": [
        {
          "Exception": {
            "ErrorRecord": "The term 'New-PerformanceCache' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.",
            "CommandName": "New-PerformanceCache",
            "WasThrownFromThrowStatement": false,
            "TargetSite": "Void CheckActionPreference(System.Management.Automation.Language.FunctionContext, System.Exception)",
            "Message": "The term 'New-PerformanceCache' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": "System.Management.Automation",
            "HResult": -2146233087,
            "StackTrace": "   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)"
          },
          "TargetObject": "New-PerformanceCache",
          "CategoryInfo": {
            "Category": 13,
            "Activity": "",
            "Reason": "CommandNotFoundException",
            "TargetName": "New-PerformanceCache",
            "TargetType": "String"
          },
          "FullyQualifiedErrorId": "CommandNotFoundException",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 789,
            "OffsetInLine": 26,
            "HistoryId": 1,
            "ScriptName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Line": "                $cache = New-PerformanceCache -MaxSize 1000\r\n",
            "Statement": "New-PerformanceCache",
            "PositionMessage": "At C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1:789 char:26\r\n+                 $cache = New-PerformanceCache -MaxSize 1000\r\n+                          ~~~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "PSCommandPath": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "InvocationName": "New-PerformanceCache",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 789\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2157\r\nat Invoke-TestItem, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1199\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 835\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60",
          "PipelineIterationInfo": []
        }
      ],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 632716,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 63,
        "Microseconds": 271,
        "Nanoseconds": 600,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 7.323101851851852E-07,
        "TotalHours": 1.7575444444444443E-05,
        "TotalMilliseconds": 63.2716,
        "TotalMicroseconds": 63271.6,
        "TotalNanoseconds": 63271600.0,
        "TotalMinutes": 0.0010545266666666666,
        "TotalSeconds": 0.0632716
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }",
          "Type": 19,
          "Start": 39944,
          "Length": 841,
          "StartLine": 788,
          "StartColumn": 122,
          "EndLine": 808,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "8a3da7a6-d704-4623-97cb-ef3eb93f03ce",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "$cache = New-PerformanceCache -MaxSize 1000 $operations = 100 $stopwatch = [System.Diagnostics.Stopwatch]::StartNew() 1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                } 1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                } $stopwatch.Stop() $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2) $avgTimePerOp | Should -BeLessThan 1.0",
            "Traps": null,
            "Extent": "$cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0",
            "Parent": "{\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 788,
            "StartColumnNumber": 122,
            "EndLineNumber": 808,
            "EndColumnNumber": 14,
            "Text": "{\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }",
            "StartOffset": 39944,
            "EndOffset": 40785
          },
          "Parent": {
            "ScriptBlock": "{\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }",
            "Parent": "It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Cache Performance",
        "Path": [
          "Enhanced Documentation System - Performance",
          "Cache Performance"
        ],
        "Data": null,
        "ExpandedName": "Cache Performance",
        "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should meet cache performance benchmarks",
            "Path": "Enhanced Documentation System - Performance Cache Performance Should meet cache performance benchmarks",
            "Data": null,
            "ExpandedName": "Should meet cache performance benchmarks",
            "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should meet cache performance benchmarks",
            "Result": "Failed",
            "ErrorRecord": "The term 'New-PerformanceCache' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.",
            "StandardOutput": null,
            "Duration": "00:00:00.0632716",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Cache Performance",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 788,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:19.0041457-04:00",
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00.0386125",
            "FrameworkDuration": "00:00:00.0246591",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle cache warming efficiently",
            "Path": "Enhanced Documentation System - Performance Cache Performance Should handle cache warming efficiently",
            "Data": null,
            "ExpandedName": "Should handle cache warming efficiently",
            "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should handle cache warming efficiently",
            "Result": "Failed",
            "ErrorRecord": "The term 'New-PerformanceCache' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.",
            "StandardOutput": null,
            "Duration": "00:00:00.0203022",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Cache Performance",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 810,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:19.0668925-04:00",
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00.0152516",
            "FrameworkDuration": "00:00:00.0050506",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 2,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 2,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 928866,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 92,
          "Microseconds": 886,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.0750763888888889E-06,
          "TotalHours": 2.5801833333333334E-05,
          "TotalMilliseconds": 92.8866,
          "TotalMicroseconds": 92886.6,
          "TotalNanoseconds": 92886600.0,
          "TotalMinutes": 0.00154811,
          "TotalSeconds": 0.0928866
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:12:03.5268689-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:12:03.5268689Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 43374678,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 337,
            "Microseconds": 467,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.020217361111111E-05,
            "TotalHours": 0.0012048521666666668,
            "TotalMilliseconds": 4337.4678,
            "TotalMicroseconds": 4337467.8,
            "TotalNanoseconds": 4337467800.0,
            "TotalMinutes": 0.07229113,
            "TotalSeconds": 4.3374678
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_ae38e9fc-4db5-4172-8954-fe64e3e59e6d",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0c91d161-b6ae-41fa-9bfa-b03991a212ce",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1206408,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 120,
            "Microseconds": 640,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3963055555555556E-06,
            "TotalHours": 3.351133333333333E-05,
            "TotalMilliseconds": 120.6408,
            "TotalMicroseconds": 120640.8,
            "TotalNanoseconds": 120640800.0,
            "TotalMinutes": 0.00201068,
            "TotalSeconds": 0.1206408
          },
          "FrameworkDuration": {
            "Ticks": 2967369,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 296,
            "Microseconds": 736,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.434454861111111E-06,
            "TotalHours": 8.242691666666667E-05,
            "TotalMilliseconds": 296.7369,
            "TotalMicroseconds": 296736.9,
            "TotalNanoseconds": 296736900.0,
            "TotalMinutes": 0.004945615,
            "TotalSeconds": 0.2967369
          },
          "UserDuration": {
            "Ticks": 39200901,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 920,
            "Microseconds": 90,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 3,
            "TotalDays": 4.537141319444444E-05,
            "TotalHours": 0.0010889139166666666,
            "TotalMilliseconds": 3920.0901,
            "TotalMicroseconds": 3920090.1,
            "TotalNanoseconds": 3920090100.0,
            "TotalMinutes": 0.065334835,
            "TotalSeconds": 3.9200901
          },
          "OwnDuration": {
            "Ticks": -41456899,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -145,
            "Microseconds": -689,
            "Nanoseconds": -900,
            "Minutes": 0,
            "Seconds": -4,
            "TotalDays": -4.798252199074074E-05,
            "TotalHours": -0.0011515805277777778,
            "TotalMilliseconds": -4145.6899,
            "TotalMicroseconds": -4145689.9,
            "TotalNanoseconds": -4145689900.0,
            "TotalMinutes": -0.06909483166666666,
            "TotalSeconds": -4.1456899
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b503736c-5fd8-428d-abbc-2f1c83333ee5",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - Performance",
          "Path": [
            "Enhanced Documentation System - Performance"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance",
          "Blocks": [
            "[-] Cache Performance",
            "[+] File Processing Performance",
            "[-] Parallel Processing Performance"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 40598124,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 59,
            "Microseconds": 812,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.698856944444444E-05,
            "TotalHours": 0.0011277256666666667,
            "TotalMilliseconds": 4059.8124,
            "TotalMicroseconds": 4059812.4,
            "TotalNanoseconds": 4059812400.0,
            "TotalMinutes": 0.06766354,
            "TotalSeconds": 4.0598124
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "Performance",
            "Benchmarking"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "120f1e94-37b9-401f-a6b1-e1144948511e",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "f316d180-a7d1-4ee5-ad5e-f11708627fb8",
            "Ast": "{\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }"
          },
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Cache Performance",
            "[+] File Processing Performance",
            "[-] Parallel Processing Performance"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:18.9458204-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 1431616,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 143,
            "Microseconds": 161,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.656962962962963E-06,
            "TotalHours": 3.976711111111111E-05,
            "TotalMilliseconds": 143.1616,
            "TotalMicroseconds": 143161.6,
            "TotalNanoseconds": 143161600.0,
            "TotalMinutes": 0.0023860266666666666,
            "TotalSeconds": 0.1431616
          },
          "UserDuration": {
            "Ticks": 39166508,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 916,
            "Microseconds": 650,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 3,
            "TotalDays": 4.533160648148148E-05,
            "TotalHours": 0.0010879585555555555,
            "TotalMilliseconds": 3916.6508,
            "TotalMicroseconds": 3916650.8,
            "TotalNanoseconds": 3916650800.0,
            "TotalMinutes": 0.06527751333333333,
            "TotalSeconds": 3.9166508
          },
          "OwnDuration": {
            "Ticks": 19589221,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 958,
            "Microseconds": 922,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 1,
            "TotalDays": 2.267270949074074E-05,
            "TotalHours": 0.0005441450277777778,
            "TotalMilliseconds": 1958.9221,
            "TotalMicroseconds": 1958922.1,
            "TotalNanoseconds": 1958922100.0,
            "TotalMinutes": 0.03264870166666667,
            "TotalSeconds": 1.9589221
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "6f6776ec-d86d-4648-974c-526dc162aeb7",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 744,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": null,
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should meet cache performance benchmarks",
            "Path": "Enhanced Documentation System - Performance Cache Performance Should meet cache performance benchmarks",
            "Data": null,
            "ExpandedName": "Should meet cache performance benchmarks",
            "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should meet cache performance benchmarks",
            "Result": "Failed",
            "ErrorRecord": "The term 'New-PerformanceCache' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.",
            "StandardOutput": null,
            "Duration": "00:00:00.0632716",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Cache Performance",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 788,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:19.0041457-04:00",
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00.0386125",
            "FrameworkDuration": "00:00:00.0246591",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle cache warming efficiently",
            "Path": "Enhanced Documentation System - Performance Cache Performance Should handle cache warming efficiently",
            "Data": null,
            "ExpandedName": "Should handle cache warming efficiently",
            "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should handle cache warming efficiently",
            "Result": "Failed",
            "ErrorRecord": "The term 'New-PerformanceCache' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.",
            "StandardOutput": null,
            "Duration": "00:00:00.0203022",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Cache Performance",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 810,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:19.0668925-04:00",
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00.0152516",
            "FrameworkDuration": "00:00:00.0050506",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": true,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": true,
        "ExecutedAt": "2025-08-28T21:12:18.9990364-04:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 387475,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 38,
          "Microseconds": 747,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.484664351851852E-07,
          "TotalHours": 1.0763194444444444E-05,
          "TotalMilliseconds": 38.7475,
          "TotalMicroseconds": 38747.5,
          "TotalNanoseconds": 38747500.0,
          "TotalMinutes": 0.0006457916666666667,
          "TotalSeconds": 0.0387475
        },
        "UserDuration": {
          "Ticks": 541391,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 54,
          "Microseconds": 139,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.266099537037037E-07,
          "TotalHours": 1.5038638888888888E-05,
          "TotalMilliseconds": 54.1391,
          "TotalMicroseconds": 54139.1,
          "TotalNanoseconds": 54139100.0,
          "TotalMinutes": 0.0009023183333333333,
          "TotalSeconds": 0.0541391
        },
        "OwnDuration": {
          "Ticks": 93128,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 9,
          "Microseconds": 312,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.0778703703703703E-07,
          "TotalHours": 2.5868888888888888E-06,
          "TotalMilliseconds": 9.3128,
          "TotalMicroseconds": 9312.8,
          "TotalNanoseconds": 9312800.0,
          "TotalMinutes": 0.00015521333333333334,
          "TotalSeconds": 0.0093128
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }",
            "Type": 19,
            "Start": 39806,
            "Length": 1766,
            "StartLine": 786,
            "StartColumn": 37,
            "EndLine": 822,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "680d5692-16b1-473f-9910-b69c7ac1bc63",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }",
            "Parent": "{\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }"
          }
        },
        "StartLine": 786,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": true,
        "OwnTotalCount": 2,
        "OwnPassedCount": 0,
        "OwnFailedCount": 2,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": true,
      "Last": false,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 788,
      "Executed": true,
      "ExecutedAt": "2025-08-28T21:12:19.0041457-04:00",
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 386125,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 38,
        "Microseconds": 612,
        "Nanoseconds": 500,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 4.4690393518518516E-07,
        "TotalHours": 1.0725694444444445E-05,
        "TotalMilliseconds": 38.6125,
        "TotalMicroseconds": 38612.5,
        "TotalNanoseconds": 38612500.0,
        "TotalMinutes": 0.0006435416666666667,
        "TotalSeconds": 0.0386125
      },
      "FrameworkDuration": {
        "Ticks": 246591,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 24,
        "Microseconds": 659,
        "Nanoseconds": 100,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 2.8540625E-07,
        "TotalHours": 6.84975E-06,
        "TotalMilliseconds": 24.6591,
        "TotalMicroseconds": 24659.1,
        "TotalNanoseconds": 24659100.0,
        "TotalMinutes": 0.000410985,
        "TotalSeconds": 0.0246591
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should handle cache warming efficiently",
      "Path": [
        "Enhanced Documentation System - Performance",
        "Cache Performance",
        "Should handle cache warming efficiently"
      ],
      "Data": null,
      "ExpandedName": "Should handle cache warming efficiently",
      "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should handle cache warming efficiently",
      "Result": "Failed",
      "ErrorRecord": [
        {
          "Exception": {
            "ErrorRecord": "The term 'New-PerformanceCache' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.",
            "CommandName": "New-PerformanceCache",
            "WasThrownFromThrowStatement": false,
            "TargetSite": "Void CheckActionPreference(System.Management.Automation.Language.FunctionContext, System.Exception)",
            "Message": "The term 'New-PerformanceCache' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": "System.Management.Automation",
            "HResult": -2146233087,
            "StackTrace": "   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)"
          },
          "TargetObject": "New-PerformanceCache",
          "CategoryInfo": {
            "Category": 13,
            "Activity": "",
            "Reason": "CommandNotFoundException",
            "TargetName": "New-PerformanceCache",
            "TargetType": "String"
          },
          "FullyQualifiedErrorId": "CommandNotFoundException",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 811,
            "OffsetInLine": 26,
            "HistoryId": 1,
            "ScriptName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Line": "                $cache = New-PerformanceCache -MaxSize 500\r\n",
            "Statement": "New-PerformanceCache",
            "PositionMessage": "At C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1:811 char:26\r\n+                 $cache = New-PerformanceCache -MaxSize 500\r\n+                          ~~~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "PSCommandPath": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "InvocationName": "New-PerformanceCache",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 811\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2157\r\nat Invoke-TestItem, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1199\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 835\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60",
          "PipelineIterationInfo": []
        }
      ],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 203022,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 20,
        "Microseconds": 302,
        "Nanoseconds": 200,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 2.3497916666666667E-07,
        "TotalHours": 5.6395E-06,
        "TotalMilliseconds": 20.3022,
        "TotalMicroseconds": 20302.2,
        "TotalNanoseconds": 20302200.0,
        "TotalMinutes": 0.00033837,
        "TotalSeconds": 0.0203022
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }",
          "Type": 19,
          "Start": 40921,
          "Length": 640,
          "StartLine": 810,
          "StartColumn": 121,
          "EndLine": 821,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "4f33f43a-93d3-4472-a301-821f231a944b",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "$cache = New-PerformanceCache -MaxSize 500 $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } } $stopwatch = [System.Diagnostics.Stopwatch]::StartNew() Start-CacheWarming -Cache $cache -Data $warmingData $stopwatch.Stop() $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100 Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100",
            "Traps": null,
            "Extent": "$cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100",
            "Parent": "{\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 810,
            "StartColumnNumber": 121,
            "EndLineNumber": 821,
            "EndColumnNumber": 14,
            "Text": "{\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }",
            "StartOffset": 40921,
            "EndOffset": 41561
          },
          "Parent": {
            "ScriptBlock": "{\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }",
            "Parent": "It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Cache Performance",
        "Path": [
          "Enhanced Documentation System - Performance",
          "Cache Performance"
        ],
        "Data": null,
        "ExpandedName": "Cache Performance",
        "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should meet cache performance benchmarks",
            "Path": "Enhanced Documentation System - Performance Cache Performance Should meet cache performance benchmarks",
            "Data": null,
            "ExpandedName": "Should meet cache performance benchmarks",
            "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should meet cache performance benchmarks",
            "Result": "Failed",
            "ErrorRecord": "The term 'New-PerformanceCache' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.",
            "StandardOutput": null,
            "Duration": "00:00:00.0632716",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Cache Performance",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 788,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:19.0041457-04:00",
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00.0386125",
            "FrameworkDuration": "00:00:00.0246591",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle cache warming efficiently",
            "Path": "Enhanced Documentation System - Performance Cache Performance Should handle cache warming efficiently",
            "Data": null,
            "ExpandedName": "Should handle cache warming efficiently",
            "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should handle cache warming efficiently",
            "Result": "Failed",
            "ErrorRecord": "The term 'New-PerformanceCache' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.",
            "StandardOutput": null,
            "Duration": "00:00:00.0203022",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Cache Performance",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 810,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:19.0668925-04:00",
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00.0152516",
            "FrameworkDuration": "00:00:00.0050506",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 2,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 2,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 928866,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 92,
          "Microseconds": 886,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.0750763888888889E-06,
          "TotalHours": 2.5801833333333334E-05,
          "TotalMilliseconds": 92.8866,
          "TotalMicroseconds": 92886.6,
          "TotalNanoseconds": 92886600.0,
          "TotalMinutes": 0.00154811,
          "TotalSeconds": 0.0928866
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:12:03.5268689-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:12:03.5268689Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 43374678,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 337,
            "Microseconds": 467,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.020217361111111E-05,
            "TotalHours": 0.0012048521666666668,
            "TotalMilliseconds": 4337.4678,
            "TotalMicroseconds": 4337467.8,
            "TotalNanoseconds": 4337467800.0,
            "TotalMinutes": 0.07229113,
            "TotalSeconds": 4.3374678
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_ae38e9fc-4db5-4172-8954-fe64e3e59e6d",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0c91d161-b6ae-41fa-9bfa-b03991a212ce",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1206408,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 120,
            "Microseconds": 640,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3963055555555556E-06,
            "TotalHours": 3.351133333333333E-05,
            "TotalMilliseconds": 120.6408,
            "TotalMicroseconds": 120640.8,
            "TotalNanoseconds": 120640800.0,
            "TotalMinutes": 0.00201068,
            "TotalSeconds": 0.1206408
          },
          "FrameworkDuration": {
            "Ticks": 2967369,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 296,
            "Microseconds": 736,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.434454861111111E-06,
            "TotalHours": 8.242691666666667E-05,
            "TotalMilliseconds": 296.7369,
            "TotalMicroseconds": 296736.9,
            "TotalNanoseconds": 296736900.0,
            "TotalMinutes": 0.004945615,
            "TotalSeconds": 0.2967369
          },
          "UserDuration": {
            "Ticks": 39200901,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 920,
            "Microseconds": 90,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 3,
            "TotalDays": 4.537141319444444E-05,
            "TotalHours": 0.0010889139166666666,
            "TotalMilliseconds": 3920.0901,
            "TotalMicroseconds": 3920090.1,
            "TotalNanoseconds": 3920090100.0,
            "TotalMinutes": 0.065334835,
            "TotalSeconds": 3.9200901
          },
          "OwnDuration": {
            "Ticks": -41456899,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -145,
            "Microseconds": -689,
            "Nanoseconds": -900,
            "Minutes": 0,
            "Seconds": -4,
            "TotalDays": -4.798252199074074E-05,
            "TotalHours": -0.0011515805277777778,
            "TotalMilliseconds": -4145.6899,
            "TotalMicroseconds": -4145689.9,
            "TotalNanoseconds": -4145689900.0,
            "TotalMinutes": -0.06909483166666666,
            "TotalSeconds": -4.1456899
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b503736c-5fd8-428d-abbc-2f1c83333ee5",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - Performance",
          "Path": [
            "Enhanced Documentation System - Performance"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance",
          "Blocks": [
            "[-] Cache Performance",
            "[+] File Processing Performance",
            "[-] Parallel Processing Performance"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 40598124,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 59,
            "Microseconds": 812,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.698856944444444E-05,
            "TotalHours": 0.0011277256666666667,
            "TotalMilliseconds": 4059.8124,
            "TotalMicroseconds": 4059812.4,
            "TotalNanoseconds": 4059812400.0,
            "TotalMinutes": 0.06766354,
            "TotalSeconds": 4.0598124
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "Performance",
            "Benchmarking"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "120f1e94-37b9-401f-a6b1-e1144948511e",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "f316d180-a7d1-4ee5-ad5e-f11708627fb8",
            "Ast": "{\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }"
          },
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Cache Performance",
            "[+] File Processing Performance",
            "[-] Parallel Processing Performance"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:18.9458204-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 1431616,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 143,
            "Microseconds": 161,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.656962962962963E-06,
            "TotalHours": 3.976711111111111E-05,
            "TotalMilliseconds": 143.1616,
            "TotalMicroseconds": 143161.6,
            "TotalNanoseconds": 143161600.0,
            "TotalMinutes": 0.0023860266666666666,
            "TotalSeconds": 0.1431616
          },
          "UserDuration": {
            "Ticks": 39166508,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 916,
            "Microseconds": 650,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 3,
            "TotalDays": 4.533160648148148E-05,
            "TotalHours": 0.0010879585555555555,
            "TotalMilliseconds": 3916.6508,
            "TotalMicroseconds": 3916650.8,
            "TotalNanoseconds": 3916650800.0,
            "TotalMinutes": 0.06527751333333333,
            "TotalSeconds": 3.9166508
          },
          "OwnDuration": {
            "Ticks": 19589221,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 958,
            "Microseconds": 922,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 1,
            "TotalDays": 2.267270949074074E-05,
            "TotalHours": 0.0005441450277777778,
            "TotalMilliseconds": 1958.9221,
            "TotalMicroseconds": 1958922.1,
            "TotalNanoseconds": 1958922100.0,
            "TotalMinutes": 0.03264870166666667,
            "TotalSeconds": 1.9589221
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "6f6776ec-d86d-4648-974c-526dc162aeb7",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 744,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": null,
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should meet cache performance benchmarks",
            "Path": "Enhanced Documentation System - Performance Cache Performance Should meet cache performance benchmarks",
            "Data": null,
            "ExpandedName": "Should meet cache performance benchmarks",
            "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should meet cache performance benchmarks",
            "Result": "Failed",
            "ErrorRecord": "The term 'New-PerformanceCache' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.",
            "StandardOutput": null,
            "Duration": "00:00:00.0632716",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Cache Performance",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 788,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:19.0041457-04:00",
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00.0386125",
            "FrameworkDuration": "00:00:00.0246591",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle cache warming efficiently",
            "Path": "Enhanced Documentation System - Performance Cache Performance Should handle cache warming efficiently",
            "Data": null,
            "ExpandedName": "Should handle cache warming efficiently",
            "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should handle cache warming efficiently",
            "Result": "Failed",
            "ErrorRecord": "The term 'New-PerformanceCache' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.",
            "StandardOutput": null,
            "Duration": "00:00:00.0203022",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Cache Performance",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 810,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:19.0668925-04:00",
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00.0152516",
            "FrameworkDuration": "00:00:00.0050506",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": true,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": true,
        "ExecutedAt": "2025-08-28T21:12:18.9990364-04:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 387475,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 38,
          "Microseconds": 747,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.484664351851852E-07,
          "TotalHours": 1.0763194444444444E-05,
          "TotalMilliseconds": 38.7475,
          "TotalMicroseconds": 38747.5,
          "TotalNanoseconds": 38747500.0,
          "TotalMinutes": 0.0006457916666666667,
          "TotalSeconds": 0.0387475
        },
        "UserDuration": {
          "Ticks": 541391,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 54,
          "Microseconds": 139,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.266099537037037E-07,
          "TotalHours": 1.5038638888888888E-05,
          "TotalMilliseconds": 54.1391,
          "TotalMicroseconds": 54139.1,
          "TotalNanoseconds": 54139100.0,
          "TotalMinutes": 0.0009023183333333333,
          "TotalSeconds": 0.0541391
        },
        "OwnDuration": {
          "Ticks": 93128,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 9,
          "Microseconds": 312,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.0778703703703703E-07,
          "TotalHours": 2.5868888888888888E-06,
          "TotalMilliseconds": 9.3128,
          "TotalMicroseconds": 9312.8,
          "TotalNanoseconds": 9312800.0,
          "TotalMinutes": 0.00015521333333333334,
          "TotalSeconds": 0.0093128
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }",
            "Type": 19,
            "Start": 39806,
            "Length": 1766,
            "StartLine": 786,
            "StartColumn": 37,
            "EndLine": 822,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "680d5692-16b1-473f-9910-b69c7ac1bc63",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }",
            "Parent": "{\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }"
          }
        },
        "StartLine": 786,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": true,
        "OwnTotalCount": 2,
        "OwnPassedCount": 0,
        "OwnFailedCount": 2,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": false,
      "Last": true,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 810,
      "Executed": true,
      "ExecutedAt": "2025-08-28T21:12:19.0668925-04:00",
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 152516,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 15,
        "Microseconds": 251,
        "Nanoseconds": 600,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 1.7652314814814816E-07,
        "TotalHours": 4.236555555555555E-06,
        "TotalMilliseconds": 15.2516,
        "TotalMicroseconds": 15251.6,
        "TotalNanoseconds": 15251600.0,
        "TotalMinutes": 0.0002541933333333333,
        "TotalSeconds": 0.0152516
      },
      "FrameworkDuration": {
        "Ticks": 50506,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 5,
        "Microseconds": 50,
        "Nanoseconds": 600,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 5.845601851851852E-08,
        "TotalHours": 1.4029444444444443E-06,
        "TotalMilliseconds": 5.0506,
        "TotalMicroseconds": 5050.6,
        "TotalNanoseconds": 5050600.0,
        "TotalMinutes": 8.417666666666667E-05,
        "TotalSeconds": 0.0050506
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should demonstrate parallel processing benefits",
      "Path": [
        "Enhanced Documentation System - Performance",
        "Parallel Processing Performance",
        "Should demonstrate parallel processing benefits"
      ],
      "Data": null,
      "ExpandedName": "Should demonstrate parallel processing benefits",
      "ExpandedPath": "Enhanced Documentation System - Performance.Parallel Processing Performance.Should demonstrate parallel processing benefits",
      "Result": "Failed",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected the actual value to be less than 404.4512, but got 719.7523.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected the actual value to be less than 404.4512, but got 719.7523.",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Line": "929",
            "LineText": "                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)",
            "Terminating": true,
            "ShouldResult": "Pester.ShouldResult"
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8250,
            "OffsetInLine": 13,
            "HistoryId": 1,
            "ScriptName": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1:8250 char:13\r\n+             throw $errorRecord\r\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1",
            "PSCommandPath": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 8250\r\nat Should<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 8193\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 929\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2157\r\nat Invoke-TestItem, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1199\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 835\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60",
          "PipelineIterationInfo": []
        }
      ],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 15648034,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 564,
        "Microseconds": 803,
        "Nanoseconds": 400,
        "Minutes": 0,
        "Seconds": 1,
        "TotalDays": 1.8111150462962964E-05,
        "TotalHours": 0.0004346676111111111,
        "TotalMilliseconds": 1564.8034,
        "TotalMicroseconds": 1564803.4,
        "TotalNanoseconds": 1564803400.0,
        "TotalMinutes": 0.026080056666666667,
        "TotalSeconds": 1.5648034
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }",
          "Type": 19,
          "Start": 45589,
          "Length": 1070,
          "StartLine": 910,
          "StartColumn": 130,
          "EndLine": 930,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "e36acadb-c8c7-4ea3-ae89-1220fa9a62ce",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "$sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                } $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                } Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)",
            "Traps": null,
            "Extent": "$sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)",
            "Parent": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 910,
            "StartColumnNumber": 130,
            "EndLineNumber": 930,
            "EndColumnNumber": 14,
            "Text": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }",
            "StartOffset": 45589,
            "EndOffset": 46659
          },
          "Parent": {
            "ScriptBlock": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }",
            "Parent": "It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Parallel Processing Performance",
        "Path": [
          "Enhanced Documentation System - Performance",
          "Parallel Processing Performance"
        ],
        "Data": null,
        "ExpandedName": "Parallel Processing Performance",
        "ExpandedPath": "Enhanced Documentation System - Performance.Parallel Processing Performance",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should demonstrate parallel processing benefits",
            "Path": "Enhanced Documentation System - Performance Parallel Processing Performance Should demonstrate parallel processing benefits",
            "Data": null,
            "ExpandedName": "Should demonstrate parallel processing benefits",
            "ExpandedPath": "Enhanced Documentation System - Performance.Parallel Processing Performance.Should demonstrate parallel processing benefits",
            "Result": "Failed",
            "ErrorRecord": "Expected the actual value to be less than 404.4512, but got 719.7523.",
            "StandardOutput": null,
            "Duration": "00:00:01.5648034",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Parallel Processing Performance",
            "First": true,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 910,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:19.2188885-04:00",
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:01.5509523",
            "FrameworkDuration": "00:00:00.0138511",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 1,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 1,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 17899799,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 789,
          "Microseconds": 979,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 1,
          "TotalDays": 2.0717359953703703E-05,
          "TotalHours": 0.0004972166388888889,
          "TotalMilliseconds": 1789.9799,
          "TotalMicroseconds": 1789979.9,
          "TotalNanoseconds": 1789979900.0,
          "TotalMinutes": 0.029832998333333333,
          "TotalSeconds": 1.7899799
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 46988,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T21:11:26.8587688-04:00",
            "CreationTimeUtc": "2025-08-29T01:11:26.8587688Z",
            "LastAccessTime": "2025-08-28T21:12:03.5268689-04:00",
            "LastAccessTimeUtc": "2025-08-29T01:12:03.5268689Z",
            "LastWriteTime": "2025-08-28T21:11:26.8597645-04:00",
            "LastWriteTimeUtc": "2025-08-29T01:11:26.8597645Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 26,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 43374678,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 337,
            "Microseconds": 467,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.020217361111111E-05,
            "TotalHours": 0.0012048521666666668,
            "TotalMilliseconds": 4337.4678,
            "TotalMicroseconds": 4337467.8,
            "TotalNanoseconds": 4337467800.0,
            "TotalMinutes": 0.07229113,
            "TotalSeconds": 4.3374678
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_ae38e9fc-4db5-4172-8954-fe64e3e59e6d",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0c91d161-b6ae-41fa-9bfa-b03991a212ce",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1206408,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 120,
            "Microseconds": 640,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3963055555555556E-06,
            "TotalHours": 3.351133333333333E-05,
            "TotalMilliseconds": 120.6408,
            "TotalMicroseconds": 120640.8,
            "TotalNanoseconds": 120640800.0,
            "TotalMinutes": 0.00201068,
            "TotalSeconds": 0.1206408
          },
          "FrameworkDuration": {
            "Ticks": 2967369,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 296,
            "Microseconds": 736,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.434454861111111E-06,
            "TotalHours": 8.242691666666667E-05,
            "TotalMilliseconds": 296.7369,
            "TotalMicroseconds": 296736.9,
            "TotalNanoseconds": 296736900.0,
            "TotalMinutes": 0.004945615,
            "TotalSeconds": 0.2967369
          },
          "UserDuration": {
            "Ticks": 39200901,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 920,
            "Microseconds": 90,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 3,
            "TotalDays": 4.537141319444444E-05,
            "TotalHours": 0.0010889139166666666,
            "TotalMilliseconds": 3920.0901,
            "TotalMicroseconds": 3920090.1,
            "TotalNanoseconds": 3920090100.0,
            "TotalMinutes": 0.065334835,
            "TotalSeconds": 3.9200901
          },
          "OwnDuration": {
            "Ticks": -41456899,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -145,
            "Microseconds": -689,
            "Nanoseconds": -900,
            "Minutes": 0,
            "Seconds": -4,
            "TotalDays": -4.798252199074074E-05,
            "TotalHours": -0.0011515805277777778,
            "TotalMilliseconds": -4145.6899,
            "TotalMicroseconds": -4145689.9,
            "TotalNanoseconds": -4145689900.0,
            "TotalMinutes": -0.06909483166666666,
            "TotalSeconds": -4.1456899
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b503736c-5fd8-428d-abbc-2f1c83333ee5",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "Mock": "System.Collections.Hashtable",
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - Performance",
          "Path": [
            "Enhanced Documentation System - Performance"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance",
          "Blocks": [
            "[-] Cache Performance",
            "[+] File Processing Performance",
            "[-] Parallel Processing Performance"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 40598124,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 59,
            "Microseconds": 812,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.698856944444444E-05,
            "TotalHours": 0.0011277256666666667,
            "TotalMilliseconds": 4059.8124,
            "TotalMicroseconds": 4059812.4,
            "TotalNanoseconds": 4059812400.0,
            "TotalMinutes": 0.06766354,
            "TotalSeconds": 4.0598124
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "Performance",
            "Benchmarking"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 26,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.3374678",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:16.6761405-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1206408",
            "FrameworkDuration": "00:00:00.2967369",
            "UserDuration": "00:00:03.9200901",
            "OwnDuration": "-00:00:04.1456899",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "120f1e94-37b9-401f-a6b1-e1144948511e",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "f316d180-a7d1-4ee5-ad5e-f11708627fb8",
            "Ast": "{\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }"
          },
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Cache Performance",
            "[+] File Processing Performance",
            "[-] Parallel Processing Performance"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T21:12:18.9458204-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 1431616,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 143,
            "Microseconds": 161,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.656962962962963E-06,
            "TotalHours": 3.976711111111111E-05,
            "TotalMilliseconds": 143.1616,
            "TotalMicroseconds": 143161.6,
            "TotalNanoseconds": 143161600.0,
            "TotalMinutes": 0.0023860266666666666,
            "TotalSeconds": 0.1431616
          },
          "UserDuration": {
            "Ticks": 39166508,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 916,
            "Microseconds": 650,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 3,
            "TotalDays": 4.533160648148148E-05,
            "TotalHours": 0.0010879585555555555,
            "TotalMilliseconds": 3916.6508,
            "TotalMicroseconds": 3916650.8,
            "TotalNanoseconds": 3916650800.0,
            "TotalMinutes": 0.06527751333333333,
            "TotalSeconds": 3.9166508
          },
          "OwnDuration": {
            "Ticks": 19589221,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 958,
            "Microseconds": 922,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 1,
            "TotalDays": 2.267270949074074E-05,
            "TotalHours": 0.0005441450277777778,
            "TotalMilliseconds": 1958.9221,
            "TotalMicroseconds": 1958922.1,
            "TotalNanoseconds": 1958922100.0,
            "TotalMinutes": 0.03264870166666667,
            "TotalSeconds": 1.9589221
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "6f6776ec-d86d-4648-974c-526dc162aeb7",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 744,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": null,
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should demonstrate parallel processing benefits",
            "Path": "Enhanced Documentation System - Performance Parallel Processing Performance Should demonstrate parallel processing benefits",
            "Data": null,
            "ExpandedName": "Should demonstrate parallel processing benefits",
            "ExpandedPath": "Enhanced Documentation System - Performance.Parallel Processing Performance.Should demonstrate parallel processing benefits",
            "Result": "Failed",
            "ErrorRecord": "Expected the actual value to be less than 404.4512, but got 719.7523.",
            "StandardOutput": null,
            "Duration": "00:00:01.5648034",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Parallel Processing Performance",
            "First": true,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 910,
            "Executed": true,
            "ExecutedAt": "2025-08-28T21:12:19.2188885-04:00",
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:01.5509523",
            "FrameworkDuration": "00:00:00.0138511",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": false,
        "Last": true,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": true,
        "ExecutedAt": "2025-08-28T21:12:19.217064-04:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 673140,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 67,
          "Microseconds": 314,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 7.790972222222222E-07,
          "TotalHours": 1.8698333333333334E-05,
          "TotalMilliseconds": 67.314,
          "TotalMicroseconds": 67314.0,
          "TotalNanoseconds": 67314000.0,
          "TotalMinutes": 0.0011219,
          "TotalSeconds": 0.067314
        },
        "UserDuration": {
          "Ticks": 17226659,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 722,
          "Microseconds": 665,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 1,
          "TotalDays": 1.9938262731481483E-05,
          "TotalHours": 0.00047851830555555556,
          "TotalMilliseconds": 1722.6659,
          "TotalMicroseconds": 1722665.9,
          "TotalNanoseconds": 1722665900.0,
          "TotalMinutes": 0.028711098333333334,
          "TotalSeconds": 1.7226659
        },
        "OwnDuration": {
          "Ticks": 2251765,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 225,
          "Microseconds": 176,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.606209490740741E-06,
          "TotalHours": 6.254902777777777E-05,
          "TotalMilliseconds": 225.1765,
          "TotalMicroseconds": 225176.5,
          "TotalNanoseconds": 225176500.0,
          "TotalMinutes": 0.003752941666666667,
          "TotalSeconds": 0.2251765
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }",
            "Type": 19,
            "Start": 45443,
            "Length": 1227,
            "StartLine": 908,
            "StartColumn": 51,
            "EndLine": 931,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "832d3e93-1055-49b0-b9a9-38481e82c6ab",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }",
            "Parent": "{\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }"
          }
        },
        "StartLine": 908,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": true,
        "OwnTotalCount": 1,
        "OwnPassedCount": 0,
        "OwnFailedCount": 1,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": true,
      "Last": true,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 910,
      "Executed": true,
      "ExecutedAt": "2025-08-28T21:12:19.2188885-04:00",
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 15509523,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 550,
        "Microseconds": 952,
        "Nanoseconds": 300,
        "Minutes": 0,
        "Seconds": 1,
        "TotalDays": 1.7950836805555556E-05,
        "TotalHours": 0.00043082008333333334,
        "TotalMilliseconds": 1550.9523,
        "TotalMicroseconds": 1550952.3,
        "TotalNanoseconds": 1550952300.0,
        "TotalMinutes": 0.025849205,
        "TotalSeconds": 1.5509523
      },
      "FrameworkDuration": {
        "Ticks": 138511,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 13,
        "Microseconds": 851,
        "Nanoseconds": 100,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 1.603136574074074E-07,
        "TotalHours": 3.847527777777778E-06,
        "TotalMilliseconds": 13.8511,
        "TotalMicroseconds": 13851.1,
        "TotalNanoseconds": 13851100.0,
        "TotalMinutes": 0.00023085166666666666,
        "TotalSeconds": 0.0138511
      },
      "PluginData": null,
      "FrameworkData": null
    }
  ]
}
