{
  "TestResults": {
    "Containers": [
      {
        "Name": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "Type": "File",
        "Item": {
          "Name": "Test-EnhancedDocumentationSystem.ps1",
          "Length": 50196,
          "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
          "Directory": {
            "Name": "Unity-Claude-Automation",
            "Parent": "C:\\UnityProjects\\Sound-and-Shoal",
            "Root": "C:\\",
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Extension": "",
            "CreationTime": "2025-08-16T18:37:14.6080817-04:00",
            "CreationTimeUtc": "2025-08-16T22:37:14.6080817Z",
            "LastAccessTime": "2025-08-28T20:46:41.2909588-04:00",
            "LastAccessTimeUtc": "2025-08-29T00:46:41.2909588Z",
            "LastWriteTime": "2025-08-28T20:44:40.9313518-04:00",
            "LastWriteTimeUtc": "2025-08-29T00:44:40.9313518Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 16
          },
          "IsReadOnly": false,
          "Exists": true,
          "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "Extension": ".ps1",
          "CreationTime": "2025-08-28T20:43:17.6686205-04:00",
          "CreationTimeUtc": "2025-08-29T00:43:17.6686205Z",
          "LastAccessTime": "2025-08-28T20:44:27.0013384-04:00",
          "LastAccessTimeUtc": "2025-08-29T00:44:27.0013384Z",
          "LastWriteTime": "2025-08-28T20:43:17.6686205-04:00",
          "LastWriteTimeUtc": "2025-08-29T00:43:17.6686205Z",
          "LinkTarget": null,
          "UnixFileMode": -1,
          "Attributes": 32
        },
        "Data": {},
        "Blocks": [
          {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "You cannot call a method on a null-valued expression.",
            "Duration": "00:00:00.1416270",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.7151048-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0519900",
            "UserDuration": "00:00:00.0896370",
            "OwnDuration": "00:00:00.1416270",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 217,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 6,
            "PassedCount": 0,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:02.5731901",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.8567353-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1104343",
            "UserDuration": "00:00:02.4627558",
            "OwnDuration": "00:00:02.4341397",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 425,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[-] Language-Specific Templates [-] Automation Triggers",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:02.6240217",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($templateModulePaths -and $templateModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-Templates] Testing availability for $($templateModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $templateModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-Templates] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-Templates] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-Templates] ERROR: templateModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Language-Specific Templates [-] Automation Triggers",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:39.2883087-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1295474",
            "UserDuration": "00:00:02.4944743",
            "OwnDuration": "00:00:02.6014926",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($templateModulePaths -and $templateModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-Templates] Testing availability for $($templateModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $templateModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-Templates] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-Templates] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-Templates] ERROR: templateModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 597,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 3,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:04.4023146",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Passed": false,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:39.3391867-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1783972",
            "UserDuration": "00:00:04.2239174",
            "OwnDuration": "00:00:02.4730530",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 739,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          }
        ],
        "Result": "Failed",
        "Duration": {
          "Ticks": 47314606,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 731,
          "Microseconds": 460,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 4,
          "TotalDays": 5.476227546296296E-05,
          "TotalHours": 0.001314294611111111,
          "TotalMilliseconds": 4731.4606,
          "TotalMicroseconds": 4731460.6,
          "TotalNanoseconds": 4731460600.0,
          "TotalMinutes": 0.07885767666666667,
          "TotalSeconds": 4.7314606
        },
        "FailedCount": 23,
        "PassedCount": 2,
        "SkippedCount": 3,
        "InconclusiveCount": 0,
        "NotRunCount": 0,
        "TotalCount": 28,
        "ErrorRecord": [],
        "Passed": false,
        "OwnPassed": true,
        "Skip": false,
        "ShouldRun": true,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
        "DiscoveryDuration": {
          "Ticks": 1199199,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 119,
          "Microseconds": 919,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.3879618055555555E-06,
          "TotalHours": 3.331108333333333E-05,
          "TotalMilliseconds": 119.9199,
          "TotalMicroseconds": 119919.9,
          "TotalNanoseconds": 119919900.0,
          "TotalMinutes": 0.001998665,
          "TotalSeconds": 0.1199199
        },
        "UserDuration": {
          "Ticks": 42271390,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 227,
          "Microseconds": 139,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 4,
          "TotalDays": 4.8925219907407405E-05,
          "TotalHours": 0.0011742052777777778,
          "TotalMilliseconds": 4227.139,
          "TotalMicroseconds": 4227139.0,
          "TotalNanoseconds": 4227139000.0,
          "TotalMinutes": 0.07045231666666667,
          "TotalSeconds": 4.227139
        },
        "FrameworkDuration": {
          "Ticks": 3844017,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 384,
          "Microseconds": 401,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.44909375E-06,
          "TotalHours": 0.00010677825,
          "TotalMilliseconds": 384.4017,
          "TotalMicroseconds": 384401.7,
          "TotalNanoseconds": 384401700.0,
          "TotalMinutes": 0.006406695,
          "TotalSeconds": 0.3844017
        },
        "StandardOutput": null
      }
    ],
    "Result": "Failed",
    "FailedCount": 23,
    "FailedBlocksCount": 5,
    "FailedContainersCount": 0,
    "PassedCount": 2,
    "SkippedCount": 3,
    "InconclusiveCount": 0,
    "NotRunCount": 0,
    "TotalCount": 28,
    "Duration": {
      "Ticks": 47314606,
      "Days": 0,
      "Hours": 0,
      "Milliseconds": 731,
      "Microseconds": 460,
      "Nanoseconds": 600,
      "Minutes": 0,
      "Seconds": 4,
      "TotalDays": 5.476227546296296E-05,
      "TotalHours": 0.001314294611111111,
      "TotalMilliseconds": 4731.4606,
      "TotalMicroseconds": 4731460.6,
      "TotalNanoseconds": 4731460600.0,
      "TotalMinutes": 0.07885767666666667,
      "TotalSeconds": 4.7314606
    },
    "Executed": true,
    "ExecutedAt": "2025-08-28T20:46:36.3869421-04:00",
    "Version": "5.7.1",
    "PSVersion": "7.5.2",
    "PSBoundParameters": {
      "Configuration": {
        "Run": {
          "Path": {
            "Default": ".",
            "Description": "Directories to be searched for tests, paths directly to test files, or combination of both.",
            "Value": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsModified": true
          },
          "ExcludePath": {
            "Default": "",
            "Description": "Directories or files to be excluded from the run.",
            "Value": "",
            "IsModified": false
          },
          "ScriptBlock": {
            "Default": "",
            "Description": "ScriptBlocks containing tests to be executed.",
            "Value": "",
            "IsModified": false
          },
          "Container": {
            "Default": "",
            "Description": "ContainerInfo objects containing tests to be executed.",
            "Value": "",
            "IsModified": false
          },
          "TestExtension": {
            "Default": ".Tests.ps1",
            "Description": "Filter used to identify test files.",
            "Value": ".Tests.ps1",
            "IsModified": false
          },
          "Exit": {
            "Default": false,
            "Description": "Exit with non-zero exit code when the test run fails. Exit code is always set to `$LASTEXITCODE` even when this option is `$false`. When used together with Throw, throwing an exception is preferred.",
            "Value": false,
            "IsModified": false
          },
          "Throw": {
            "Default": false,
            "Description": "Throw an exception when test run fails. When used together with Exit, throwing an exception is preferred.",
            "Value": false,
            "IsModified": false
          },
          "PassThru": {
            "Default": false,
            "Description": "Return result object to the pipeline after finishing the test run.",
            "Value": true,
            "IsModified": true
          },
          "SkipRun": {
            "Default": false,
            "Description": "Runs the discovery phase but skips run. Use it with PassThru to get object populated with all tests.",
            "Value": false,
            "IsModified": false
          },
          "SkipRemainingOnFailure": {
            "Default": "None",
            "Description": "Skips remaining tests after failure for selected scope, options are None, Run, Container and Block.",
            "Value": "None",
            "IsModified": false
          }
        },
        "Filter": {
          "Tag": {
            "Default": "",
            "Description": "Tags of Describe, Context or It to be run.",
            "Value": "",
            "IsModified": false
          },
          "ExcludeTag": {
            "Default": "",
            "Description": "Tags of Describe, Context or It to be excluded from the run.",
            "Value": "",
            "IsModified": false
          },
          "Line": {
            "Default": "",
            "Description": "Filter by file and scriptblock start line, useful to run parsed tests programmatically to avoid problems with expanded names. Example: 'C:\\tests\\file1.Tests.ps1:37'",
            "Value": "",
            "IsModified": false
          },
          "ExcludeLine": {
            "Default": "",
            "Description": "Exclude by file and scriptblock start line, takes precedence over Line.",
            "Value": "",
            "IsModified": false
          },
          "FullName": {
            "Default": "",
            "Description": "Full name of test with -like wildcards, joined by dot. Example: '*.describe Get-Item.test1'",
            "Value": "",
            "IsModified": false
          }
        },
        "CodeCoverage": {
          "Enabled": {
            "Default": false,
            "Description": "Enable CodeCoverage.",
            "Value": false,
            "IsModified": false
          },
          "OutputFormat": {
            "Default": "JaCoCo",
            "Description": "Format to use for code coverage report. Possible values: JaCoCo, CoverageGutters, Cobertura",
            "Value": "JaCoCo",
            "IsModified": false
          },
          "OutputPath": {
            "Default": "coverage.xml",
            "Description": "Path relative to the current directory where code coverage report is saved.",
            "Value": "coverage.xml",
            "IsModified": false
          },
          "OutputEncoding": {
            "Default": "UTF8",
            "Description": "Encoding of the output file.",
            "Value": "UTF8",
            "IsModified": false
          },
          "Path": {
            "Default": "",
            "Description": "Directories or files to be used for code coverage, by default the Path(s) from general settings are used, unless overridden here.",
            "Value": "",
            "IsModified": false
          },
          "ExcludeTests": {
            "Default": true,
            "Description": "Exclude tests from code coverage. This uses the TestFilter from general configuration.",
            "Value": true,
            "IsModified": false
          },
          "RecursePaths": {
            "Default": true,
            "Description": "Will recurse through directories in the Path option.",
            "Value": true,
            "IsModified": false
          },
          "CoveragePercentTarget": {
            "Default": 75.0,
            "Description": "Target percent of code coverage that you want to achieve, default 75%.",
            "Value": 75.0,
            "IsModified": false
          },
          "UseBreakpoints": {
            "Default": true,
            "Description": "EXPERIMENTAL: When false, use Profiler based tracer to do CodeCoverage instead of using breakpoints.",
            "Value": true,
            "IsModified": false
          },
          "SingleHitBreakpoints": {
            "Default": true,
            "Description": "Remove breakpoint when it is hit.",
            "Value": true,
            "IsModified": false
          }
        },
        "TestResult": {
          "Enabled": {
            "Default": false,
            "Description": "Enable TestResult.",
            "Value": true,
            "IsModified": true
          },
          "OutputFormat": {
            "Default": "NUnitXml",
            "Description": "Format to use for test result report. Possible values: NUnitXml, NUnit2.5, NUnit3 or JUnitXml",
            "Value": "NUnitXml",
            "IsModified": false
          },
          "OutputPath": {
            "Default": "testResults.xml",
            "Description": "Path relative to the current directory where test result report is saved.",
            "Value": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\TestResults\\EnhancedDocumentationSystem-UnitTests-20250828-204636.xml",
            "IsModified": true
          },
          "OutputEncoding": {
            "Default": "UTF8",
            "Description": "Encoding of the output file.",
            "Value": "UTF8",
            "IsModified": false
          },
          "TestSuiteName": {
            "Default": "Pester",
            "Description": "Set the name assigned to the root 'test-suite' element.",
            "Value": "Pester",
            "IsModified": false
          }
        },
        "Should": {
          "ErrorAction": {
            "Default": "Stop",
            "Description": "Controls if Should throws on error. Use 'Stop' to throw on error, or 'Continue' to fail at the end of the test.",
            "Value": "Stop",
            "IsModified": false
          }
        },
        "Debug": {
          "ShowFullErrors": {
            "Default": false,
            "Description": "Show full errors including Pester internal stack. This property is deprecated, and if set to true it will override Output.StackTraceVerbosity to 'Full'.",
            "Value": false,
            "IsModified": false
          },
          "WriteDebugMessages": {
            "Default": false,
            "Description": "Write Debug messages to screen.",
            "Value": false,
            "IsModified": false
          },
          "WriteDebugMessagesFrom": {
            "Default": "Discovery Skip Mock CodeCoverage",
            "Description": "Write Debug messages from a given source, WriteDebugMessages must be set to true for this to work. You can use like wildcards to get messages from multiple sources, as well as * to get everything.",
            "Value": "Discovery Skip Mock CodeCoverage",
            "IsModified": false
          },
          "ShowNavigationMarkers": {
            "Default": false,
            "Description": "Write paths after every block and test, for easy navigation in VSCode.",
            "Value": false,
            "IsModified": false
          },
          "ReturnRawResultObject": {
            "Default": false,
            "Description": "Returns unfiltered result object, this is for development only. Do not rely on this object for additional properties, non-public properties will be renamed without previous notice.",
            "Value": false,
            "IsModified": false
          }
        },
        "Output": {
          "Verbosity": {
            "Default": "Normal",
            "Description": "The verbosity of output, options are None, Normal, Detailed and Diagnostic.",
            "Value": "Normal",
            "IsModified": true
          },
          "StackTraceVerbosity": {
            "Default": "Filtered",
            "Description": "The verbosity of stacktrace output, options are None, FirstLine, Filtered and Full.",
            "Value": "Filtered",
            "IsModified": false
          },
          "CIFormat": {
            "Default": "Auto",
            "Description": "The CI format of error output in build logs, options are None, Auto, AzureDevops and GithubActions.",
            "Value": "Auto",
            "IsModified": false
          },
          "CILogLevel": {
            "Default": "Error",
            "Description": "The CI log level in build logs, options are Error and Warning.",
            "Value": "Error",
            "IsModified": false
          },
          "RenderMode": {
            "Default": "Auto",
            "Description": "The mode used to render console output, options are Auto, Ansi, ConsoleColor and Plaintext.",
            "Value": "Auto",
            "IsModified": false
          }
        },
        "TestDrive": {
          "Enabled": {
            "Default": true,
            "Description": "Enable TestDrive.",
            "Value": true,
            "IsModified": false
          }
        },
        "TestRegistry": {
          "Enabled": {
            "Default": true,
            "Description": "Enable TestRegistry.",
            "Value": true,
            "IsModified": false
          }
        }
      }
    },
    "Plugins": null,
    "PluginConfiguration": null,
    "PluginData": null,
    "Configuration": {
      "Run": {
        "Path": {
          "Default": [
            "."
          ],
          "Description": "Directories to be searched for tests, paths directly to test files, or combination of both.",
          "Value": [
            "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1"
          ],
          "IsModified": true
        },
        "ExcludePath": {
          "Default": [],
          "Description": "Directories or files to be excluded from the run.",
          "Value": [],
          "IsModified": false
        },
        "ScriptBlock": {
          "Default": [],
          "Description": "ScriptBlocks containing tests to be executed.",
          "Value": [],
          "IsModified": false
        },
        "Container": {
          "Default": [],
          "Description": "ContainerInfo objects containing tests to be executed.",
          "Value": [],
          "IsModified": false
        },
        "TestExtension": {
          "Default": ".Tests.ps1",
          "Description": "Filter used to identify test files.",
          "Value": ".Tests.ps1",
          "IsModified": false
        },
        "Exit": {
          "Default": false,
          "Description": "Exit with non-zero exit code when the test run fails. Exit code is always set to `$LASTEXITCODE` even when this option is `$false`. When used together with Throw, throwing an exception is preferred.",
          "Value": false,
          "IsModified": false
        },
        "Throw": {
          "Default": false,
          "Description": "Throw an exception when test run fails. When used together with Exit, throwing an exception is preferred.",
          "Value": false,
          "IsModified": false
        },
        "PassThru": {
          "Default": false,
          "Description": "Return result object to the pipeline after finishing the test run.",
          "Value": true,
          "IsModified": true
        },
        "SkipRun": {
          "Default": false,
          "Description": "Runs the discovery phase but skips run. Use it with PassThru to get object populated with all tests.",
          "Value": false,
          "IsModified": false
        },
        "SkipRemainingOnFailure": {
          "Default": "None",
          "Description": "Skips remaining tests after failure for selected scope, options are None, Run, Container and Block.",
          "Value": "None",
          "IsModified": false
        }
      },
      "Filter": {
        "Tag": {
          "Default": [],
          "Description": "Tags of Describe, Context or It to be run.",
          "Value": [],
          "IsModified": false
        },
        "ExcludeTag": {
          "Default": [],
          "Description": "Tags of Describe, Context or It to be excluded from the run.",
          "Value": [],
          "IsModified": false
        },
        "Line": {
          "Default": [],
          "Description": "Filter by file and scriptblock start line, useful to run parsed tests programmatically to avoid problems with expanded names. Example: 'C:\\tests\\file1.Tests.ps1:37'",
          "Value": [],
          "IsModified": false
        },
        "ExcludeLine": {
          "Default": [],
          "Description": "Exclude by file and scriptblock start line, takes precedence over Line.",
          "Value": [],
          "IsModified": false
        },
        "FullName": {
          "Default": [],
          "Description": "Full name of test with -like wildcards, joined by dot. Example: '*.describe Get-Item.test1'",
          "Value": [],
          "IsModified": false
        }
      },
      "CodeCoverage": {
        "Enabled": {
          "Default": false,
          "Description": "Enable CodeCoverage.",
          "Value": false,
          "IsModified": false
        },
        "OutputFormat": {
          "Default": "JaCoCo",
          "Description": "Format to use for code coverage report. Possible values: JaCoCo, CoverageGutters, Cobertura",
          "Value": "JaCoCo",
          "IsModified": false
        },
        "OutputPath": {
          "Default": "coverage.xml",
          "Description": "Path relative to the current directory where code coverage report is saved.",
          "Value": "coverage.xml",
          "IsModified": false
        },
        "OutputEncoding": {
          "Default": "UTF8",
          "Description": "Encoding of the output file.",
          "Value": "UTF8",
          "IsModified": false
        },
        "Path": {
          "Default": [],
          "Description": "Directories or files to be used for code coverage, by default the Path(s) from general settings are used, unless overridden here.",
          "Value": [],
          "IsModified": false
        },
        "ExcludeTests": {
          "Default": true,
          "Description": "Exclude tests from code coverage. This uses the TestFilter from general configuration.",
          "Value": true,
          "IsModified": false
        },
        "RecursePaths": {
          "Default": true,
          "Description": "Will recurse through directories in the Path option.",
          "Value": true,
          "IsModified": false
        },
        "CoveragePercentTarget": {
          "Default": 75.0,
          "Description": "Target percent of code coverage that you want to achieve, default 75%.",
          "Value": 75.0,
          "IsModified": false
        },
        "UseBreakpoints": {
          "Default": true,
          "Description": "EXPERIMENTAL: When false, use Profiler based tracer to do CodeCoverage instead of using breakpoints.",
          "Value": true,
          "IsModified": false
        },
        "SingleHitBreakpoints": {
          "Default": true,
          "Description": "Remove breakpoint when it is hit.",
          "Value": true,
          "IsModified": false
        }
      },
      "TestResult": {
        "Enabled": {
          "Default": false,
          "Description": "Enable TestResult.",
          "Value": true,
          "IsModified": true
        },
        "OutputFormat": {
          "Default": "NUnitXml",
          "Description": "Format to use for test result report. Possible values: NUnitXml, NUnit2.5, NUnit3 or JUnitXml",
          "Value": "NUnitXml",
          "IsModified": false
        },
        "OutputPath": {
          "Default": "testResults.xml",
          "Description": "Path relative to the current directory where test result report is saved.",
          "Value": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\TestResults\\EnhancedDocumentationSystem-UnitTests-20250828-204636.xml",
          "IsModified": true
        },
        "OutputEncoding": {
          "Default": "UTF8",
          "Description": "Encoding of the output file.",
          "Value": "UTF8",
          "IsModified": false
        },
        "TestSuiteName": {
          "Default": "Pester",
          "Description": "Set the name assigned to the root 'test-suite' element.",
          "Value": "Pester",
          "IsModified": false
        }
      },
      "Should": {
        "ErrorAction": {
          "Default": "Stop",
          "Description": "Controls if Should throws on error. Use 'Stop' to throw on error, or 'Continue' to fail at the end of the test.",
          "Value": "Stop",
          "IsModified": false
        }
      },
      "Debug": {
        "ShowFullErrors": {
          "Default": false,
          "Description": "Show full errors including Pester internal stack. This property is deprecated, and if set to true it will override Output.StackTraceVerbosity to 'Full'.",
          "Value": false,
          "IsModified": false
        },
        "WriteDebugMessages": {
          "Default": false,
          "Description": "Write Debug messages to screen.",
          "Value": false,
          "IsModified": false
        },
        "WriteDebugMessagesFrom": {
          "Default": [
            "Discovery",
            "Skip",
            "Mock",
            "CodeCoverage"
          ],
          "Description": "Write Debug messages from a given source, WriteDebugMessages must be set to true for this to work. You can use like wildcards to get messages from multiple sources, as well as * to get everything.",
          "Value": [
            "Discovery",
            "Skip",
            "Mock",
            "CodeCoverage"
          ],
          "IsModified": false
        },
        "ShowNavigationMarkers": {
          "Default": false,
          "Description": "Write paths after every block and test, for easy navigation in VSCode.",
          "Value": false,
          "IsModified": false
        },
        "ReturnRawResultObject": {
          "Default": false,
          "Description": "Returns unfiltered result object, this is for development only. Do not rely on this object for additional properties, non-public properties will be renamed without previous notice.",
          "Value": false,
          "IsModified": false
        }
      },
      "Output": {
        "Verbosity": {
          "Default": "Normal",
          "Description": "The verbosity of output, options are None, Normal, Detailed and Diagnostic.",
          "Value": "Normal",
          "IsModified": true
        },
        "StackTraceVerbosity": {
          "Default": "Filtered",
          "Description": "The verbosity of stacktrace output, options are None, FirstLine, Filtered and Full.",
          "Value": "Filtered",
          "IsModified": false
        },
        "CIFormat": {
          "Default": "Auto",
          "Description": "The CI format of error output in build logs, options are None, Auto, AzureDevops and GithubActions.",
          "Value": "None",
          "IsModified": true
        },
        "CILogLevel": {
          "Default": "Error",
          "Description": "The CI log level in build logs, options are Error and Warning.",
          "Value": "Error",
          "IsModified": false
        },
        "RenderMode": {
          "Default": "Auto",
          "Description": "The mode used to render console output, options are Auto, Ansi, ConsoleColor and Plaintext.",
          "Value": "Ansi",
          "IsModified": true
        }
      },
      "TestDrive": {
        "Enabled": {
          "Default": true,
          "Description": "Enable TestDrive.",
          "Value": true,
          "IsModified": false
        }
      },
      "TestRegistry": {
        "Enabled": {
          "Default": true,
          "Description": "Enable TestRegistry.",
          "Value": true,
          "IsModified": false
        }
      }
    },
    "DiscoveryDuration": {
      "Ticks": 1199199,
      "Days": 0,
      "Hours": 0,
      "Milliseconds": 119,
      "Microseconds": 919,
      "Nanoseconds": 900,
      "Minutes": 0,
      "Seconds": 0,
      "TotalDays": 1.3879618055555555E-06,
      "TotalHours": 3.331108333333333E-05,
      "TotalMilliseconds": 119.9199,
      "TotalMicroseconds": 119919.9,
      "TotalNanoseconds": 119919900.0,
      "TotalMinutes": 0.001998665,
      "TotalSeconds": 0.1199199
    },
    "UserDuration": {
      "Ticks": 42271390,
      "Days": 0,
      "Hours": 0,
      "Milliseconds": 227,
      "Microseconds": 139,
      "Nanoseconds": 0,
      "Minutes": 0,
      "Seconds": 4,
      "TotalDays": 4.8925219907407405E-05,
      "TotalHours": 0.0011742052777777778,
      "TotalMilliseconds": 4227.139,
      "TotalMicroseconds": 4227139.0,
      "TotalNanoseconds": 4227139000.0,
      "TotalMinutes": 0.07045231666666667,
      "TotalSeconds": 4.227139
    },
    "FrameworkDuration": {
      "Ticks": 3844017,
      "Days": 0,
      "Hours": 0,
      "Milliseconds": 384,
      "Microseconds": 401,
      "Nanoseconds": 700,
      "Minutes": 0,
      "Seconds": 0,
      "TotalDays": 4.44909375E-06,
      "TotalHours": 0.00010677825,
      "TotalMilliseconds": 384.4017,
      "TotalMicroseconds": 384401.7,
      "TotalNanoseconds": 384401700.0,
      "TotalMinutes": 0.006406695,
      "TotalSeconds": 0.3844017
    },
    "Failed": [
      {
        "Name": "Should create thread-safe CPG wrapper",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Thread-Safe Operations",
          "Should create thread-safe CPG wrapper"
        ],
        "Data": null,
        "ExpandedName": "Should create thread-safe CPG wrapper",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should create thread-safe CPG wrapper",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }",
            "Type": 19,
            "Start": 17271,
            "Length": 619,
            "StartLine": 299,
            "StartColumn": 125,
            "EndLine": 306,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "f8191d70-b45f-40d5-a3ea-dd9289ee0f15",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }",
            "Parent": "{\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Thread-Safe Operations",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Thread-Safe Operations"
          ],
          "Data": null,
          "ExpandedName": "Thread-Safe Operations",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
          "Blocks": [],
          "Tests": [
            "[-] Should create thread-safe CPG wrapper",
            "[-] Should handle concurrent operations safely",
            "[-] Should provide thread safety statistics"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "You cannot call a method on a null-valued expression.",
            "Duration": "00:00:00.1416270",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.7151048-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0519900",
            "UserDuration": "00:00:00.0896370",
            "OwnDuration": "00:00:00.1416270",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 217,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should create thread-safe CPG wrapper",
            "[-] Should handle concurrent operations safely",
            "[-] Should provide thread safety statistics"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "5276faa7-b8f1-4dc2-8167-3907f1757474",
            "Ast": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }"
          },
          "StartLine": 297,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 299,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should handle concurrent operations safely",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Thread-Safe Operations",
          "Should handle concurrent operations safely"
        ],
        "Data": null,
        "ExpandedName": "Should handle concurrent operations safely",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should handle concurrent operations safely",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }",
            "Type": 19,
            "Start": 18035,
            "Length": 737,
            "StartLine": 308,
            "StartColumn": 130,
            "EndLine": 326,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "bd71da43-0fea-40da-ad4d-e2704d06f533",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }",
            "Parent": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Thread-Safe Operations",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Thread-Safe Operations"
          ],
          "Data": null,
          "ExpandedName": "Thread-Safe Operations",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
          "Blocks": [],
          "Tests": [
            "[-] Should create thread-safe CPG wrapper",
            "[-] Should handle concurrent operations safely",
            "[-] Should provide thread safety statistics"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "You cannot call a method on a null-valued expression.",
            "Duration": "00:00:00.1416270",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.7151048-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0519900",
            "UserDuration": "00:00:00.0896370",
            "OwnDuration": "00:00:00.1416270",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 217,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should create thread-safe CPG wrapper",
            "[-] Should handle concurrent operations safely",
            "[-] Should provide thread safety statistics"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "5276faa7-b8f1-4dc2-8167-3907f1757474",
            "Ast": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }"
          },
          "StartLine": 297,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 308,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should provide thread safety statistics",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Thread-Safe Operations",
          "Should provide thread safety statistics"
        ],
        "Data": null,
        "ExpandedName": "Should provide thread safety statistics",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should provide thread safety statistics",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }",
            "Type": 19,
            "Start": 18914,
            "Length": 311,
            "StartLine": 328,
            "StartColumn": 127,
            "EndLine": 334,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "6662b139-2d8d-43ac-a6bb-9f69fa9c79ae",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }",
            "Parent": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Thread-Safe Operations",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Thread-Safe Operations"
          ],
          "Data": null,
          "ExpandedName": "Thread-Safe Operations",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
          "Blocks": [],
          "Tests": [
            "[-] Should create thread-safe CPG wrapper",
            "[-] Should handle concurrent operations safely",
            "[-] Should provide thread safety statistics"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "You cannot call a method on a null-valued expression.",
            "Duration": "00:00:00.1416270",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.7151048-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0519900",
            "UserDuration": "00:00:00.0896370",
            "OwnDuration": "00:00:00.1416270",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 217,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should create thread-safe CPG wrapper",
            "[-] Should handle concurrent operations safely",
            "[-] Should provide thread safety statistics"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "5276faa7-b8f1-4dc2-8167-3907f1757474",
            "Ast": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }"
          },
          "StartLine": 297,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 328,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should build call graphs from source code",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Call Graph Builder",
          "Should build call graphs from source code"
        ],
        "Data": null,
        "ExpandedName": "Should build call graphs from source code",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should build call graphs from source code",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Type": 19,
            "Start": 19662,
            "Length": 665,
            "StartLine": 344,
            "StartColumn": 125,
            "EndLine": 364,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "c167251b-b9aa-43fd-955c-4ff2489a1398",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Call Graph Builder",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Call Graph Builder"
          ],
          "Data": null,
          "ExpandedName": "Call Graph Builder",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder",
          "Blocks": [],
          "Tests": [
            "[-] Should build call graphs from source code",
            "[-] Should detect recursive calls"
          ],
          "Result": "Failed",
          "FailedCount": 2,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "You cannot call a method on a null-valued expression.",
            "Duration": "00:00:00.1416270",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.7151048-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0519900",
            "UserDuration": "00:00:00.0896370",
            "OwnDuration": "00:00:00.1416270",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 217,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "98a6b0b4-dc78-47ae-9bf8-49b412cc9dd0",
            "Ast": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should build call graphs from source code",
            "[-] Should detect recursive calls"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "187979b7-bec7-4a9c-a65a-3e15b71daa49",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 337,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 2,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 344,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should detect recursive calls",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Call Graph Builder",
          "Should detect recursive calls"
        ],
        "Data": null,
        "ExpandedName": "Should detect recursive calls",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should detect recursive calls",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Type": 19,
            "Start": 20455,
            "Length": 589,
            "StartLine": 366,
            "StartColumn": 113,
            "EndLine": 381,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "25488cc6-d4bd-45fb-89c9-ef9a628725de",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Call Graph Builder",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Call Graph Builder"
          ],
          "Data": null,
          "ExpandedName": "Call Graph Builder",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder",
          "Blocks": [],
          "Tests": [
            "[-] Should build call graphs from source code",
            "[-] Should detect recursive calls"
          ],
          "Result": "Failed",
          "FailedCount": 2,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "You cannot call a method on a null-valued expression.",
            "Duration": "00:00:00.1416270",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.7151048-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0519900",
            "UserDuration": "00:00:00.0896370",
            "OwnDuration": "00:00:00.1416270",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 217,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "98a6b0b4-dc78-47ae-9bf8-49b412cc9dd0",
            "Ast": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should build call graphs from source code",
            "[-] Should detect recursive calls"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "187979b7-bec7-4a9c-a65a-3e15b71daa49",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 337,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 2,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 366,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should track variable definitions and uses",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Data Flow Tracker",
          "Should track variable definitions and uses"
        ],
        "Data": null,
        "ExpandedName": "Should track variable definitions and uses",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should track variable definitions and uses",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Type": 19,
            "Start": 21478,
            "Length": 475,
            "StartLine": 391,
            "StartColumn": 125,
            "EndLine": 403,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "22750e62-e49d-4c1d-b4fa-f7baaa6e2553",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Data Flow Tracker",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Data Flow Tracker"
          ],
          "Data": null,
          "ExpandedName": "Data Flow Tracker",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker",
          "Blocks": [],
          "Tests": [
            "[-] Should track variable definitions and uses",
            "[-] Should perform taint analysis"
          ],
          "Result": "Failed",
          "FailedCount": 2,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "You cannot call a method on a null-valued expression.",
            "Duration": "00:00:00.1416270",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.7151048-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0519900",
            "UserDuration": "00:00:00.0896370",
            "OwnDuration": "00:00:00.1416270",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 217,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "c4815629-01e2-461a-b09b-c08e08906e39",
            "Ast": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should track variable definitions and uses",
            "[-] Should perform taint analysis"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "ae18a096-4336-4d57-8990-0236cf757f5f",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 384,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 2,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 391,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should perform taint analysis",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Data Flow Tracker",
          "Should perform taint analysis"
        ],
        "Data": null,
        "ExpandedName": "Should perform taint analysis",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should perform taint analysis",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Type": 19,
            "Start": 22080,
            "Length": 563,
            "StartLine": 405,
            "StartColumn": 112,
            "EndLine": 417,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "bbf55d86-d661-439b-a392-3004c371f347",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Data Flow Tracker",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Data Flow Tracker"
          ],
          "Data": null,
          "ExpandedName": "Data Flow Tracker",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker",
          "Blocks": [],
          "Tests": [
            "[-] Should track variable definitions and uses",
            "[-] Should perform taint analysis"
          ],
          "Result": "Failed",
          "FailedCount": 2,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "You cannot call a method on a null-valued expression.",
            "Duration": "00:00:00.1416270",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.7151048-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0519900",
            "UserDuration": "00:00:00.0896370",
            "OwnDuration": "00:00:00.1416270",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 217,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "c4815629-01e2-461a-b09b-c08e08906e39",
            "Ast": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should track variable definitions and uses",
            "[-] Should perform taint analysis"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "ae18a096-4336-4d57-8990-0236cf757f5f",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 384,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 2,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 405,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should create function documentation prompts",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Prompt Templates",
          "Should create function documentation prompts"
        ],
        "Data": null,
        "ExpandedName": "Should create function documentation prompts",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create function documentation prompts",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 28017,
            "Length": 427,
            "StartLine": 518,
            "StartColumn": 127,
            "EndLine": 525,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "e59b77d2-8b42-4f84-a5ba-8a7a2f706bce",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Prompt Templates",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Prompt Templates"
          ],
          "Data": null,
          "ExpandedName": "Prompt Templates",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
          "Blocks": [],
          "Tests": [
            "[-] Should create function documentation prompts",
            "[-] Should create module documentation prompts",
            "[-] Should support variable substitution"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 464071,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 46,
            "Microseconds": 407,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.37119212962963E-07,
            "TotalHours": 1.2890861111111111E-05,
            "TotalMilliseconds": 46.4071,
            "TotalMicroseconds": 46407.1,
            "TotalNanoseconds": 46407100.0,
            "TotalMinutes": 0.0007734516666666666,
            "TotalSeconds": 0.0464071
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 6,
            "PassedCount": 0,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:02.5731901",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.8567353-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1104343",
            "UserDuration": "00:00:02.4627558",
            "OwnDuration": "00:00:02.4341397",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 425,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b058d240-3f68-4dbe-bf2d-b3d521c06952",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should create function documentation prompts",
            "[-] Should create module documentation prompts",
            "[-] Should support variable substitution"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.2654058-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 447373,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 44,
            "Microseconds": 737,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.17792824074074E-07,
            "TotalHours": 1.2427027777777777E-05,
            "TotalMilliseconds": 44.7373,
            "TotalMicroseconds": 44737.3,
            "TotalNanoseconds": 44737300.0,
            "TotalMinutes": 0.0007456216666666667,
            "TotalSeconds": 0.0447373
          },
          "UserDuration": {
            "Ticks": 16698,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 1,
            "Microseconds": 669,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.932638888888889E-08,
            "TotalHours": 4.638333333333333E-07,
            "TotalMilliseconds": 1.6698,
            "TotalMicroseconds": 1669.8,
            "TotalNanoseconds": 1669800.0,
            "TotalMinutes": 2.783E-05,
            "TotalSeconds": 0.0016698
          },
          "OwnDuration": {
            "Ticks": 464071,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 46,
            "Microseconds": 407,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.37119212962963E-07,
            "TotalHours": 1.2890861111111111E-05,
            "TotalMilliseconds": 46.4071,
            "TotalMicroseconds": 46407.1,
            "TotalNanoseconds": 46407100.0,
            "TotalMinutes": 0.0007734516666666666,
            "TotalSeconds": 0.0464071
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "523c184a-faf6-44e3-81b2-c7429831fb34",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 511,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 518,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should create module documentation prompts",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Prompt Templates",
          "Should create module documentation prompts"
        ],
        "Data": null,
        "ExpandedName": "Should create module documentation prompts",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create module documentation prompts",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 28584,
            "Length": 411,
            "StartLine": 527,
            "StartColumn": 125,
            "EndLine": 534,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "7eb56070-7462-4dc8-85d4-3d46da587c3d",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Prompt Templates",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Prompt Templates"
          ],
          "Data": null,
          "ExpandedName": "Prompt Templates",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
          "Blocks": [],
          "Tests": [
            "[-] Should create function documentation prompts",
            "[-] Should create module documentation prompts",
            "[-] Should support variable substitution"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 464071,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 46,
            "Microseconds": 407,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.37119212962963E-07,
            "TotalHours": 1.2890861111111111E-05,
            "TotalMilliseconds": 46.4071,
            "TotalMicroseconds": 46407.1,
            "TotalNanoseconds": 46407100.0,
            "TotalMinutes": 0.0007734516666666666,
            "TotalSeconds": 0.0464071
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 6,
            "PassedCount": 0,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:02.5731901",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.8567353-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1104343",
            "UserDuration": "00:00:02.4627558",
            "OwnDuration": "00:00:02.4341397",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 425,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b058d240-3f68-4dbe-bf2d-b3d521c06952",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should create function documentation prompts",
            "[-] Should create module documentation prompts",
            "[-] Should support variable substitution"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.2654058-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 447373,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 44,
            "Microseconds": 737,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.17792824074074E-07,
            "TotalHours": 1.2427027777777777E-05,
            "TotalMilliseconds": 44.7373,
            "TotalMicroseconds": 44737.3,
            "TotalNanoseconds": 44737300.0,
            "TotalMinutes": 0.0007456216666666667,
            "TotalSeconds": 0.0447373
          },
          "UserDuration": {
            "Ticks": 16698,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 1,
            "Microseconds": 669,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.932638888888889E-08,
            "TotalHours": 4.638333333333333E-07,
            "TotalMilliseconds": 1.6698,
            "TotalMicroseconds": 1669.8,
            "TotalNanoseconds": 1669800.0,
            "TotalMinutes": 2.783E-05,
            "TotalSeconds": 0.0016698
          },
          "OwnDuration": {
            "Ticks": 464071,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 46,
            "Microseconds": 407,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.37119212962963E-07,
            "TotalHours": 1.2890861111111111E-05,
            "TotalMilliseconds": 46.4071,
            "TotalMicroseconds": 46407.1,
            "TotalNanoseconds": 46407100.0,
            "TotalMinutes": 0.0007734516666666666,
            "TotalSeconds": 0.0464071
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "523c184a-faf6-44e3-81b2-c7429831fb34",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 511,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 527,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should support variable substitution",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Prompt Templates",
          "Should support variable substitution"
        ],
        "Data": null,
        "ExpandedName": "Should support variable substitution",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should support variable substitution",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 29129,
            "Length": 542,
            "StartLine": 536,
            "StartColumn": 119,
            "EndLine": 546,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "66c2c9ef-621a-4997-9019-b7a174af24ce",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Prompt Templates",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Prompt Templates"
          ],
          "Data": null,
          "ExpandedName": "Prompt Templates",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
          "Blocks": [],
          "Tests": [
            "[-] Should create function documentation prompts",
            "[-] Should create module documentation prompts",
            "[-] Should support variable substitution"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 464071,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 46,
            "Microseconds": 407,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.37119212962963E-07,
            "TotalHours": 1.2890861111111111E-05,
            "TotalMilliseconds": 46.4071,
            "TotalMicroseconds": 46407.1,
            "TotalNanoseconds": 46407100.0,
            "TotalMinutes": 0.0007734516666666666,
            "TotalSeconds": 0.0464071
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 6,
            "PassedCount": 0,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:02.5731901",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.8567353-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1104343",
            "UserDuration": "00:00:02.4627558",
            "OwnDuration": "00:00:02.4341397",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 425,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b058d240-3f68-4dbe-bf2d-b3d521c06952",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should create function documentation prompts",
            "[-] Should create module documentation prompts",
            "[-] Should support variable substitution"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.2654058-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 447373,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 44,
            "Microseconds": 737,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.17792824074074E-07,
            "TotalHours": 1.2427027777777777E-05,
            "TotalMilliseconds": 44.7373,
            "TotalMicroseconds": 44737.3,
            "TotalNanoseconds": 44737300.0,
            "TotalMinutes": 0.0007456216666666667,
            "TotalSeconds": 0.0447373
          },
          "UserDuration": {
            "Ticks": 16698,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 1,
            "Microseconds": 669,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.932638888888889E-08,
            "TotalHours": 4.638333333333333E-07,
            "TotalMilliseconds": 1.6698,
            "TotalMicroseconds": 1669.8,
            "TotalNanoseconds": 1669800.0,
            "TotalMinutes": 2.783E-05,
            "TotalSeconds": 0.0016698
          },
          "OwnDuration": {
            "Ticks": 464071,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 46,
            "Microseconds": 407,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.37119212962963E-07,
            "TotalHours": 1.2890861111111111E-05,
            "TotalMilliseconds": 46.4071,
            "TotalMicroseconds": 46407.1,
            "TotalNanoseconds": 46407100.0,
            "TotalMinutes": 0.0007734516666666666,
            "TotalSeconds": 0.0464071
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "523c184a-faf6-44e3-81b2-c7429831fb34",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 511,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 536,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should cache and retrieve responses",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Response Cache",
          "Should cache and retrieve responses"
        ],
        "Data": null,
        "ExpandedName": "Should cache and retrieve responses",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should cache and retrieve responses",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }",
            "Type": 19,
            "Start": 30089,
            "Length": 485,
            "StartLine": 556,
            "StartColumn": 116,
            "EndLine": 566,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "1d06bbb4-2afe-4d38-ab49-d4de77f4021f",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Response Cache",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Response Cache"
          ],
          "Data": null,
          "ExpandedName": "Response Cache",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
          "Blocks": [],
          "Tests": [
            "[-] Should cache and retrieve responses",
            "[-] Should handle TTL expiration",
            "[-] Should provide cache statistics"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 557757,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 55,
            "Microseconds": 775,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.455520833333333E-07,
            "TotalHours": 1.549325E-05,
            "TotalMilliseconds": 55.7757,
            "TotalMicroseconds": 55775.7,
            "TotalNanoseconds": 55775700.0,
            "TotalMinutes": 0.000929595,
            "TotalSeconds": 0.0557757
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 6,
            "PassedCount": 0,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:02.5731901",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.8567353-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1104343",
            "UserDuration": "00:00:02.4627558",
            "OwnDuration": "00:00:02.4341397",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 425,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0de2609b-7ecf-4fcc-b3d8-ce27d3f00545",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should cache and retrieve responses",
            "[-] Should handle TTL expiration",
            "[-] Should provide cache statistics"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.2749456-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 534179,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 53,
            "Microseconds": 417,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.182627314814815E-07,
            "TotalHours": 1.4838305555555556E-05,
            "TotalMilliseconds": 53.4179,
            "TotalMicroseconds": 53417.9,
            "TotalNanoseconds": 53417900.0,
            "TotalMinutes": 0.0008902983333333334,
            "TotalSeconds": 0.0534179
          },
          "UserDuration": {
            "Ticks": 23578,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 2,
            "Microseconds": 357,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.7289351851851853E-08,
            "TotalHours": 6.549444444444445E-07,
            "TotalMilliseconds": 2.3578,
            "TotalMicroseconds": 2357.8,
            "TotalNanoseconds": 2357800.0,
            "TotalMinutes": 3.9296666666666666E-05,
            "TotalSeconds": 0.0023578
          },
          "OwnDuration": {
            "Ticks": 557757,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 55,
            "Microseconds": 775,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.455520833333333E-07,
            "TotalHours": 1.549325E-05,
            "TotalMilliseconds": 55.7757,
            "TotalMicroseconds": 55775.7,
            "TotalNanoseconds": 55775700.0,
            "TotalMinutes": 0.000929595,
            "TotalSeconds": 0.0557757
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0ea067c2-0220-4bb3-bd45-894af95956a3",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 549,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 556,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should handle TTL expiration",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Response Cache",
          "Should handle TTL expiration"
        ],
        "Data": null,
        "ExpandedName": "Should handle TTL expiration",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should handle TTL expiration",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }",
            "Type": 19,
            "Start": 30698,
            "Length": 522,
            "StartLine": 568,
            "StartColumn": 109,
            "EndLine": 579,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "490694ca-8768-47f1-bd13-14f753681024",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Response Cache",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Response Cache"
          ],
          "Data": null,
          "ExpandedName": "Response Cache",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
          "Blocks": [],
          "Tests": [
            "[-] Should cache and retrieve responses",
            "[-] Should handle TTL expiration",
            "[-] Should provide cache statistics"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 557757,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 55,
            "Microseconds": 775,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.455520833333333E-07,
            "TotalHours": 1.549325E-05,
            "TotalMilliseconds": 55.7757,
            "TotalMicroseconds": 55775.7,
            "TotalNanoseconds": 55775700.0,
            "TotalMinutes": 0.000929595,
            "TotalSeconds": 0.0557757
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 6,
            "PassedCount": 0,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:02.5731901",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.8567353-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1104343",
            "UserDuration": "00:00:02.4627558",
            "OwnDuration": "00:00:02.4341397",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 425,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0de2609b-7ecf-4fcc-b3d8-ce27d3f00545",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should cache and retrieve responses",
            "[-] Should handle TTL expiration",
            "[-] Should provide cache statistics"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.2749456-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 534179,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 53,
            "Microseconds": 417,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.182627314814815E-07,
            "TotalHours": 1.4838305555555556E-05,
            "TotalMilliseconds": 53.4179,
            "TotalMicroseconds": 53417.9,
            "TotalNanoseconds": 53417900.0,
            "TotalMinutes": 0.0008902983333333334,
            "TotalSeconds": 0.0534179
          },
          "UserDuration": {
            "Ticks": 23578,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 2,
            "Microseconds": 357,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.7289351851851853E-08,
            "TotalHours": 6.549444444444445E-07,
            "TotalMilliseconds": 2.3578,
            "TotalMicroseconds": 2357.8,
            "TotalNanoseconds": 2357800.0,
            "TotalMinutes": 3.9296666666666666E-05,
            "TotalSeconds": 0.0023578
          },
          "OwnDuration": {
            "Ticks": 557757,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 55,
            "Microseconds": 775,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.455520833333333E-07,
            "TotalHours": 1.549325E-05,
            "TotalMilliseconds": 55.7757,
            "TotalMicroseconds": 55775.7,
            "TotalNanoseconds": 55775700.0,
            "TotalMinutes": 0.000929595,
            "TotalSeconds": 0.0557757
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0ea067c2-0220-4bb3-bd45-894af95956a3",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 549,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 568,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should provide cache statistics",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Response Cache",
          "Should provide cache statistics"
        ],
        "Data": null,
        "ExpandedName": "Should provide cache statistics",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should provide cache statistics",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }",
            "Type": 19,
            "Start": 31347,
            "Length": 402,
            "StartLine": 581,
            "StartColumn": 112,
            "EndLine": 589,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "16c3578d-3c06-4c6e-9cbe-deb457721528",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Response Cache",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Response Cache"
          ],
          "Data": null,
          "ExpandedName": "Response Cache",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
          "Blocks": [],
          "Tests": [
            "[-] Should cache and retrieve responses",
            "[-] Should handle TTL expiration",
            "[-] Should provide cache statistics"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 557757,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 55,
            "Microseconds": 775,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.455520833333333E-07,
            "TotalHours": 1.549325E-05,
            "TotalMilliseconds": 55.7757,
            "TotalMicroseconds": 55775.7,
            "TotalNanoseconds": 55775700.0,
            "TotalMinutes": 0.000929595,
            "TotalSeconds": 0.0557757
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 6,
            "PassedCount": 0,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:02.5731901",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.8567353-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1104343",
            "UserDuration": "00:00:02.4627558",
            "OwnDuration": "00:00:02.4341397",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 425,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0de2609b-7ecf-4fcc-b3d8-ce27d3f00545",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should cache and retrieve responses",
            "[-] Should handle TTL expiration",
            "[-] Should provide cache statistics"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.2749456-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 534179,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 53,
            "Microseconds": 417,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.182627314814815E-07,
            "TotalHours": 1.4838305555555556E-05,
            "TotalMilliseconds": 53.4179,
            "TotalMicroseconds": 53417.9,
            "TotalNanoseconds": 53417900.0,
            "TotalMinutes": 0.0008902983333333334,
            "TotalSeconds": 0.0534179
          },
          "UserDuration": {
            "Ticks": 23578,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 2,
            "Microseconds": 357,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.7289351851851853E-08,
            "TotalHours": 6.549444444444445E-07,
            "TotalMilliseconds": 2.3578,
            "TotalMicroseconds": 2357.8,
            "TotalNanoseconds": 2357800.0,
            "TotalMinutes": 3.9296666666666666E-05,
            "TotalSeconds": 0.0023578
          },
          "OwnDuration": {
            "Ticks": 557757,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 55,
            "Microseconds": 775,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.455520833333333E-07,
            "TotalHours": 1.549325E-05,
            "TotalMilliseconds": 55.7757,
            "TotalMicroseconds": 55775.7,
            "TotalNanoseconds": 55775700.0,
            "TotalMinutes": 0.000929595,
            "TotalSeconds": 0.0557757
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0ea067c2-0220-4bb3-bd45-894af95956a3",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 549,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 581,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate PowerShell documentation templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should generate PowerShell documentation templates"
        ],
        "Data": null,
        "ExpandedName": "Should generate PowerShell documentation templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate PowerShell documentation templates",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 35429,
            "Length": 523,
            "StartLine": 650,
            "StartColumn": 140,
            "EndLine": 658,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "e2eb0bda-d9a7-4add-bb8a-4c32af7eccd3",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Result": "Failed",
          "FailedCount": 5,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 73185,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 7,
            "Microseconds": 318,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.470486111111111E-08,
            "TotalHours": 2.0329166666666668E-06,
            "TotalMilliseconds": 7.3185,
            "TotalMicroseconds": 7318.5,
            "TotalNanoseconds": 7318500.0,
            "TotalMinutes": 0.000121975,
            "TotalSeconds": 0.0073185
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[-] Language-Specific Templates [-] Automation Triggers",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:02.6240217",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($templateModulePaths -and $templateModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-Templates] Testing availability for $($templateModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $templateModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-Templates] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-Templates] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-Templates] ERROR: templateModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Language-Specific Templates [-] Automation Triggers",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:39.2883087-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1295474",
            "UserDuration": "00:00:02.4944743",
            "OwnDuration": "00:00:02.6014926",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($templateModulePaths -and $templateModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-Templates] Testing availability for $($templateModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $templateModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-Templates] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-Templates] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-Templates] ERROR: templateModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 597,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e2b490e5-fc4a-4142-9693-fc3c85e7c933",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.3194679-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 66028,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 6,
            "Microseconds": 602,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 7.64212962962963E-08,
            "TotalHours": 1.8341111111111111E-06,
            "TotalMilliseconds": 6.6028,
            "TotalMicroseconds": 6602.8,
            "TotalNanoseconds": 6602800.0,
            "TotalMinutes": 0.00011004666666666666,
            "TotalSeconds": 0.0066028
          },
          "UserDuration": {
            "Ticks": 7157,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 715,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.283564814814815E-09,
            "TotalHours": 1.9880555555555556E-07,
            "TotalMilliseconds": 0.7157,
            "TotalMicroseconds": 715.7,
            "TotalNanoseconds": 715700.0,
            "TotalMinutes": 1.1928333333333334E-05,
            "TotalSeconds": 0.0007157
          },
          "OwnDuration": {
            "Ticks": 73185,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 7,
            "Microseconds": 318,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.470486111111111E-08,
            "TotalHours": 2.0329166666666668E-06,
            "TotalMilliseconds": 7.3185,
            "TotalMicroseconds": 7318.5,
            "TotalNanoseconds": 7318500.0,
            "TotalMinutes": 0.000121975,
            "TotalSeconds": 0.0073185
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e53643a8-6890-49a5-b3bb-487df2abc1b0",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 643,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 5,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 650,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate Python documentation templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should generate Python documentation templates"
        ],
        "Data": null,
        "ExpandedName": "Should generate Python documentation templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate Python documentation templates",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 36103,
            "Length": 508,
            "StartLine": 660,
            "StartColumn": 136,
            "EndLine": 668,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "d3e572e7-b517-4403-9b41-6f9dcf95cd8d",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Result": "Failed",
          "FailedCount": 5,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 73185,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 7,
            "Microseconds": 318,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.470486111111111E-08,
            "TotalHours": 2.0329166666666668E-06,
            "TotalMilliseconds": 7.3185,
            "TotalMicroseconds": 7318.5,
            "TotalNanoseconds": 7318500.0,
            "TotalMinutes": 0.000121975,
            "TotalSeconds": 0.0073185
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[-] Language-Specific Templates [-] Automation Triggers",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:02.6240217",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($templateModulePaths -and $templateModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-Templates] Testing availability for $($templateModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $templateModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-Templates] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-Templates] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-Templates] ERROR: templateModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Language-Specific Templates [-] Automation Triggers",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:39.2883087-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1295474",
            "UserDuration": "00:00:02.4944743",
            "OwnDuration": "00:00:02.6014926",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($templateModulePaths -and $templateModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-Templates] Testing availability for $($templateModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $templateModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-Templates] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-Templates] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-Templates] ERROR: templateModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 597,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e2b490e5-fc4a-4142-9693-fc3c85e7c933",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.3194679-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 66028,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 6,
            "Microseconds": 602,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 7.64212962962963E-08,
            "TotalHours": 1.8341111111111111E-06,
            "TotalMilliseconds": 6.6028,
            "TotalMicroseconds": 6602.8,
            "TotalNanoseconds": 6602800.0,
            "TotalMinutes": 0.00011004666666666666,
            "TotalSeconds": 0.0066028
          },
          "UserDuration": {
            "Ticks": 7157,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 715,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.283564814814815E-09,
            "TotalHours": 1.9880555555555556E-07,
            "TotalMilliseconds": 0.7157,
            "TotalMicroseconds": 715.7,
            "TotalNanoseconds": 715700.0,
            "TotalMinutes": 1.1928333333333334E-05,
            "TotalSeconds": 0.0007157
          },
          "OwnDuration": {
            "Ticks": 73185,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 7,
            "Microseconds": 318,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.470486111111111E-08,
            "TotalHours": 2.0329166666666668E-06,
            "TotalMilliseconds": 7.3185,
            "TotalMicroseconds": 7318.5,
            "TotalNanoseconds": 7318500.0,
            "TotalMinutes": 0.000121975,
            "TotalSeconds": 0.0073185
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e53643a8-6890-49a5-b3bb-487df2abc1b0",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 643,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 5,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 660,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate C# documentation templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should generate C# documentation templates"
        ],
        "Data": null,
        "ExpandedName": "Should generate C# documentation templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate C# documentation templates",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }",
            "Type": 19,
            "Start": 36758,
            "Length": 523,
            "StartLine": 670,
            "StartColumn": 132,
            "EndLine": 678,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "9314d4a4-8e30-47ff-a19c-8f6a530e008f",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Result": "Failed",
          "FailedCount": 5,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 73185,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 7,
            "Microseconds": 318,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.470486111111111E-08,
            "TotalHours": 2.0329166666666668E-06,
            "TotalMilliseconds": 7.3185,
            "TotalMicroseconds": 7318.5,
            "TotalNanoseconds": 7318500.0,
            "TotalMinutes": 0.000121975,
            "TotalSeconds": 0.0073185
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[-] Language-Specific Templates [-] Automation Triggers",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:02.6240217",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($templateModulePaths -and $templateModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-Templates] Testing availability for $($templateModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $templateModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-Templates] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-Templates] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-Templates] ERROR: templateModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Language-Specific Templates [-] Automation Triggers",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:39.2883087-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1295474",
            "UserDuration": "00:00:02.4944743",
            "OwnDuration": "00:00:02.6014926",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($templateModulePaths -and $templateModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-Templates] Testing availability for $($templateModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $templateModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-Templates] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-Templates] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-Templates] ERROR: templateModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 597,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e2b490e5-fc4a-4142-9693-fc3c85e7c933",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.3194679-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 66028,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 6,
            "Microseconds": 602,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 7.64212962962963E-08,
            "TotalHours": 1.8341111111111111E-06,
            "TotalMilliseconds": 6.6028,
            "TotalMicroseconds": 6602.8,
            "TotalNanoseconds": 6602800.0,
            "TotalMinutes": 0.00011004666666666666,
            "TotalSeconds": 0.0066028
          },
          "UserDuration": {
            "Ticks": 7157,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 715,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.283564814814815E-09,
            "TotalHours": 1.9880555555555556E-07,
            "TotalMilliseconds": 0.7157,
            "TotalMicroseconds": 715.7,
            "TotalNanoseconds": 715700.0,
            "TotalMinutes": 1.1928333333333334E-05,
            "TotalSeconds": 0.0007157
          },
          "OwnDuration": {
            "Ticks": 73185,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 7,
            "Microseconds": 318,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.470486111111111E-08,
            "TotalHours": 2.0329166666666668E-06,
            "TotalMilliseconds": 7.3185,
            "TotalMicroseconds": 7318.5,
            "TotalNanoseconds": 7318500.0,
            "TotalMinutes": 0.000121975,
            "TotalSeconds": 0.0073185
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e53643a8-6890-49a5-b3bb-487df2abc1b0",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 643,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 5,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 670,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate JavaScript documentation templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should generate JavaScript documentation templates"
        ],
        "Data": null,
        "ExpandedName": "Should generate JavaScript documentation templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate JavaScript documentation templates",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 37436,
            "Length": 568,
            "StartLine": 680,
            "StartColumn": 140,
            "EndLine": 689,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "d0c2bf3f-e3c9-4445-bd23-5d3fb9044459",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Result": "Failed",
          "FailedCount": 5,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 73185,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 7,
            "Microseconds": 318,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.470486111111111E-08,
            "TotalHours": 2.0329166666666668E-06,
            "TotalMilliseconds": 7.3185,
            "TotalMicroseconds": 7318.5,
            "TotalNanoseconds": 7318500.0,
            "TotalMinutes": 0.000121975,
            "TotalSeconds": 0.0073185
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[-] Language-Specific Templates [-] Automation Triggers",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:02.6240217",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($templateModulePaths -and $templateModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-Templates] Testing availability for $($templateModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $templateModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-Templates] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-Templates] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-Templates] ERROR: templateModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Language-Specific Templates [-] Automation Triggers",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:39.2883087-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1295474",
            "UserDuration": "00:00:02.4944743",
            "OwnDuration": "00:00:02.6014926",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($templateModulePaths -and $templateModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-Templates] Testing availability for $($templateModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $templateModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-Templates] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-Templates] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-Templates] ERROR: templateModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 597,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e2b490e5-fc4a-4142-9693-fc3c85e7c933",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.3194679-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 66028,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 6,
            "Microseconds": 602,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 7.64212962962963E-08,
            "TotalHours": 1.8341111111111111E-06,
            "TotalMilliseconds": 6.6028,
            "TotalMicroseconds": 6602.8,
            "TotalNanoseconds": 6602800.0,
            "TotalMinutes": 0.00011004666666666666,
            "TotalSeconds": 0.0066028
          },
          "UserDuration": {
            "Ticks": 7157,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 715,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.283564814814815E-09,
            "TotalHours": 1.9880555555555556E-07,
            "TotalMilliseconds": 0.7157,
            "TotalMicroseconds": 715.7,
            "TotalNanoseconds": 715700.0,
            "TotalMinutes": 1.1928333333333334E-05,
            "TotalSeconds": 0.0007157
          },
          "OwnDuration": {
            "Ticks": 73185,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 7,
            "Microseconds": 318,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.470486111111111E-08,
            "TotalHours": 2.0329166666666668E-06,
            "TotalMilliseconds": 7.3185,
            "TotalMicroseconds": 7318.5,
            "TotalNanoseconds": 7318500.0,
            "TotalMinutes": 0.000121975,
            "TotalSeconds": 0.0073185
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e53643a8-6890-49a5-b3bb-487df2abc1b0",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 643,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 5,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 680,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should detect language from file extensions",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should detect language from file extensions"
        ],
        "Data": null,
        "ExpandedName": "Should detect language from file extensions",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should detect language from file extensions",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 38152,
            "Length": 581,
            "StartLine": 691,
            "StartColumn": 133,
            "EndLine": 699,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "910f5fab-ca74-45d9-9679-fb925b38bdd5",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Result": "Failed",
          "FailedCount": 5,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 73185,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 7,
            "Microseconds": 318,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.470486111111111E-08,
            "TotalHours": 2.0329166666666668E-06,
            "TotalMilliseconds": 7.3185,
            "TotalMicroseconds": 7318.5,
            "TotalNanoseconds": 7318500.0,
            "TotalMinutes": 0.000121975,
            "TotalSeconds": 0.0073185
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[-] Language-Specific Templates [-] Automation Triggers",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:02.6240217",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($templateModulePaths -and $templateModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-Templates] Testing availability for $($templateModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $templateModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-Templates] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-Templates] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-Templates] ERROR: templateModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Language-Specific Templates [-] Automation Triggers",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:39.2883087-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1295474",
            "UserDuration": "00:00:02.4944743",
            "OwnDuration": "00:00:02.6014926",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($templateModulePaths -and $templateModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-Templates] Testing availability for $($templateModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $templateModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-Templates] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-Templates] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-Templates] ERROR: templateModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 597,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e2b490e5-fc4a-4142-9693-fc3c85e7c933",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.3194679-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 66028,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 6,
            "Microseconds": 602,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 7.64212962962963E-08,
            "TotalHours": 1.8341111111111111E-06,
            "TotalMilliseconds": 6.6028,
            "TotalMicroseconds": 6602.8,
            "TotalNanoseconds": 6602800.0,
            "TotalMinutes": 0.00011004666666666666,
            "TotalSeconds": 0.0066028
          },
          "UserDuration": {
            "Ticks": 7157,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 715,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.283564814814815E-09,
            "TotalHours": 1.9880555555555556E-07,
            "TotalMilliseconds": 0.7157,
            "TotalMicroseconds": 715.7,
            "TotalNanoseconds": 715700.0,
            "TotalMinutes": 1.1928333333333334E-05,
            "TotalSeconds": 0.0007157
          },
          "OwnDuration": {
            "Ticks": 73185,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 7,
            "Microseconds": 318,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.470486111111111E-08,
            "TotalHours": 2.0329166666666668E-06,
            "TotalMilliseconds": 7.3185,
            "TotalMicroseconds": 7318.5,
            "TotalNanoseconds": 7318500.0,
            "TotalMinutes": 0.000121975,
            "TotalSeconds": 0.0073185
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e53643a8-6890-49a5-b3bb-487df2abc1b0",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 643,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 5,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 691,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should initialize documentation triggers",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Automation Triggers",
          "Should initialize documentation triggers"
        ],
        "Data": null,
        "ExpandedName": "Should initialize documentation triggers",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should initialize documentation triggers",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }",
            "Type": 19,
            "Start": 39186,
            "Length": 235,
            "StartLine": 709,
            "StartColumn": 131,
            "EndLine": 714,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "b556afe0-65d4-4f6e-bf9f-a74293663ffa",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Automation Triggers",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Automation Triggers"
          ],
          "Data": null,
          "ExpandedName": "Automation Triggers",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers",
          "Blocks": [],
          "Tests": [
            "[-] Should initialize documentation triggers",
            "[-] Should log trigger activity"
          ],
          "Result": "Failed",
          "FailedCount": 2,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 152106,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 15,
            "Microseconds": 210,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.7604861111111112E-07,
            "TotalHours": 4.225166666666666E-06,
            "TotalMilliseconds": 15.2106,
            "TotalMicroseconds": 15210.6,
            "TotalNanoseconds": 15210600.0,
            "TotalMinutes": 0.00025351,
            "TotalSeconds": 0.0152106
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[-] Language-Specific Templates [-] Automation Triggers",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:02.6240217",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($templateModulePaths -and $templateModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-Templates] Testing availability for $($templateModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $templateModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-Templates] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-Templates] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-Templates] ERROR: templateModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Language-Specific Templates [-] Automation Triggers",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:39.2883087-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1295474",
            "UserDuration": "00:00:02.4944743",
            "OwnDuration": "00:00:02.6014926",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($templateModulePaths -and $templateModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-Templates] Testing availability for $($templateModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $templateModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-Templates] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-Templates] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-Templates] ERROR: templateModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 597,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "26ca46cc-c279-4971-be3e-fde80f44d189",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should initialize documentation triggers",
            "[-] Should log trigger activity"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.3267849-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 138611,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 13,
            "Microseconds": 861,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.6042939814814815E-07,
            "TotalHours": 3.8503055555555555E-06,
            "TotalMilliseconds": 13.8611,
            "TotalMicroseconds": 13861.1,
            "TotalNanoseconds": 13861100.0,
            "TotalMinutes": 0.00023101833333333334,
            "TotalSeconds": 0.0138611
          },
          "UserDuration": {
            "Ticks": 13495,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 1,
            "Microseconds": 349,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.5619212962962962E-08,
            "TotalHours": 3.748611111111111E-07,
            "TotalMilliseconds": 1.3495,
            "TotalMicroseconds": 1349.5,
            "TotalNanoseconds": 1349500.0,
            "TotalMinutes": 2.2491666666666667E-05,
            "TotalSeconds": 0.0013495
          },
          "OwnDuration": {
            "Ticks": 152106,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 15,
            "Microseconds": 210,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.7604861111111112E-07,
            "TotalHours": 4.225166666666666E-06,
            "TotalMilliseconds": 15.2106,
            "TotalMicroseconds": 15210.6,
            "TotalNanoseconds": 15210600.0,
            "TotalMinutes": 0.00025351,
            "TotalSeconds": 0.0152106
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "542dc787-f877-4bb0-8fad-d7e55eeb8dad",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 702,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 2,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 709,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should log trigger activity",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Automation Triggers",
          "Should log trigger activity"
        ],
        "Data": null,
        "ExpandedName": "Should log trigger activity",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should log trigger activity",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }",
            "Type": 19,
            "Start": 39554,
            "Length": 710,
            "StartLine": 716,
            "StartColumn": 118,
            "EndLine": 731,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "bf7c42c6-45e3-49fc-843d-432c38de348e",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Automation Triggers",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Automation Triggers"
          ],
          "Data": null,
          "ExpandedName": "Automation Triggers",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers",
          "Blocks": [],
          "Tests": [
            "[-] Should initialize documentation triggers",
            "[-] Should log trigger activity"
          ],
          "Result": "Failed",
          "FailedCount": 2,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 152106,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 15,
            "Microseconds": 210,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.7604861111111112E-07,
            "TotalHours": 4.225166666666666E-06,
            "TotalMilliseconds": 15.2106,
            "TotalMicroseconds": 15210.6,
            "TotalNanoseconds": 15210600.0,
            "TotalMinutes": 0.00025351,
            "TotalSeconds": 0.0152106
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[-] Language-Specific Templates [-] Automation Triggers",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:02.6240217",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($templateModulePaths -and $templateModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-Templates] Testing availability for $($templateModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $templateModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-Templates] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-Templates] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-Templates] ERROR: templateModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Language-Specific Templates [-] Automation Triggers",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:39.2883087-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1295474",
            "UserDuration": "00:00:02.4944743",
            "OwnDuration": "00:00:02.6014926",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($templateModulePaths -and $templateModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-Templates] Testing availability for $($templateModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $templateModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-Templates] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-Templates] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-Templates] ERROR: templateModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 597,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "26ca46cc-c279-4971-be3e-fde80f44d189",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should initialize documentation triggers",
            "[-] Should log trigger activity"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.3267849-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 138611,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 13,
            "Microseconds": 861,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.6042939814814815E-07,
            "TotalHours": 3.8503055555555555E-06,
            "TotalMilliseconds": 13.8611,
            "TotalMicroseconds": 13861.1,
            "TotalNanoseconds": 13861100.0,
            "TotalMinutes": 0.00023101833333333334,
            "TotalSeconds": 0.0138611
          },
          "UserDuration": {
            "Ticks": 13495,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 1,
            "Microseconds": 349,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.5619212962962962E-08,
            "TotalHours": 3.748611111111111E-07,
            "TotalMilliseconds": 1.3495,
            "TotalMicroseconds": 1349.5,
            "TotalNanoseconds": 1349500.0,
            "TotalMinutes": 2.2491666666666667E-05,
            "TotalSeconds": 0.0013495
          },
          "OwnDuration": {
            "Ticks": 152106,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 15,
            "Microseconds": 210,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.7604861111111112E-07,
            "TotalHours": 4.225166666666666E-06,
            "TotalMilliseconds": 15.2106,
            "TotalMicroseconds": 15210.6,
            "TotalNanoseconds": 15210600.0,
            "TotalMinutes": 0.00025351,
            "TotalSeconds": 0.0152106
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "542dc787-f877-4bb0-8fad-d7e55eeb8dad",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 702,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 2,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 716,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should meet cache performance benchmarks",
        "Path": [
          "Enhanced Documentation System - Performance",
          "Cache Performance",
          "Should meet cache performance benchmarks"
        ],
        "Data": null,
        "ExpandedName": "Should meet cache performance benchmarks",
        "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should meet cache performance benchmarks",
        "Result": "Failed",
        "ErrorRecord": [
          {
            "Exception": "System.Management.Automation.CommandNotFoundException: The term 'New-PerformanceCache' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\n   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
            "TargetObject": "New-PerformanceCache",
            "CategoryInfo": "ObjectNotFound: (New-PerformanceCache:String) [], CommandNotFoundException",
            "FullyQualifiedErrorId": "CommandNotFoundException",
            "ErrorDetails": null,
            "InvocationInfo": "System.Management.Automation.InvocationInfo",
            "ScriptStackTrace": "at <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 784\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2157\r\nat Invoke-TestItem, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1199\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 835\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60",
            "PipelineIterationInfo": ""
          }
        ],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 307272,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 30,
          "Microseconds": 727,
          "Nanoseconds": 200,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.556388888888889E-07,
          "TotalHours": 8.535333333333333E-06,
          "TotalMilliseconds": 30.7272,
          "TotalMicroseconds": 30727.2,
          "TotalNanoseconds": 30727200.0,
          "TotalMinutes": 0.00051212,
          "TotalSeconds": 0.0307272
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }",
            "Type": 19,
            "Start": 43152,
            "Length": 841,
            "StartLine": 783,
            "StartColumn": 122,
            "EndLine": 803,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "d6033451-b997-4c8c-b3d7-698ca8242304",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }",
            "Parent": "{\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Cache Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "Cache Performance"
          ],
          "Data": null,
          "ExpandedName": "Cache Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance",
          "Blocks": [],
          "Tests": [
            "[-] Should meet cache performance benchmarks",
            "[-] Should handle cache warming efficiently"
          ],
          "Result": "Failed",
          "FailedCount": 2,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 558568,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 55,
            "Microseconds": 856,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.464907407407407E-07,
            "TotalHours": 1.5515777777777777E-05,
            "TotalMilliseconds": 55.8568,
            "TotalMicroseconds": 55856.8,
            "TotalNanoseconds": 55856800.0,
            "TotalMinutes": 0.0009309466666666666,
            "TotalSeconds": 0.0558568
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 3,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:04.4023146",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Passed": false,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:39.3391867-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1783972",
            "UserDuration": "00:00:04.2239174",
            "OwnDuration": "00:00:02.4730530",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 739,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should meet cache performance benchmarks",
            "[-] Should handle cache warming efficiently"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.3848329-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 186724,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 18,
            "Microseconds": 672,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.1611574074074075E-07,
            "TotalHours": 5.186777777777778E-06,
            "TotalMilliseconds": 18.6724,
            "TotalMicroseconds": 18672.4,
            "TotalNanoseconds": 18672400.0,
            "TotalMinutes": 0.00031120666666666666,
            "TotalSeconds": 0.0186724
          },
          "UserDuration": {
            "Ticks": 371844,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 37,
            "Microseconds": 184,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.30375E-07,
            "TotalHours": 1.0329E-05,
            "TotalMilliseconds": 37.1844,
            "TotalMicroseconds": 37184.4,
            "TotalNanoseconds": 37184400.0,
            "TotalMinutes": 0.00061974,
            "TotalSeconds": 0.0371844
          },
          "OwnDuration": {
            "Ticks": 61763,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 6,
            "Microseconds": 176,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 7.14849537037037E-08,
            "TotalHours": 1.7156388888888888E-06,
            "TotalMilliseconds": 6.1763,
            "TotalMicroseconds": 6176.3,
            "TotalNanoseconds": 6176300.0,
            "TotalMinutes": 0.00010293833333333333,
            "TotalSeconds": 0.0061763
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "31e410bb-bc7c-4f1c-8d17-b63458d59b16",
            "Ast": "{\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }"
          },
          "StartLine": 781,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 2,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 783,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:46:39.3860851-04:00",
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 216227,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 21,
          "Microseconds": 622,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.502627314814815E-07,
          "TotalHours": 6.006305555555556E-06,
          "TotalMilliseconds": 21.6227,
          "TotalMicroseconds": 21622.7,
          "TotalNanoseconds": 21622700.0,
          "TotalMinutes": 0.00036037833333333333,
          "TotalSeconds": 0.0216227
        },
        "FrameworkDuration": {
          "Ticks": 91045,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 9,
          "Microseconds": 104,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.053761574074074E-07,
          "TotalHours": 2.529027777777778E-06,
          "TotalMilliseconds": 9.1045,
          "TotalMicroseconds": 9104.5,
          "TotalNanoseconds": 9104500.0,
          "TotalMinutes": 0.00015174166666666666,
          "TotalSeconds": 0.0091045
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should handle cache warming efficiently",
        "Path": [
          "Enhanced Documentation System - Performance",
          "Cache Performance",
          "Should handle cache warming efficiently"
        ],
        "Data": null,
        "ExpandedName": "Should handle cache warming efficiently",
        "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should handle cache warming efficiently",
        "Result": "Failed",
        "ErrorRecord": [
          {
            "Exception": "System.Management.Automation.CommandNotFoundException: The term 'New-PerformanceCache' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\n   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
            "TargetObject": "New-PerformanceCache",
            "CategoryInfo": "ObjectNotFound: (New-PerformanceCache:String) [], CommandNotFoundException",
            "FullyQualifiedErrorId": "CommandNotFoundException",
            "ErrorDetails": null,
            "InvocationInfo": "System.Management.Automation.InvocationInfo",
            "ScriptStackTrace": "at <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 806\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2157\r\nat Invoke-TestItem, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1199\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 835\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60",
            "PipelineIterationInfo": ""
          }
        ],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 189533,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 18,
          "Microseconds": 953,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.1936689814814814E-07,
          "TotalHours": 5.264805555555555E-06,
          "TotalMilliseconds": 18.9533,
          "TotalMicroseconds": 18953.3,
          "TotalNanoseconds": 18953300.0,
          "TotalMinutes": 0.00031588833333333333,
          "TotalSeconds": 0.0189533
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }",
            "Type": 19,
            "Start": 44129,
            "Length": 640,
            "StartLine": 805,
            "StartColumn": 121,
            "EndLine": 816,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "79d19557-2eeb-44df-8f89-1494acea802c",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }",
            "Parent": "{\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Cache Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "Cache Performance"
          ],
          "Data": null,
          "ExpandedName": "Cache Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance",
          "Blocks": [],
          "Tests": [
            "[-] Should meet cache performance benchmarks",
            "[-] Should handle cache warming efficiently"
          ],
          "Result": "Failed",
          "FailedCount": 2,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 558568,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 55,
            "Microseconds": 856,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.464907407407407E-07,
            "TotalHours": 1.5515777777777777E-05,
            "TotalMilliseconds": 55.8568,
            "TotalMicroseconds": 55856.8,
            "TotalNanoseconds": 55856800.0,
            "TotalMinutes": 0.0009309466666666666,
            "TotalSeconds": 0.0558568
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 3,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:04.4023146",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Passed": false,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:39.3391867-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1783972",
            "UserDuration": "00:00:04.2239174",
            "OwnDuration": "00:00:02.4730530",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 739,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should meet cache performance benchmarks",
            "[-] Should handle cache warming efficiently"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.3848329-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 186724,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 18,
            "Microseconds": 672,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.1611574074074075E-07,
            "TotalHours": 5.186777777777778E-06,
            "TotalMilliseconds": 18.6724,
            "TotalMicroseconds": 18672.4,
            "TotalNanoseconds": 18672400.0,
            "TotalMinutes": 0.00031120666666666666,
            "TotalSeconds": 0.0186724
          },
          "UserDuration": {
            "Ticks": 371844,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 37,
            "Microseconds": 184,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.30375E-07,
            "TotalHours": 1.0329E-05,
            "TotalMilliseconds": 37.1844,
            "TotalMicroseconds": 37184.4,
            "TotalNanoseconds": 37184400.0,
            "TotalMinutes": 0.00061974,
            "TotalSeconds": 0.0371844
          },
          "OwnDuration": {
            "Ticks": 61763,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 6,
            "Microseconds": 176,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 7.14849537037037E-08,
            "TotalHours": 1.7156388888888888E-06,
            "TotalMilliseconds": 6.1763,
            "TotalMicroseconds": 6176.3,
            "TotalNanoseconds": 6176300.0,
            "TotalMinutes": 0.00010293833333333333,
            "TotalSeconds": 0.0061763
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "31e410bb-bc7c-4f1c-8d17-b63458d59b16",
            "Ast": "{\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }"
          },
          "StartLine": 781,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 2,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 805,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:46:39.4168867-04:00",
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 153837,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 15,
          "Microseconds": 383,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.7805208333333332E-07,
          "TotalHours": 4.27325E-06,
          "TotalMilliseconds": 15.3837,
          "TotalMicroseconds": 15383.7,
          "TotalNanoseconds": 15383700.0,
          "TotalMinutes": 0.000256395,
          "TotalSeconds": 0.0153837
        },
        "FrameworkDuration": {
          "Ticks": 35696,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 3,
          "Microseconds": 569,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.1314814814814815E-08,
          "TotalHours": 9.915555555555556E-07,
          "TotalMilliseconds": 3.5696,
          "TotalMicroseconds": 3569.6,
          "TotalNanoseconds": 3569600.0,
          "TotalMinutes": 5.9493333333333335E-05,
          "TotalSeconds": 0.0035696
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should demonstrate parallel processing benefits",
        "Path": [
          "Enhanced Documentation System - Performance",
          "Parallel Processing Performance",
          "Should demonstrate parallel processing benefits"
        ],
        "Data": null,
        "ExpandedName": "Should demonstrate parallel processing benefits",
        "ExpandedPath": "Enhanced Documentation System - Performance.Parallel Processing Performance.Should demonstrate parallel processing benefits",
        "Result": "Failed",
        "ErrorRecord": [
          {
            "Exception": "System.Exception: Expected the actual value to be less than 403.0951, but got 680.5131.",
            "TargetObject": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "CategoryInfo": "InvalidResult: (System.Collections.…ring,System.Object]:Dictionary`2) [], Exception",
            "FullyQualifiedErrorId": "PesterAssertionFailed",
            "ErrorDetails": null,
            "InvocationInfo": "System.Management.Automation.InvocationInfo",
            "ScriptStackTrace": "at Invoke-Assertion, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 8250\r\nat Should<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 8193\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 924\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2157\r\nat Invoke-TestItem, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1199\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 835\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60",
            "PipelineIterationInfo": ""
          }
        ],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 15123201,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 512,
          "Microseconds": 320,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 1,
          "TotalDays": 1.750370486111111E-05,
          "TotalHours": 0.00042008891666666667,
          "TotalMilliseconds": 1512.3201,
          "TotalMicroseconds": 1512320.1,
          "TotalNanoseconds": 1512320100.0,
          "TotalMinutes": 0.025205335,
          "TotalSeconds": 1.5123201
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }",
            "Type": 19,
            "Start": 48797,
            "Length": 1070,
            "StartLine": 905,
            "StartColumn": 130,
            "EndLine": 925,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "a5664aac-4fc4-4d27-a295-8a52da871e52",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }",
            "Parent": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Parallel Processing Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "Parallel Processing Performance"
          ],
          "Data": null,
          "ExpandedName": "Parallel Processing Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.Parallel Processing Performance",
          "Blocks": [],
          "Tests": [
            "[-] Should demonstrate parallel processing benefits"
          ],
          "Result": "Failed",
          "FailedCount": 1,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 1,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 16958313,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 695,
            "Microseconds": 831,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 1,
            "TotalDays": 1.9627677083333333E-05,
            "TotalHours": 0.00047106425,
            "TotalMilliseconds": 1695.8313,
            "TotalMicroseconds": 1695831.3,
            "TotalNanoseconds": 1695831300.0,
            "TotalMinutes": 0.028263855,
            "TotalSeconds": 1.6958313
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 3,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:04.4023146",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Passed": false,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:39.3391867-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1783972",
            "UserDuration": "00:00:04.2239174",
            "OwnDuration": "00:00:02.4730530",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 739,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should demonstrate parallel processing benefits"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.5624052-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 430819,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 43,
            "Microseconds": 81,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.986331018518518E-07,
            "TotalHours": 1.1967194444444445E-05,
            "TotalMilliseconds": 43.0819,
            "TotalMicroseconds": 43081.9,
            "TotalNanoseconds": 43081900.0,
            "TotalMinutes": 0.0007180316666666667,
            "TotalSeconds": 0.0430819
          },
          "UserDuration": {
            "Ticks": 16527494,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 652,
            "Microseconds": 749,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 1,
            "TotalDays": 1.912904398148148E-05,
            "TotalHours": 0.00045909705555555554,
            "TotalMilliseconds": 1652.7494,
            "TotalMicroseconds": 1652749.4,
            "TotalNanoseconds": 1652749400.0,
            "TotalMinutes": 0.027545823333333334,
            "TotalSeconds": 1.6527494
          },
          "OwnDuration": {
            "Ticks": 1835112,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 183,
            "Microseconds": 511,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.123972222222222E-06,
            "TotalHours": 5.097533333333333E-05,
            "TotalMilliseconds": 183.5112,
            "TotalMicroseconds": 183511.2,
            "TotalNanoseconds": 183511200.0,
            "TotalMinutes": 0.00305852,
            "TotalSeconds": 0.1835112
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b635d68a-77fe-4913-9cfa-0372621b2a90",
            "Ast": "{\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }"
          },
          "StartLine": 903,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 1,
          "OwnPassedCount": 0,
          "OwnFailedCount": 1,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 905,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:46:39.5635945-04:00",
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 15001840,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 500,
          "Microseconds": 184,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 1,
          "TotalDays": 1.736324074074074E-05,
          "TotalHours": 0.00041671777777777777,
          "TotalMilliseconds": 1500.184,
          "TotalMicroseconds": 1500184.0,
          "TotalNanoseconds": 1500184000.0,
          "TotalMinutes": 0.025003066666666667,
          "TotalSeconds": 1.500184
        },
        "FrameworkDuration": {
          "Ticks": 121361,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 12,
          "Microseconds": 136,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.4046412037037036E-07,
          "TotalHours": 3.371138888888889E-06,
          "TotalMilliseconds": 12.1361,
          "TotalMicroseconds": 12136.1,
          "TotalNanoseconds": 12136100.0,
          "TotalMinutes": 0.00020226833333333334,
          "TotalSeconds": 0.0121361
        },
        "PluginData": null,
        "FrameworkData": null
      }
    ],
    "FailedBlocks": [
      {
        "Name": "Enhanced Documentation System - CPG Components",
        "Path": [
          "Enhanced Documentation System - CPG Components"
        ],
        "Data": null,
        "ExpandedName": "Enhanced Documentation System - CPG Components",
        "ExpandedPath": "Enhanced Documentation System - CPG Components",
        "Blocks": [
          {
            "Name": "Thread-Safe Operations",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations",
            "Data": null,
            "ExpandedName": "Thread-Safe Operations",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
            "Blocks": "",
            "Tests": "[-] Should create thread-safe CPG wrapper [-] Should handle concurrent operations safely [-] Should provide thread safety statistics",
            "Result": "Failed",
            "FailedCount": 3,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 3,
            "ErrorRecord": "",
            "Duration": "00:00:00",
            "Id": "",
            "GroupId": "",
            "Tag": "",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[-] Enhanced Documentation System - CPG Components",
            "EachTestSetup": null,
            "OneTimeTestSetup": null,
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Should create thread-safe CPG wrapper [-] Should handle concurrent operations safely [-] Should provide thread safety statistics",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": false,
            "ExecutedAt": "0001-01-01T00:00:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "UserDuration": "00:00:00",
            "OwnDuration": "00:00:00",
            "ScriptBlock": "\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        ",
            "StartLine": 297,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 3,
            "OwnPassedCount": 0,
            "OwnFailedCount": 3,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          {
            "Name": "Call Graph Builder",
            "Path": "Enhanced Documentation System - CPG Components Call Graph Builder",
            "Data": null,
            "ExpandedName": "Call Graph Builder",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder",
            "Blocks": "",
            "Tests": "[-] Should build call graphs from source code [-] Should detect recursive calls",
            "Result": "Failed",
            "FailedCount": 2,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 2,
            "ErrorRecord": "",
            "Duration": "00:00:00",
            "Id": "",
            "GroupId": "",
            "Tag": "",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[-] Enhanced Documentation System - CPG Components",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Should build call graphs from source code [-] Should detect recursive calls",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": false,
            "ExecutedAt": "0001-01-01T00:00:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "UserDuration": "00:00:00",
            "OwnDuration": "00:00:00",
            "ScriptBlock": "\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        ",
            "StartLine": 337,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 2,
            "OwnPassedCount": 0,
            "OwnFailedCount": 2,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          {
            "Name": "Data Flow Tracker",
            "Path": "Enhanced Documentation System - CPG Components Data Flow Tracker",
            "Data": null,
            "ExpandedName": "Data Flow Tracker",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker",
            "Blocks": "",
            "Tests": "[-] Should track variable definitions and uses [-] Should perform taint analysis",
            "Result": "Failed",
            "FailedCount": 2,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 2,
            "ErrorRecord": "",
            "Duration": "00:00:00",
            "Id": "",
            "GroupId": "",
            "Tag": "",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[-] Enhanced Documentation System - CPG Components",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Should track variable definitions and uses [-] Should perform taint analysis",
            "Passed": false,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": false,
            "ExecutedAt": "0001-01-01T00:00:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "UserDuration": "00:00:00",
            "OwnDuration": "00:00:00",
            "ScriptBlock": "\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        ",
            "StartLine": 384,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 2,
            "OwnPassedCount": 0,
            "OwnFailedCount": 2,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          }
        ],
        "Tests": [],
        "Result": "Failed",
        "FailedCount": 7,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 7,
        "ErrorRecord": [
          {
            "Exception": "System.Management.Automation.RuntimeException: You cannot call a method on a null-valued expression.\r\n   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
            "TargetObject": null,
            "CategoryInfo": "InvalidOperation: (:) [], RuntimeException",
            "FullyQualifiedErrorId": "InvokeMethodOnNull",
            "ErrorDetails": null,
            "InvocationInfo": "System.Management.Automation.InvocationInfo",
            "ScriptStackTrace": "at <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 285\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1975\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60",
            "PipelineIterationInfo": ""
          }
        ],
        "Duration": {
          "Ticks": 1416270,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 141,
          "Microseconds": 627,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.639201388888889E-06,
          "TotalHours": 3.9340833333333335E-05,
          "TotalMilliseconds": 141.627,
          "TotalMicroseconds": 141627.0,
          "TotalNanoseconds": 141627000.0,
          "TotalMinutes": 0.00236045,
          "TotalSeconds": 0.141627
        },
        "Id": "",
        "GroupId": "",
        "Tag": [
          "CPG",
          "Core"
        ],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 50196,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T20:43:17.6686205-04:00",
            "CreationTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LastAccessTime": "2025-08-28T20:44:27.0013384-04:00",
            "LastAccessTimeUtc": "2025-08-29T00:44:27.0013384Z",
            "LastWriteTime": "2025-08-28T20:43:17.6686205-04:00",
            "LastWriteTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 23,
          "PassedCount": 2,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 46809013,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 680,
            "Microseconds": 901,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.417709837962963E-05,
            "TotalHours": 0.001300250361111111,
            "TotalMilliseconds": 4680.9013,
            "TotalMicroseconds": 4680901.3,
            "TotalNanoseconds": 4680901300.0,
            "TotalMinutes": 0.07801502166666667,
            "TotalSeconds": 4.6809013
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_987e9a83-43a0-4852-b50b-7810e03bd040",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "27908d1f-3444-4a7c-aad4-e951b25f7123",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1199199,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 119,
            "Microseconds": 919,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3879618055555555E-06,
            "TotalHours": 3.331108333333333E-05,
            "TotalMilliseconds": 119.9199,
            "TotalMicroseconds": 119919.9,
            "TotalNanoseconds": 119919900.0,
            "TotalMinutes": 0.001998665,
            "TotalSeconds": 0.1199199
          },
          "FrameworkDuration": {
            "Ticks": 3338424,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 333,
            "Microseconds": 842,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.863916666666666E-06,
            "TotalHours": 9.2734E-05,
            "TotalMilliseconds": 333.8424,
            "TotalMicroseconds": 333842.4,
            "TotalNanoseconds": 333842400.0,
            "TotalMinutes": 0.00556404,
            "TotalSeconds": 0.3338424
          },
          "UserDuration": {
            "Ticks": 42271390,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 227,
            "Microseconds": 139,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.8925219907407405E-05,
            "TotalHours": 0.0011742052777777778,
            "TotalMilliseconds": 4227.139,
            "TotalMicroseconds": 4227139.0,
            "TotalNanoseconds": 4227139000.0,
            "TotalMinutes": 0.07045231666666667,
            "TotalSeconds": 4.227139
          },
          "OwnDuration": {
            "Ticks": -50602521,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -60,
            "Microseconds": -252,
            "Nanoseconds": -100,
            "Minutes": 0,
            "Seconds": -5,
            "TotalDays": -5.856773263888889E-05,
            "TotalHours": -0.0014056255833333334,
            "TotalMilliseconds": -5060.2521,
            "TotalMicroseconds": -5060252.1,
            "TotalNanoseconds": -5060252100.0,
            "TotalMinutes": -0.084337535,
            "TotalSeconds": -5.0602521
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "00f170e2-f378-4dc1-850d-470bbf038648",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable",
            "Mock": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 23,
          "PassedCount": 2,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 46809013,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 680,
            "Microseconds": 901,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.417709837962963E-05,
            "TotalHours": 0.001300250361111111,
            "TotalMilliseconds": 4680.9013,
            "TotalMicroseconds": 4680901.3,
            "TotalNanoseconds": 4680901300.0,
            "TotalMinutes": 0.07801502166666667,
            "TotalSeconds": 4.6809013
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_987e9a83-43a0-4852-b50b-7810e03bd040",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "27908d1f-3444-4a7c-aad4-e951b25f7123",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1199199,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 119,
            "Microseconds": 919,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3879618055555555E-06,
            "TotalHours": 3.331108333333333E-05,
            "TotalMilliseconds": 119.9199,
            "TotalMicroseconds": 119919.9,
            "TotalNanoseconds": 119919900.0,
            "TotalMinutes": 0.001998665,
            "TotalSeconds": 0.1199199
          },
          "FrameworkDuration": {
            "Ticks": 3338424,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 333,
            "Microseconds": 842,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.863916666666666E-06,
            "TotalHours": 9.2734E-05,
            "TotalMilliseconds": 333.8424,
            "TotalMicroseconds": 333842.4,
            "TotalNanoseconds": 333842400.0,
            "TotalMinutes": 0.00556404,
            "TotalSeconds": 0.3338424
          },
          "UserDuration": {
            "Ticks": 42271390,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 227,
            "Microseconds": 139,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.8925219907407405E-05,
            "TotalHours": 0.0011742052777777778,
            "TotalMilliseconds": 4227.139,
            "TotalMicroseconds": 4227139.0,
            "TotalNanoseconds": 4227139000.0,
            "TotalMinutes": 0.07045231666666667,
            "TotalSeconds": 4.227139
          },
          "OwnDuration": {
            "Ticks": -50602521,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -60,
            "Microseconds": -252,
            "Nanoseconds": -100,
            "Minutes": 0,
            "Seconds": -5,
            "TotalDays": -5.856773263888889E-05,
            "TotalHours": -0.0014056255833333334,
            "TotalMilliseconds": -5060.2521,
            "TotalMicroseconds": -5060252.1,
            "TotalNanoseconds": -5060252100.0,
            "TotalMinutes": -0.084337535,
            "TotalSeconds": -5.0602521
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "00f170e2-f378-4dc1-850d-470bbf038648",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable",
            "Mock": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }",
            "Type": 19,
            "Start": 11718,
            "Length": 5359,
            "StartLine": 220,
            "StartColumn": 19,
            "EndLine": 295,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "2f84a03c-92b0-487f-a6ea-2a0d0b00bc48",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }",
            "Parent": "{\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }"
          }
        },
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Thread-Safe Operations",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations",
            "Data": null,
            "ExpandedName": "Thread-Safe Operations",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
            "Blocks": "",
            "Tests": "[-] Should create thread-safe CPG wrapper [-] Should handle concurrent operations safely [-] Should provide thread safety statistics",
            "Result": "Failed",
            "FailedCount": 3,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 3,
            "ErrorRecord": "",
            "Duration": "00:00:00",
            "Id": "",
            "GroupId": "",
            "Tag": "",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[-] Enhanced Documentation System - CPG Components",
            "EachTestSetup": null,
            "OneTimeTestSetup": null,
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Should create thread-safe CPG wrapper [-] Should handle concurrent operations safely [-] Should provide thread safety statistics",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": false,
            "ExecutedAt": "0001-01-01T00:00:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "UserDuration": "00:00:00",
            "OwnDuration": "00:00:00",
            "ScriptBlock": "\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        ",
            "StartLine": 297,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 3,
            "OwnPassedCount": 0,
            "OwnFailedCount": 3,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          {
            "Name": "Call Graph Builder",
            "Path": "Enhanced Documentation System - CPG Components Call Graph Builder",
            "Data": null,
            "ExpandedName": "Call Graph Builder",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder",
            "Blocks": "",
            "Tests": "[-] Should build call graphs from source code [-] Should detect recursive calls",
            "Result": "Failed",
            "FailedCount": 2,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 2,
            "ErrorRecord": "",
            "Duration": "00:00:00",
            "Id": "",
            "GroupId": "",
            "Tag": "",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[-] Enhanced Documentation System - CPG Components",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Should build call graphs from source code [-] Should detect recursive calls",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": false,
            "ExecutedAt": "0001-01-01T00:00:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "UserDuration": "00:00:00",
            "OwnDuration": "00:00:00",
            "ScriptBlock": "\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        ",
            "StartLine": 337,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 2,
            "OwnPassedCount": 0,
            "OwnFailedCount": 2,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          {
            "Name": "Data Flow Tracker",
            "Path": "Enhanced Documentation System - CPG Components Data Flow Tracker",
            "Data": null,
            "ExpandedName": "Data Flow Tracker",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker",
            "Blocks": "",
            "Tests": "[-] Should track variable definitions and uses [-] Should perform taint analysis",
            "Result": "Failed",
            "FailedCount": 2,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 2,
            "ErrorRecord": "",
            "Duration": "00:00:00",
            "Id": "",
            "GroupId": "",
            "Tag": "",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[-] Enhanced Documentation System - CPG Components",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Should track variable definitions and uses [-] Should perform taint analysis",
            "Passed": false,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": false,
            "ExecutedAt": "0001-01-01T00:00:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "UserDuration": "00:00:00",
            "OwnDuration": "00:00:00",
            "ScriptBlock": "\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        ",
            "StartLine": 384,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 2,
            "OwnPassedCount": 0,
            "OwnFailedCount": 2,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          }
        ],
        "Passed": false,
        "First": true,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:46:36.7151048-04:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 519900,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 51,
          "Microseconds": 990,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.017361111111111E-07,
          "TotalHours": 1.4441666666666666E-05,
          "TotalMilliseconds": 51.99,
          "TotalMicroseconds": 51990.0,
          "TotalNanoseconds": 51990000.0,
          "TotalMinutes": 0.0008665,
          "TotalSeconds": 0.05199
        },
        "UserDuration": {
          "Ticks": 896370,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 89,
          "Microseconds": 637,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.0374652777777778E-06,
          "TotalHours": 2.4899166666666667E-05,
          "TotalMilliseconds": 89.637,
          "TotalMicroseconds": 89637.0,
          "TotalNanoseconds": 89637000.0,
          "TotalMinutes": 0.00149395,
          "TotalSeconds": 0.089637
        },
        "OwnDuration": {
          "Ticks": 1416270,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 141,
          "Microseconds": 627,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.639201388888889E-06,
          "TotalHours": 3.9340833333333335E-05,
          "TotalMilliseconds": 141.627,
          "TotalMicroseconds": 141627.0,
          "TotalNanoseconds": 141627000.0,
          "TotalMinutes": 0.00236045,
          "TotalSeconds": 0.141627
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    }",
            "Type": 19,
            "Start": 11584,
            "Length": 11077,
            "StartLine": 217,
            "StartColumn": 78,
            "EndLine": 419,
            "EndColumn": 6
          },
          "DebuggerHidden": false,
          "Id": "5cad56ab-c9bf-4ee6-add0-1634ea060cf3",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    }",
            "Parent": "{\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    }"
          }
        },
        "StartLine": 217,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 0,
        "OwnPassedCount": 0,
        "OwnFailedCount": 0,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      {
        "Name": "Prompt Templates",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Prompt Templates"
        ],
        "Data": null,
        "ExpandedName": "Prompt Templates",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should create function documentation prompts",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should create function documentation prompts",
            "Data": null,
            "ExpandedName": "Should create function documentation prompts",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create function documentation prompts",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 518,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should create module documentation prompts",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should create module documentation prompts",
            "Data": null,
            "ExpandedName": "Should create module documentation prompts",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create module documentation prompts",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 527,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should support variable substitution",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should support variable substitution",
            "Data": null,
            "ExpandedName": "Should support variable substitution",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should support variable substitution",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 536,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 3,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 3,
        "ErrorRecord": [
          {
            "Exception": "System.Management.Automation.RuntimeException: Cannot index into a null array.\r\n   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
            "TargetObject": null,
            "CategoryInfo": "InvalidOperation: (:) [], RuntimeException",
            "FullyQualifiedErrorId": "NullArray",
            "ErrorDetails": null,
            "InvocationInfo": "System.Management.Automation.InvocationInfo",
            "ScriptStackTrace": "at <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 513\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1975\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60",
            "PipelineIterationInfo": ""
          }
        ],
        "Duration": {
          "Ticks": 464071,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 46,
          "Microseconds": 407,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.37119212962963E-07,
          "TotalHours": 1.2890861111111111E-05,
          "TotalMilliseconds": 46.4071,
          "TotalMicroseconds": 46407.1,
          "TotalNanoseconds": 46407100.0,
          "TotalMinutes": 0.0007734516666666666,
          "TotalSeconds": 0.0464071
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 50196,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T20:43:17.6686205-04:00",
            "CreationTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LastAccessTime": "2025-08-28T20:44:27.0013384-04:00",
            "LastAccessTimeUtc": "2025-08-29T00:44:27.0013384Z",
            "LastWriteTime": "2025-08-28T20:43:17.6686205-04:00",
            "LastWriteTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 23,
          "PassedCount": 2,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 46809013,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 680,
            "Microseconds": 901,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.417709837962963E-05,
            "TotalHours": 0.001300250361111111,
            "TotalMilliseconds": 4680.9013,
            "TotalMicroseconds": 4680901.3,
            "TotalNanoseconds": 4680901300.0,
            "TotalMinutes": 0.07801502166666667,
            "TotalSeconds": 4.6809013
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_987e9a83-43a0-4852-b50b-7810e03bd040",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "27908d1f-3444-4a7c-aad4-e951b25f7123",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1199199,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 119,
            "Microseconds": 919,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3879618055555555E-06,
            "TotalHours": 3.331108333333333E-05,
            "TotalMilliseconds": 119.9199,
            "TotalMicroseconds": 119919.9,
            "TotalNanoseconds": 119919900.0,
            "TotalMinutes": 0.001998665,
            "TotalSeconds": 0.1199199
          },
          "FrameworkDuration": {
            "Ticks": 3338424,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 333,
            "Microseconds": 842,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.863916666666666E-06,
            "TotalHours": 9.2734E-05,
            "TotalMilliseconds": 333.8424,
            "TotalMicroseconds": 333842.4,
            "TotalNanoseconds": 333842400.0,
            "TotalMinutes": 0.00556404,
            "TotalSeconds": 0.3338424
          },
          "UserDuration": {
            "Ticks": 42271390,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 227,
            "Microseconds": 139,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.8925219907407405E-05,
            "TotalHours": 0.0011742052777777778,
            "TotalMilliseconds": 4227.139,
            "TotalMicroseconds": 4227139.0,
            "TotalNanoseconds": 4227139000.0,
            "TotalMinutes": 0.07045231666666667,
            "TotalSeconds": 4.227139
          },
          "OwnDuration": {
            "Ticks": -50602521,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -60,
            "Microseconds": -252,
            "Nanoseconds": -100,
            "Minutes": 0,
            "Seconds": -5,
            "TotalDays": -5.856773263888889E-05,
            "TotalHours": -0.0014056255833333334,
            "TotalMilliseconds": -5060.2521,
            "TotalMicroseconds": -5060252.1,
            "TotalNanoseconds": -5060252100.0,
            "TotalMinutes": -0.084337535,
            "TotalSeconds": -5.0602521
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "00f170e2-f378-4dc1-850d-470bbf038648",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable",
            "Mock": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - LLM Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - LLM Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration",
          "Blocks": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 6,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 9,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 25731901,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 573,
            "Microseconds": 190,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.9782292824074074E-05,
            "TotalHours": 0.0007147750277777778,
            "TotalMilliseconds": 2573.1901,
            "TotalMicroseconds": 2573190.1,
            "TotalNanoseconds": 2573190100.0,
            "TotalMinutes": 0.04288650166666667,
            "TotalSeconds": 2.5731901
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "LLM",
            "Integration"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "98403d94-7f80-4824-bc48-8d5eea700a8b",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:36.8567353-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 1104343,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 110,
            "Microseconds": 434,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.2781747685185185E-06,
            "TotalHours": 3.067619444444444E-05,
            "TotalMilliseconds": 110.4343,
            "TotalMicroseconds": 110434.3,
            "TotalNanoseconds": 110434300.0,
            "TotalMinutes": 0.0018405716666666666,
            "TotalSeconds": 0.1104343
          },
          "UserDuration": {
            "Ticks": 24627558,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 462,
            "Microseconds": 755,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.8504118055555556E-05,
            "TotalHours": 0.0006840988333333333,
            "TotalMilliseconds": 2462.7558,
            "TotalMicroseconds": 2462755.8,
            "TotalNanoseconds": 2462755800.0,
            "TotalMinutes": 0.04104593,
            "TotalSeconds": 2.4627558
          },
          "OwnDuration": {
            "Ticks": 24341397,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 434,
            "Microseconds": 139,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.8172913194444444E-05,
            "TotalHours": 0.0006761499166666666,
            "TotalMilliseconds": 2434.1397,
            "TotalMicroseconds": 2434139.7,
            "TotalNanoseconds": 2434139700.0,
            "TotalMinutes": 0.040568995,
            "TotalSeconds": 2.4341397
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "7f9521e2-2f25-4240-adf6-b2bf7560a756",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 425,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 27665,
            "Length": 210,
            "StartLine": 512,
            "StartColumn": 23,
            "EndLine": 516,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "b058d240-3f68-4dbe-bf2d-b3d521c06952",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }",
            "Parent": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }"
          }
        },
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should create function documentation prompts",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should create function documentation prompts",
            "Data": null,
            "ExpandedName": "Should create function documentation prompts",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create function documentation prompts",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 518,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should create module documentation prompts",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should create module documentation prompts",
            "Data": null,
            "ExpandedName": "Should create module documentation prompts",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create module documentation prompts",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 527,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should support variable substitution",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should support variable substitution",
            "Data": null,
            "ExpandedName": "Should support variable substitution",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should support variable substitution",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 536,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": false,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:46:39.2654058-04:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 447373,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 44,
          "Microseconds": 737,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.17792824074074E-07,
          "TotalHours": 1.2427027777777777E-05,
          "TotalMilliseconds": 44.7373,
          "TotalMicroseconds": 44737.3,
          "TotalNanoseconds": 44737300.0,
          "TotalMinutes": 0.0007456216666666667,
          "TotalSeconds": 0.0447373
        },
        "UserDuration": {
          "Ticks": 16698,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 1,
          "Microseconds": 669,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.932638888888889E-08,
          "TotalHours": 4.638333333333333E-07,
          "TotalMilliseconds": 1.6698,
          "TotalMicroseconds": 1669.8,
          "TotalNanoseconds": 1669800.0,
          "TotalMinutes": 2.783E-05,
          "TotalSeconds": 0.0016698
        },
        "OwnDuration": {
          "Ticks": 464071,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 46,
          "Microseconds": 407,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.37119212962963E-07,
          "TotalHours": 1.2890861111111111E-05,
          "TotalMilliseconds": 46.4071,
          "TotalMicroseconds": 46407.1,
          "TotalNanoseconds": 46407100.0,
          "TotalMinutes": 0.0007734516666666666,
          "TotalSeconds": 0.0464071
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 27640,
            "Length": 2042,
            "StartLine": 511,
            "StartColumn": 36,
            "EndLine": 547,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "523c184a-faf6-44e3-81b2-c7429831fb34",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }"
          }
        },
        "StartLine": 511,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 3,
        "OwnPassedCount": 0,
        "OwnFailedCount": 3,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      {
        "Name": "Response Cache",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Response Cache"
        ],
        "Data": null,
        "ExpandedName": "Response Cache",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should cache and retrieve responses",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should cache and retrieve responses",
            "Data": null,
            "ExpandedName": "Should cache and retrieve responses",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should cache and retrieve responses",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 556,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle TTL expiration",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should handle TTL expiration",
            "Data": null,
            "ExpandedName": "Should handle TTL expiration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should handle TTL expiration",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 568,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should provide cache statistics",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should provide cache statistics",
            "Data": null,
            "ExpandedName": "Should provide cache statistics",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should provide cache statistics",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 581,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 3,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 3,
        "ErrorRecord": [
          {
            "Exception": "System.Management.Automation.RuntimeException: Cannot index into a null array.\r\n   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
            "TargetObject": null,
            "CategoryInfo": "InvalidOperation: (:) [], RuntimeException",
            "FullyQualifiedErrorId": "NullArray",
            "ErrorDetails": null,
            "InvocationInfo": "System.Management.Automation.InvocationInfo",
            "ScriptStackTrace": "at <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 551\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1975\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60",
            "PipelineIterationInfo": ""
          }
        ],
        "Duration": {
          "Ticks": 557757,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 55,
          "Microseconds": 775,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.455520833333333E-07,
          "TotalHours": 1.549325E-05,
          "TotalMilliseconds": 55.7757,
          "TotalMicroseconds": 55775.7,
          "TotalNanoseconds": 55775700.0,
          "TotalMinutes": 0.000929595,
          "TotalSeconds": 0.0557757
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 50196,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T20:43:17.6686205-04:00",
            "CreationTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LastAccessTime": "2025-08-28T20:44:27.0013384-04:00",
            "LastAccessTimeUtc": "2025-08-29T00:44:27.0013384Z",
            "LastWriteTime": "2025-08-28T20:43:17.6686205-04:00",
            "LastWriteTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 23,
          "PassedCount": 2,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 46809013,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 680,
            "Microseconds": 901,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.417709837962963E-05,
            "TotalHours": 0.001300250361111111,
            "TotalMilliseconds": 4680.9013,
            "TotalMicroseconds": 4680901.3,
            "TotalNanoseconds": 4680901300.0,
            "TotalMinutes": 0.07801502166666667,
            "TotalSeconds": 4.6809013
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_987e9a83-43a0-4852-b50b-7810e03bd040",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "27908d1f-3444-4a7c-aad4-e951b25f7123",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1199199,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 119,
            "Microseconds": 919,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3879618055555555E-06,
            "TotalHours": 3.331108333333333E-05,
            "TotalMilliseconds": 119.9199,
            "TotalMicroseconds": 119919.9,
            "TotalNanoseconds": 119919900.0,
            "TotalMinutes": 0.001998665,
            "TotalSeconds": 0.1199199
          },
          "FrameworkDuration": {
            "Ticks": 3338424,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 333,
            "Microseconds": 842,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.863916666666666E-06,
            "TotalHours": 9.2734E-05,
            "TotalMilliseconds": 333.8424,
            "TotalMicroseconds": 333842.4,
            "TotalNanoseconds": 333842400.0,
            "TotalMinutes": 0.00556404,
            "TotalSeconds": 0.3338424
          },
          "UserDuration": {
            "Ticks": 42271390,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 227,
            "Microseconds": 139,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.8925219907407405E-05,
            "TotalHours": 0.0011742052777777778,
            "TotalMilliseconds": 4227.139,
            "TotalMicroseconds": 4227139.0,
            "TotalNanoseconds": 4227139000.0,
            "TotalMinutes": 0.07045231666666667,
            "TotalSeconds": 4.227139
          },
          "OwnDuration": {
            "Ticks": -50602521,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -60,
            "Microseconds": -252,
            "Nanoseconds": -100,
            "Minutes": 0,
            "Seconds": -5,
            "TotalDays": -5.856773263888889E-05,
            "TotalHours": -0.0014056255833333334,
            "TotalMilliseconds": -5060.2521,
            "TotalMicroseconds": -5060252.1,
            "TotalNanoseconds": -5060252100.0,
            "TotalMinutes": -0.084337535,
            "TotalSeconds": -5.0602521
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "00f170e2-f378-4dc1-850d-470bbf038648",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable",
            "Mock": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - LLM Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - LLM Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration",
          "Blocks": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 6,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 9,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 25731901,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 573,
            "Microseconds": 190,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.9782292824074074E-05,
            "TotalHours": 0.0007147750277777778,
            "TotalMilliseconds": 2573.1901,
            "TotalMicroseconds": 2573190.1,
            "TotalNanoseconds": 2573190100.0,
            "TotalMinutes": 0.04288650166666667,
            "TotalSeconds": 2.5731901
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "LLM",
            "Integration"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "98403d94-7f80-4824-bc48-8d5eea700a8b",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:36.8567353-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 1104343,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 110,
            "Microseconds": 434,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.2781747685185185E-06,
            "TotalHours": 3.067619444444444E-05,
            "TotalMilliseconds": 110.4343,
            "TotalMicroseconds": 110434.3,
            "TotalNanoseconds": 110434300.0,
            "TotalMinutes": 0.0018405716666666666,
            "TotalSeconds": 0.1104343
          },
          "UserDuration": {
            "Ticks": 24627558,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 462,
            "Microseconds": 755,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.8504118055555556E-05,
            "TotalHours": 0.0006840988333333333,
            "TotalMilliseconds": 2462.7558,
            "TotalMicroseconds": 2462755.8,
            "TotalNanoseconds": 2462755800.0,
            "TotalMinutes": 0.04104593,
            "TotalSeconds": 2.4627558
          },
          "OwnDuration": {
            "Ticks": 24341397,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 434,
            "Microseconds": 139,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.8172913194444444E-05,
            "TotalHours": 0.0006761499166666666,
            "TotalMilliseconds": 2434.1397,
            "TotalMicroseconds": 2434139.7,
            "TotalNanoseconds": 2434139700.0,
            "TotalMinutes": 0.040568995,
            "TotalSeconds": 2.4341397
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "7f9521e2-2f25-4240-adf6-b2bf7560a756",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 425,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 29752,
            "Length": 206,
            "StartLine": 550,
            "StartColumn": 23,
            "EndLine": 554,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "0de2609b-7ecf-4fcc-b3d8-ce27d3f00545",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }",
            "Parent": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }"
          }
        },
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should cache and retrieve responses",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should cache and retrieve responses",
            "Data": null,
            "ExpandedName": "Should cache and retrieve responses",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should cache and retrieve responses",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 556,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle TTL expiration",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should handle TTL expiration",
            "Data": null,
            "ExpandedName": "Should handle TTL expiration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should handle TTL expiration",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 568,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should provide cache statistics",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should provide cache statistics",
            "Data": null,
            "ExpandedName": "Should provide cache statistics",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should provide cache statistics",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 581,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": false,
        "Last": true,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:46:39.2749456-04:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 534179,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 53,
          "Microseconds": 417,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.182627314814815E-07,
          "TotalHours": 1.4838305555555556E-05,
          "TotalMilliseconds": 53.4179,
          "TotalMicroseconds": 53417.9,
          "TotalNanoseconds": 53417900.0,
          "TotalMinutes": 0.0008902983333333334,
          "TotalSeconds": 0.0534179
        },
        "UserDuration": {
          "Ticks": 23578,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 2,
          "Microseconds": 357,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.7289351851851853E-08,
          "TotalHours": 6.549444444444445E-07,
          "TotalMilliseconds": 2.3578,
          "TotalMicroseconds": 2357.8,
          "TotalNanoseconds": 2357800.0,
          "TotalMinutes": 3.9296666666666666E-05,
          "TotalSeconds": 0.0023578
        },
        "OwnDuration": {
          "Ticks": 557757,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 55,
          "Microseconds": 775,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.455520833333333E-07,
          "TotalHours": 1.549325E-05,
          "TotalMilliseconds": 55.7757,
          "TotalMicroseconds": 55775.7,
          "TotalNanoseconds": 55775700.0,
          "TotalMinutes": 0.000929595,
          "TotalSeconds": 0.0557757
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 29727,
            "Length": 2033,
            "StartLine": 549,
            "StartColumn": 34,
            "EndLine": 590,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "0ea067c2-0220-4bb3-bd45-894af95956a3",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }"
          }
        },
        "StartLine": 549,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 3,
        "OwnPassedCount": 0,
        "OwnFailedCount": 3,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      {
        "Name": "Language-Specific Templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates"
        ],
        "Data": null,
        "ExpandedName": "Language-Specific Templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should generate PowerShell documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate PowerShell documentation templates",
            "Data": null,
            "ExpandedName": "Should generate PowerShell documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate PowerShell documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 650,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate Python documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate Python documentation templates",
            "Data": null,
            "ExpandedName": "Should generate Python documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate Python documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 660,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate C# documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate C# documentation templates",
            "Data": null,
            "ExpandedName": "Should generate C# documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate C# documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 670,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate JavaScript documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate JavaScript documentation templates",
            "Data": null,
            "ExpandedName": "Should generate JavaScript documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate JavaScript documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 680,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should detect language from file extensions",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should detect language from file extensions",
            "Data": null,
            "ExpandedName": "Should detect language from file extensions",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should detect language from file extensions",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 691,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 5,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 5,
        "ErrorRecord": [
          {
            "Exception": "System.Management.Automation.RuntimeException: Cannot index into a null array.\r\n   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
            "TargetObject": null,
            "CategoryInfo": "InvalidOperation: (:) [], RuntimeException",
            "FullyQualifiedErrorId": "NullArray",
            "ErrorDetails": null,
            "InvocationInfo": "System.Management.Automation.InvocationInfo",
            "ScriptStackTrace": "at <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 645\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1975\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60",
            "PipelineIterationInfo": ""
          }
        ],
        "Duration": {
          "Ticks": 73185,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 7,
          "Microseconds": 318,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 8.470486111111111E-08,
          "TotalHours": 2.0329166666666668E-06,
          "TotalMilliseconds": 7.3185,
          "TotalMicroseconds": 7318.5,
          "TotalNanoseconds": 7318500.0,
          "TotalMinutes": 0.000121975,
          "TotalSeconds": 0.0073185
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 50196,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T20:43:17.6686205-04:00",
            "CreationTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LastAccessTime": "2025-08-28T20:44:27.0013384-04:00",
            "LastAccessTimeUtc": "2025-08-29T00:44:27.0013384Z",
            "LastWriteTime": "2025-08-28T20:43:17.6686205-04:00",
            "LastWriteTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 23,
          "PassedCount": 2,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 46809013,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 680,
            "Microseconds": 901,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.417709837962963E-05,
            "TotalHours": 0.001300250361111111,
            "TotalMilliseconds": 4680.9013,
            "TotalMicroseconds": 4680901.3,
            "TotalNanoseconds": 4680901300.0,
            "TotalMinutes": 0.07801502166666667,
            "TotalSeconds": 4.6809013
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_987e9a83-43a0-4852-b50b-7810e03bd040",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "27908d1f-3444-4a7c-aad4-e951b25f7123",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1199199,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 119,
            "Microseconds": 919,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3879618055555555E-06,
            "TotalHours": 3.331108333333333E-05,
            "TotalMilliseconds": 119.9199,
            "TotalMicroseconds": 119919.9,
            "TotalNanoseconds": 119919900.0,
            "TotalMinutes": 0.001998665,
            "TotalSeconds": 0.1199199
          },
          "FrameworkDuration": {
            "Ticks": 3338424,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 333,
            "Microseconds": 842,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.863916666666666E-06,
            "TotalHours": 9.2734E-05,
            "TotalMilliseconds": 333.8424,
            "TotalMicroseconds": 333842.4,
            "TotalNanoseconds": 333842400.0,
            "TotalMinutes": 0.00556404,
            "TotalSeconds": 0.3338424
          },
          "UserDuration": {
            "Ticks": 42271390,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 227,
            "Microseconds": 139,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.8925219907407405E-05,
            "TotalHours": 0.0011742052777777778,
            "TotalMilliseconds": 4227.139,
            "TotalMicroseconds": 4227139.0,
            "TotalNanoseconds": 4227139000.0,
            "TotalMinutes": 0.07045231666666667,
            "TotalSeconds": 4.227139
          },
          "OwnDuration": {
            "Ticks": -50602521,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -60,
            "Microseconds": -252,
            "Nanoseconds": -100,
            "Minutes": 0,
            "Seconds": -5,
            "TotalDays": -5.856773263888889E-05,
            "TotalHours": -0.0014056255833333334,
            "TotalMilliseconds": -5060.2521,
            "TotalMicroseconds": -5060252.1,
            "TotalNanoseconds": -5060252100.0,
            "TotalMinutes": -0.084337535,
            "TotalSeconds": -5.0602521
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "00f170e2-f378-4dc1-850d-470bbf038648",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable",
            "Mock": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - Templates & Automation",
          "Path": [
            "Enhanced Documentation System - Templates & Automation"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - Templates & Automation",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
          "Blocks": [
            "[-] Language-Specific Templates",
            "[-] Automation Triggers"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 7,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 7,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 26240217,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 624,
            "Microseconds": 21,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 3.0370621527777777E-05,
            "TotalHours": 0.0007288949166666666,
            "TotalMilliseconds": 2624.0217,
            "TotalMicroseconds": 2624021.7,
            "TotalNanoseconds": 2624021700.0,
            "TotalMinutes": 0.043733695,
            "TotalSeconds": 2.6240217
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "Templates",
            "Automation"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "9aebbe4f-77f8-43fc-8462-7a510848301d",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($templateModulePaths -and $templateModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-Templates] Testing availability for $($templateModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $templateModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-Templates] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-Templates] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-Templates] ERROR: templateModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Language-Specific Templates",
            "[-] Automation Triggers"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.2883087-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 1295474,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 129,
            "Microseconds": 547,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4993912037037037E-06,
            "TotalHours": 3.598538888888889E-05,
            "TotalMilliseconds": 129.5474,
            "TotalMicroseconds": 129547.4,
            "TotalNanoseconds": 129547400.0,
            "TotalMinutes": 0.0021591233333333334,
            "TotalSeconds": 0.1295474
          },
          "UserDuration": {
            "Ticks": 24944743,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 494,
            "Microseconds": 474,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.8871230324074075E-05,
            "TotalHours": 0.0006929095277777778,
            "TotalMilliseconds": 2494.4743,
            "TotalMicroseconds": 2494474.3,
            "TotalNanoseconds": 2494474300.0,
            "TotalMinutes": 0.041574571666666664,
            "TotalSeconds": 2.4944743
          },
          "OwnDuration": {
            "Ticks": 26014926,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 601,
            "Microseconds": 492,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 3.0109868055555556E-05,
            "TotalHours": 0.0007226368333333334,
            "TotalMilliseconds": 2601.4926,
            "TotalMicroseconds": 2601492.6,
            "TotalNanoseconds": 2601492600.0,
            "TotalMinutes": 0.04335821,
            "TotalSeconds": 2.6014926
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "1a2eb108-5bb3-4c06-8cce-621ad9c222ab",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($templateModulePaths -and $templateModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-Templates] Testing availability for $($templateModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $templateModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-Templates] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-Templates] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-Templates] ERROR: templateModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 597,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 35055,
            "Length": 219,
            "StartLine": 644,
            "StartColumn": 23,
            "EndLine": 648,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "e2b490e5-fc4a-4142-9693-fc3c85e7c933",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }",
            "Parent": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }"
          }
        },
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should generate PowerShell documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate PowerShell documentation templates",
            "Data": null,
            "ExpandedName": "Should generate PowerShell documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate PowerShell documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 650,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate Python documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate Python documentation templates",
            "Data": null,
            "ExpandedName": "Should generate Python documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate Python documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 660,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate C# documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate C# documentation templates",
            "Data": null,
            "ExpandedName": "Should generate C# documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate C# documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 670,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate JavaScript documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate JavaScript documentation templates",
            "Data": null,
            "ExpandedName": "Should generate JavaScript documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate JavaScript documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 680,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should detect language from file extensions",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should detect language from file extensions",
            "Data": null,
            "ExpandedName": "Should detect language from file extensions",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should detect language from file extensions",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 691,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": true,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:46:39.3194679-04:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 66028,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 6,
          "Microseconds": 602,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 7.64212962962963E-08,
          "TotalHours": 1.8341111111111111E-06,
          "TotalMilliseconds": 6.6028,
          "TotalMicroseconds": 6602.8,
          "TotalNanoseconds": 6602800.0,
          "TotalMinutes": 0.00011004666666666666,
          "TotalSeconds": 0.0066028
        },
        "UserDuration": {
          "Ticks": 7157,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 715,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 8.283564814814815E-09,
          "TotalHours": 1.9880555555555556E-07,
          "TotalMilliseconds": 0.7157,
          "TotalMicroseconds": 715.7,
          "TotalNanoseconds": 715700.0,
          "TotalMinutes": 1.1928333333333334E-05,
          "TotalSeconds": 0.0007157
        },
        "OwnDuration": {
          "Ticks": 73185,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 7,
          "Microseconds": 318,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 8.470486111111111E-08,
          "TotalHours": 2.0329166666666668E-06,
          "TotalMilliseconds": 7.3185,
          "TotalMicroseconds": 7318.5,
          "TotalNanoseconds": 7318500.0,
          "TotalMinutes": 0.000121975,
          "TotalSeconds": 0.0073185
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 35030,
            "Length": 3714,
            "StartLine": 643,
            "StartColumn": 47,
            "EndLine": 700,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "e53643a8-6890-49a5-b3bb-487df2abc1b0",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }"
          }
        },
        "StartLine": 643,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 5,
        "OwnPassedCount": 0,
        "OwnFailedCount": 5,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      {
        "Name": "Automation Triggers",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Automation Triggers"
        ],
        "Data": null,
        "ExpandedName": "Automation Triggers",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should initialize documentation triggers",
            "Path": "Enhanced Documentation System - Templates & Automation Automation Triggers Should initialize documentation triggers",
            "Data": null,
            "ExpandedName": "Should initialize documentation triggers",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should initialize documentation triggers",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Automation Triggers",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 709,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should log trigger activity",
            "Path": "Enhanced Documentation System - Templates & Automation Automation Triggers Should log trigger activity",
            "Data": null,
            "ExpandedName": "Should log trigger activity",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should log trigger activity",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Automation Triggers",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 716,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 2,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 2,
        "ErrorRecord": [
          {
            "Exception": "System.Management.Automation.RuntimeException: Cannot index into a null array.\r\n   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
            "TargetObject": null,
            "CategoryInfo": "InvalidOperation: (:) [], RuntimeException",
            "FullyQualifiedErrorId": "NullArray",
            "ErrorDetails": null,
            "InvocationInfo": "System.Management.Automation.InvocationInfo",
            "ScriptStackTrace": "at <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 704\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1975\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60",
            "PipelineIterationInfo": ""
          }
        ],
        "Duration": {
          "Ticks": 152106,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 15,
          "Microseconds": 210,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.7604861111111112E-07,
          "TotalHours": 4.225166666666666E-06,
          "TotalMilliseconds": 15.2106,
          "TotalMicroseconds": 15210.6,
          "TotalNanoseconds": 15210600.0,
          "TotalMinutes": 0.00025351,
          "TotalSeconds": 0.0152106
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 50196,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T20:43:17.6686205-04:00",
            "CreationTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LastAccessTime": "2025-08-28T20:44:27.0013384-04:00",
            "LastAccessTimeUtc": "2025-08-29T00:44:27.0013384Z",
            "LastWriteTime": "2025-08-28T20:43:17.6686205-04:00",
            "LastWriteTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 23,
          "PassedCount": 2,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 46809013,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 680,
            "Microseconds": 901,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.417709837962963E-05,
            "TotalHours": 0.001300250361111111,
            "TotalMilliseconds": 4680.9013,
            "TotalMicroseconds": 4680901.3,
            "TotalNanoseconds": 4680901300.0,
            "TotalMinutes": 0.07801502166666667,
            "TotalSeconds": 4.6809013
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_987e9a83-43a0-4852-b50b-7810e03bd040",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "27908d1f-3444-4a7c-aad4-e951b25f7123",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1199199,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 119,
            "Microseconds": 919,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3879618055555555E-06,
            "TotalHours": 3.331108333333333E-05,
            "TotalMilliseconds": 119.9199,
            "TotalMicroseconds": 119919.9,
            "TotalNanoseconds": 119919900.0,
            "TotalMinutes": 0.001998665,
            "TotalSeconds": 0.1199199
          },
          "FrameworkDuration": {
            "Ticks": 3338424,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 333,
            "Microseconds": 842,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.863916666666666E-06,
            "TotalHours": 9.2734E-05,
            "TotalMilliseconds": 333.8424,
            "TotalMicroseconds": 333842.4,
            "TotalNanoseconds": 333842400.0,
            "TotalMinutes": 0.00556404,
            "TotalSeconds": 0.3338424
          },
          "UserDuration": {
            "Ticks": 42271390,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 227,
            "Microseconds": 139,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.8925219907407405E-05,
            "TotalHours": 0.0011742052777777778,
            "TotalMilliseconds": 4227.139,
            "TotalMicroseconds": 4227139.0,
            "TotalNanoseconds": 4227139000.0,
            "TotalMinutes": 0.07045231666666667,
            "TotalSeconds": 4.227139
          },
          "OwnDuration": {
            "Ticks": -50602521,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -60,
            "Microseconds": -252,
            "Nanoseconds": -100,
            "Minutes": 0,
            "Seconds": -5,
            "TotalDays": -5.856773263888889E-05,
            "TotalHours": -0.0014056255833333334,
            "TotalMilliseconds": -5060.2521,
            "TotalMicroseconds": -5060252.1,
            "TotalNanoseconds": -5060252100.0,
            "TotalMinutes": -0.084337535,
            "TotalSeconds": -5.0602521
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "00f170e2-f378-4dc1-850d-470bbf038648",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable",
            "Mock": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - Templates & Automation",
          "Path": [
            "Enhanced Documentation System - Templates & Automation"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - Templates & Automation",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
          "Blocks": [
            "[-] Language-Specific Templates",
            "[-] Automation Triggers"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 7,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 7,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 26240217,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 624,
            "Microseconds": 21,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 3.0370621527777777E-05,
            "TotalHours": 0.0007288949166666666,
            "TotalMilliseconds": 2624.0217,
            "TotalMicroseconds": 2624021.7,
            "TotalNanoseconds": 2624021700.0,
            "TotalMinutes": 0.043733695,
            "TotalSeconds": 2.6240217
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "Templates",
            "Automation"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "9aebbe4f-77f8-43fc-8462-7a510848301d",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($templateModulePaths -and $templateModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-Templates] Testing availability for $($templateModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $templateModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-Templates] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-Templates] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-Templates] ERROR: templateModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Language-Specific Templates",
            "[-] Automation Triggers"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.2883087-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 1295474,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 129,
            "Microseconds": 547,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4993912037037037E-06,
            "TotalHours": 3.598538888888889E-05,
            "TotalMilliseconds": 129.5474,
            "TotalMicroseconds": 129547.4,
            "TotalNanoseconds": 129547400.0,
            "TotalMinutes": 0.0021591233333333334,
            "TotalSeconds": 0.1295474
          },
          "UserDuration": {
            "Ticks": 24944743,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 494,
            "Microseconds": 474,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.8871230324074075E-05,
            "TotalHours": 0.0006929095277777778,
            "TotalMilliseconds": 2494.4743,
            "TotalMicroseconds": 2494474.3,
            "TotalNanoseconds": 2494474300.0,
            "TotalMinutes": 0.041574571666666664,
            "TotalSeconds": 2.4944743
          },
          "OwnDuration": {
            "Ticks": 26014926,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 601,
            "Microseconds": 492,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 3.0109868055555556E-05,
            "TotalHours": 0.0007226368333333334,
            "TotalMilliseconds": 2601.4926,
            "TotalMicroseconds": 2601492.6,
            "TotalNanoseconds": 2601492600.0,
            "TotalMinutes": 0.04335821,
            "TotalSeconds": 2.6014926
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "1a2eb108-5bb3-4c06-8cce-621ad9c222ab",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($templateModulePaths -and $templateModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-Templates] Testing availability for $($templateModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $templateModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-Templates] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-Templates] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-Templates] ERROR: templateModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 597,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 38819,
            "Length": 221,
            "StartLine": 703,
            "StartColumn": 23,
            "EndLine": 707,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "26ca46cc-c279-4971-be3e-fde80f44d189",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }",
            "Parent": "{\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }"
          }
        },
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should initialize documentation triggers",
            "Path": "Enhanced Documentation System - Templates & Automation Automation Triggers Should initialize documentation triggers",
            "Data": null,
            "ExpandedName": "Should initialize documentation triggers",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should initialize documentation triggers",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Automation Triggers",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 709,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should log trigger activity",
            "Path": "Enhanced Documentation System - Templates & Automation Automation Triggers Should log trigger activity",
            "Data": null,
            "ExpandedName": "Should log trigger activity",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should log trigger activity",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Automation Triggers",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 716,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": false,
        "Last": true,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:46:39.3267849-04:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 138611,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 13,
          "Microseconds": 861,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.6042939814814815E-07,
          "TotalHours": 3.8503055555555555E-06,
          "TotalMilliseconds": 13.8611,
          "TotalMicroseconds": 13861.1,
          "TotalNanoseconds": 13861100.0,
          "TotalMinutes": 0.00023101833333333334,
          "TotalSeconds": 0.0138611
        },
        "UserDuration": {
          "Ticks": 13495,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 1,
          "Microseconds": 349,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.5619212962962962E-08,
          "TotalHours": 3.748611111111111E-07,
          "TotalMilliseconds": 1.3495,
          "TotalMicroseconds": 1349.5,
          "TotalNanoseconds": 1349500.0,
          "TotalMinutes": 2.2491666666666667E-05,
          "TotalSeconds": 0.0013495
        },
        "OwnDuration": {
          "Ticks": 152106,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 15,
          "Microseconds": 210,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.7604861111111112E-07,
          "TotalHours": 4.225166666666666E-06,
          "TotalMilliseconds": 15.2106,
          "TotalMicroseconds": 15210.6,
          "TotalNanoseconds": 15210600.0,
          "TotalMinutes": 0.00025351,
          "TotalSeconds": 0.0152106
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 38794,
            "Length": 1481,
            "StartLine": 702,
            "StartColumn": 39,
            "EndLine": 732,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "542dc787-f877-4bb0-8fad-d7e55eeb8dad",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }"
          }
        },
        "StartLine": 702,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 2,
        "OwnPassedCount": 0,
        "OwnFailedCount": 2,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      }
    ],
    "FailedContainers": [],
    "Passed": [
      {
        "Name": "Should process files at 100+ files per second",
        "Path": [
          "Enhanced Documentation System - Performance",
          "File Processing Performance",
          "Should process files at 100+ files per second"
        ],
        "Data": null,
        "ExpandedName": "Should process files at 100+ files per second",
        "ExpandedPath": "Enhanced Documentation System - Performance.File Processing Performance.Should process files at 100+ files per second",
        "Result": "Passed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 454640,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 45,
          "Microseconds": 464,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.262037037037037E-07,
          "TotalHours": 1.2628888888888888E-05,
          "TotalMilliseconds": 45.464,
          "TotalMicroseconds": 45464.0,
          "TotalNanoseconds": 45464000.0,
          "TotalMinutes": 0.0007577333333333333,
          "TotalSeconds": 0.045464
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }",
            "Type": 19,
            "Start": 46114,
            "Length": 1371,
            "StartLine": 852,
            "StartColumn": 64,
            "EndLine": 877,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "7f944080-7af9-4760-b055-a2106b892c50",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }",
            "Parent": "{\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "File Processing Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "File Processing Performance"
          ],
          "Data": null,
          "ExpandedName": "File Processing Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.File Processing Performance",
          "Blocks": [],
          "Tests": [
            "[+] Should process files at 100+ files per second",
            "[+] Should handle incremental updates efficiently"
          ],
          "Result": "Passed",
          "FailedCount": 0,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 1775735,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 177,
            "Microseconds": 573,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.0552488425925925E-06,
            "TotalHours": 4.932597222222222E-05,
            "TotalMilliseconds": 177.5735,
            "TotalMicroseconds": 177573.5,
            "TotalNanoseconds": 177573500.0,
            "TotalMinutes": 0.0029595583333333333,
            "TotalSeconds": 0.1775735
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 3,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:04.4023146",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Passed": false,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:39.3391867-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1783972",
            "UserDuration": "00:00:04.2239174",
            "OwnDuration": "00:00:02.4730530",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 739,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "461f50fb-fda4-4ba2-9162-7abd26cde2f1",
            "Ast": "{\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[+] Should process files at 100+ files per second",
            "[+] Should handle incremental updates efficiently"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.4406784-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 252192,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 25,
            "Microseconds": 219,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.918888888888889E-07,
            "TotalHours": 7.005333333333333E-06,
            "TotalMilliseconds": 25.2192,
            "TotalMicroseconds": 25219.2,
            "TotalNanoseconds": 25219200.0,
            "TotalMinutes": 0.00042032,
            "TotalSeconds": 0.0252192
          },
          "UserDuration": {
            "Ticks": 1523543,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 152,
            "Microseconds": 354,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.7633599537037038E-06,
            "TotalHours": 4.232063888888889E-05,
            "TotalMilliseconds": 152.3543,
            "TotalMicroseconds": 152354.3,
            "TotalNanoseconds": 152354300.0,
            "TotalMinutes": 0.0025392383333333332,
            "TotalSeconds": 0.1523543
          },
          "OwnDuration": {
            "Ticks": 1120349,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 112,
            "Microseconds": 34,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.2967002314814816E-06,
            "TotalHours": 3.1120805555555556E-05,
            "TotalMilliseconds": 112.0349,
            "TotalMicroseconds": 112034.9,
            "TotalNanoseconds": 112034900.0,
            "TotalMinutes": 0.0018672483333333333,
            "TotalSeconds": 0.1120349
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "6747539c-9b7e-4856-8f2c-40565cab970a",
            "Ast": "{\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }"
          },
          "StartLine": 819,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 2,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 852,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:46:39.4927286-04:00",
        "Passed": true,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 444876,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 44,
          "Microseconds": 487,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.149027777777778E-07,
          "TotalHours": 1.2357666666666667E-05,
          "TotalMilliseconds": 44.4876,
          "TotalMicroseconds": 44487.6,
          "TotalNanoseconds": 44487600.0,
          "TotalMinutes": 0.00074146,
          "TotalSeconds": 0.0444876
        },
        "FrameworkDuration": {
          "Ticks": 9764,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 976,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.1300925925925926E-08,
          "TotalHours": 2.7122222222222225E-07,
          "TotalMilliseconds": 0.9764,
          "TotalMicroseconds": 976.4,
          "TotalNanoseconds": 976400.0,
          "TotalMinutes": 1.6273333333333332E-05,
          "TotalSeconds": 0.0009764
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should handle incremental updates efficiently",
        "Path": [
          "Enhanced Documentation System - Performance",
          "File Processing Performance",
          "Should handle incremental updates efficiently"
        ],
        "Data": null,
        "ExpandedName": "Should handle incremental updates efficiently",
        "ExpandedPath": "Enhanced Documentation System - Performance.File Processing Performance.Should handle incremental updates efficiently",
        "Result": "Passed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 200746,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 20,
          "Microseconds": 74,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.323449074074074E-07,
          "TotalHours": 5.5762777777777775E-06,
          "TotalMilliseconds": 20.0746,
          "TotalMicroseconds": 20074.6,
          "TotalNanoseconds": 20074600.0,
          "TotalMinutes": 0.00033457666666666664,
          "TotalSeconds": 0.0200746
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }",
            "Type": 19,
            "Start": 47640,
            "Length": 938,
            "StartLine": 879,
            "StartColumn": 140,
            "EndLine": 900,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "8fb61014-09ef-4127-bdac-3ded172d314a",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }",
            "Parent": "{\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "File Processing Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "File Processing Performance"
          ],
          "Data": null,
          "ExpandedName": "File Processing Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.File Processing Performance",
          "Blocks": [],
          "Tests": [
            "[+] Should process files at 100+ files per second",
            "[+] Should handle incremental updates efficiently"
          ],
          "Result": "Passed",
          "FailedCount": 0,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 1775735,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 177,
            "Microseconds": 573,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.0552488425925925E-06,
            "TotalHours": 4.932597222222222E-05,
            "TotalMilliseconds": 177.5735,
            "TotalMicroseconds": 177573.5,
            "TotalNanoseconds": 177573500.0,
            "TotalMinutes": 0.0029595583333333333,
            "TotalSeconds": 0.1775735
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 3,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:04.4023146",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Passed": false,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:39.3391867-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1783972",
            "UserDuration": "00:00:04.2239174",
            "OwnDuration": "00:00:02.4730530",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 739,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "461f50fb-fda4-4ba2-9162-7abd26cde2f1",
            "Ast": "{\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[+] Should process files at 100+ files per second",
            "[+] Should handle incremental updates efficiently"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.4406784-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 252192,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 25,
            "Microseconds": 219,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.918888888888889E-07,
            "TotalHours": 7.005333333333333E-06,
            "TotalMilliseconds": 25.2192,
            "TotalMicroseconds": 25219.2,
            "TotalNanoseconds": 25219200.0,
            "TotalMinutes": 0.00042032,
            "TotalSeconds": 0.0252192
          },
          "UserDuration": {
            "Ticks": 1523543,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 152,
            "Microseconds": 354,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.7633599537037038E-06,
            "TotalHours": 4.232063888888889E-05,
            "TotalMilliseconds": 152.3543,
            "TotalMicroseconds": 152354.3,
            "TotalNanoseconds": 152354300.0,
            "TotalMinutes": 0.0025392383333333332,
            "TotalSeconds": 0.1523543
          },
          "OwnDuration": {
            "Ticks": 1120349,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 112,
            "Microseconds": 34,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.2967002314814816E-06,
            "TotalHours": 3.1120805555555556E-05,
            "TotalMilliseconds": 112.0349,
            "TotalMicroseconds": 112034.9,
            "TotalNanoseconds": 112034900.0,
            "TotalMinutes": 0.0018672483333333333,
            "TotalSeconds": 0.1120349
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "6747539c-9b7e-4856-8f2c-40565cab970a",
            "Ast": "{\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }"
          },
          "StartLine": 819,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 2,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 879,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:46:39.5382207-04:00",
        "Passed": true,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 194243,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 19,
          "Microseconds": 424,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.2481828703703705E-07,
          "TotalHours": 5.395638888888889E-06,
          "TotalMilliseconds": 19.4243,
          "TotalMicroseconds": 19424.3,
          "TotalNanoseconds": 19424300.0,
          "TotalMinutes": 0.00032373833333333333,
          "TotalSeconds": 0.0194243
        },
        "FrameworkDuration": {
          "Ticks": 6503,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 650,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 7.52662037037037E-09,
          "TotalHours": 1.806388888888889E-07,
          "TotalMilliseconds": 0.6503,
          "TotalMicroseconds": 650.3,
          "TotalNanoseconds": 650300.0,
          "TotalMinutes": 1.0838333333333333E-05,
          "TotalSeconds": 0.0006503
        },
        "PluginData": null,
        "FrameworkData": null
      }
    ],
    "Skipped": [
      {
        "Name": "Should connect to Ollama service",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Ollama API Integration",
          "Should connect to Ollama service"
        ],
        "Data": null,
        "ExpandedName": "Should connect to Ollama service",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should connect to Ollama service",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 149179,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 14,
          "Microseconds": 917,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.7266087962962963E-07,
          "TotalHours": 4.143861111111111E-06,
          "TotalMilliseconds": 14.9179,
          "TotalMicroseconds": 14917.9,
          "TotalNanoseconds": 14917900.0,
          "TotalMinutes": 0.00024863166666666667,
          "TotalSeconds": 0.0149179
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }",
            "Type": 19,
            "Start": 26323,
            "Length": 222,
            "StartLine": 484,
            "StartColumn": 88,
            "EndLine": 489,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "258917d3-84e1-45f1-a69e-da3a03147bd1",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Ollama API Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Ollama API Integration"
          ],
          "Data": null,
          "ExpandedName": "Ollama API Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration",
          "Blocks": [],
          "Tests": [
            "[!] Should connect to Ollama service",
            "[!] Should list available models",
            "[!] Should generate responses for code analysis"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 368676,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 36,
            "Microseconds": 867,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.2670833333333333E-07,
            "TotalHours": 1.0241E-05,
            "TotalMilliseconds": 36.8676,
            "TotalMicroseconds": 36867.6,
            "TotalNanoseconds": 36867600.0,
            "TotalMinutes": 0.00061446,
            "TotalSeconds": 0.0368676
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 6,
            "PassedCount": 0,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:02.5731901",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.8567353-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1104343",
            "UserDuration": "00:00:02.4627558",
            "OwnDuration": "00:00:02.4341397",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 425,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should connect to Ollama service",
            "[!] Should list available models",
            "[!] Should generate responses for code analysis"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.2285392-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 366782,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 36,
            "Microseconds": 678,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.245162037037037E-07,
            "TotalHours": 1.0188388888888888E-05,
            "TotalMilliseconds": 36.6782,
            "TotalMicroseconds": 36678.2,
            "TotalNanoseconds": 36678200.0,
            "TotalMinutes": 0.0006113033333333334,
            "TotalSeconds": 0.0366782
          },
          "UserDuration": {
            "Ticks": 1894,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 189,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.1921296296296296E-09,
            "TotalHours": 5.261111111111111E-08,
            "TotalMilliseconds": 0.1894,
            "TotalMicroseconds": 189.4,
            "TotalNanoseconds": 189400.0,
            "TotalMinutes": 3.156666666666667E-06,
            "TotalSeconds": 0.0001894
          },
          "OwnDuration": {
            "Ticks": 197714,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 19,
            "Microseconds": 771,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.2883564814814815E-07,
            "TotalHours": 5.4920555555555555E-06,
            "TotalMilliseconds": 19.7714,
            "TotalMicroseconds": 19771.4,
            "TotalNanoseconds": 19771400.0,
            "TotalMinutes": 0.00032952333333333334,
            "TotalSeconds": 0.0197714
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e594b21a-03f3-4b66-a136-a96b4d576cdd",
            "Ast": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 483,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 484,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:46:39.2331837-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 149179,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 14,
          "Microseconds": 917,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.7266087962962963E-07,
          "TotalHours": 4.143861111111111E-06,
          "TotalMilliseconds": 14.9179,
          "TotalMicroseconds": 14917.9,
          "TotalNanoseconds": 14917900.0,
          "TotalMinutes": 0.00024863166666666667,
          "TotalSeconds": 0.0149179
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should list available models",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Ollama API Integration",
          "Should list available models"
        ],
        "Data": null,
        "ExpandedName": "Should list available models",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should list available models",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 6979,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 697,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 8.077546296296296E-09,
          "TotalHours": 1.938611111111111E-07,
          "TotalMilliseconds": 0.6979,
          "TotalMicroseconds": 697.9,
          "TotalNanoseconds": 697900.0,
          "TotalMinutes": 1.1631666666666667E-05,
          "TotalSeconds": 0.0006979
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }",
            "Type": 19,
            "Start": 26644,
            "Length": 279,
            "StartLine": 491,
            "StartColumn": 84,
            "EndLine": 497,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "e4616ff8-0d35-4b8f-a794-4f2e817ba5e5",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Ollama API Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Ollama API Integration"
          ],
          "Data": null,
          "ExpandedName": "Ollama API Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration",
          "Blocks": [],
          "Tests": [
            "[!] Should connect to Ollama service",
            "[!] Should list available models",
            "[!] Should generate responses for code analysis"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 368676,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 36,
            "Microseconds": 867,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.2670833333333333E-07,
            "TotalHours": 1.0241E-05,
            "TotalMilliseconds": 36.8676,
            "TotalMicroseconds": 36867.6,
            "TotalNanoseconds": 36867600.0,
            "TotalMinutes": 0.00061446,
            "TotalSeconds": 0.0368676
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 6,
            "PassedCount": 0,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:02.5731901",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.8567353-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1104343",
            "UserDuration": "00:00:02.4627558",
            "OwnDuration": "00:00:02.4341397",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 425,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should connect to Ollama service",
            "[!] Should list available models",
            "[!] Should generate responses for code analysis"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.2285392-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 366782,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 36,
            "Microseconds": 678,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.245162037037037E-07,
            "TotalHours": 1.0188388888888888E-05,
            "TotalMilliseconds": 36.6782,
            "TotalMicroseconds": 36678.2,
            "TotalNanoseconds": 36678200.0,
            "TotalMinutes": 0.0006113033333333334,
            "TotalSeconds": 0.0366782
          },
          "UserDuration": {
            "Ticks": 1894,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 189,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.1921296296296296E-09,
            "TotalHours": 5.261111111111111E-08,
            "TotalMilliseconds": 0.1894,
            "TotalMicroseconds": 189.4,
            "TotalNanoseconds": 189400.0,
            "TotalMinutes": 3.156666666666667E-06,
            "TotalSeconds": 0.0001894
          },
          "OwnDuration": {
            "Ticks": 197714,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 19,
            "Microseconds": 771,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.2883564814814815E-07,
            "TotalHours": 5.4920555555555555E-06,
            "TotalMilliseconds": 19.7714,
            "TotalMicroseconds": 19771.4,
            "TotalNanoseconds": 19771400.0,
            "TotalMinutes": 0.00032952333333333334,
            "TotalSeconds": 0.0197714
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e594b21a-03f3-4b66-a136-a96b4d576cdd",
            "Ast": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 483,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 491,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:46:39.247642-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 6979,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 697,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 8.077546296296296E-09,
          "TotalHours": 1.938611111111111E-07,
          "TotalMilliseconds": 0.6979,
          "TotalMicroseconds": 697.9,
          "TotalNanoseconds": 697900.0,
          "TotalMinutes": 1.1631666666666667E-05,
          "TotalSeconds": 0.0006979
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate responses for code analysis",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Ollama API Integration",
          "Should generate responses for code analysis"
        ],
        "Data": null,
        "ExpandedName": "Should generate responses for code analysis",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should generate responses for code analysis",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 14804,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 1,
          "Microseconds": 480,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.713425925925926E-08,
          "TotalHours": 4.1122222222222223E-07,
          "TotalMilliseconds": 1.4804,
          "TotalMicroseconds": 1480.4,
          "TotalNanoseconds": 1480400.0,
          "TotalMinutes": 2.4673333333333333E-05,
          "TotalSeconds": 0.0014804
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }",
            "Type": 19,
            "Start": 27037,
            "Length": 545,
            "StartLine": 499,
            "StartColumn": 99,
            "EndLine": 508,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "2a1ca1ff-4a62-4434-9a89-fa7f34fbb103",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Ollama API Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Ollama API Integration"
          ],
          "Data": null,
          "ExpandedName": "Ollama API Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration",
          "Blocks": [],
          "Tests": [
            "[!] Should connect to Ollama service",
            "[!] Should list available models",
            "[!] Should generate responses for code analysis"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 368676,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 36,
            "Microseconds": 867,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.2670833333333333E-07,
            "TotalHours": 1.0241E-05,
            "TotalMilliseconds": 36.8676,
            "TotalMicroseconds": 36867.6,
            "TotalNanoseconds": 36867600.0,
            "TotalMinutes": 0.00061446,
            "TotalSeconds": 0.0368676
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 6,
            "PassedCount": 0,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:02.5731901",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.8567353-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1104343",
            "UserDuration": "00:00:02.4627558",
            "OwnDuration": "00:00:02.4341397",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 425,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should connect to Ollama service",
            "[!] Should list available models",
            "[!] Should generate responses for code analysis"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.2285392-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 366782,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 36,
            "Microseconds": 678,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.245162037037037E-07,
            "TotalHours": 1.0188388888888888E-05,
            "TotalMilliseconds": 36.6782,
            "TotalMicroseconds": 36678.2,
            "TotalNanoseconds": 36678200.0,
            "TotalMinutes": 0.0006113033333333334,
            "TotalSeconds": 0.0366782
          },
          "UserDuration": {
            "Ticks": 1894,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 189,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.1921296296296296E-09,
            "TotalHours": 5.261111111111111E-08,
            "TotalMilliseconds": 0.1894,
            "TotalMicroseconds": 189.4,
            "TotalNanoseconds": 189400.0,
            "TotalMinutes": 3.156666666666667E-06,
            "TotalSeconds": 0.0001894
          },
          "OwnDuration": {
            "Ticks": 197714,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 19,
            "Microseconds": 771,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.2883564814814815E-07,
            "TotalHours": 5.4920555555555555E-06,
            "TotalMilliseconds": 19.7714,
            "TotalMicroseconds": 19771.4,
            "TotalNanoseconds": 19771400.0,
            "TotalMinutes": 0.00032952333333333334,
            "TotalSeconds": 0.0197714
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e594b21a-03f3-4b66-a136-a96b4d576cdd",
            "Ast": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 483,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 499,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:46:39.2483494-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 14804,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 1,
          "Microseconds": 480,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.713425925925926E-08,
          "TotalHours": 4.1122222222222223E-07,
          "TotalMilliseconds": 1.4804,
          "TotalMicroseconds": 1480.4,
          "TotalNanoseconds": 1480400.0,
          "TotalMinutes": 2.4673333333333333E-05,
          "TotalSeconds": 0.0014804
        },
        "PluginData": null,
        "FrameworkData": null
      }
    ],
    "Inconclusive": [],
    "NotRun": [],
    "Tests": [
      {
        "Name": "Should create thread-safe CPG wrapper",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Thread-Safe Operations",
          "Should create thread-safe CPG wrapper"
        ],
        "Data": null,
        "ExpandedName": "Should create thread-safe CPG wrapper",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should create thread-safe CPG wrapper",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }",
            "Type": 19,
            "Start": 17271,
            "Length": 619,
            "StartLine": 299,
            "StartColumn": 125,
            "EndLine": 306,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "f8191d70-b45f-40d5-a3ea-dd9289ee0f15",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }",
            "Parent": "{\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Thread-Safe Operations",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Thread-Safe Operations"
          ],
          "Data": null,
          "ExpandedName": "Thread-Safe Operations",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
          "Blocks": [],
          "Tests": [
            "[-] Should create thread-safe CPG wrapper",
            "[-] Should handle concurrent operations safely",
            "[-] Should provide thread safety statistics"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "You cannot call a method on a null-valued expression.",
            "Duration": "00:00:00.1416270",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.7151048-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0519900",
            "UserDuration": "00:00:00.0896370",
            "OwnDuration": "00:00:00.1416270",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 217,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should create thread-safe CPG wrapper",
            "[-] Should handle concurrent operations safely",
            "[-] Should provide thread safety statistics"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "5276faa7-b8f1-4dc2-8167-3907f1757474",
            "Ast": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }"
          },
          "StartLine": 297,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 299,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should handle concurrent operations safely",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Thread-Safe Operations",
          "Should handle concurrent operations safely"
        ],
        "Data": null,
        "ExpandedName": "Should handle concurrent operations safely",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should handle concurrent operations safely",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }",
            "Type": 19,
            "Start": 18035,
            "Length": 737,
            "StartLine": 308,
            "StartColumn": 130,
            "EndLine": 326,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "bd71da43-0fea-40da-ad4d-e2704d06f533",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }",
            "Parent": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Thread-Safe Operations",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Thread-Safe Operations"
          ],
          "Data": null,
          "ExpandedName": "Thread-Safe Operations",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
          "Blocks": [],
          "Tests": [
            "[-] Should create thread-safe CPG wrapper",
            "[-] Should handle concurrent operations safely",
            "[-] Should provide thread safety statistics"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "You cannot call a method on a null-valued expression.",
            "Duration": "00:00:00.1416270",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.7151048-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0519900",
            "UserDuration": "00:00:00.0896370",
            "OwnDuration": "00:00:00.1416270",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 217,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should create thread-safe CPG wrapper",
            "[-] Should handle concurrent operations safely",
            "[-] Should provide thread safety statistics"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "5276faa7-b8f1-4dc2-8167-3907f1757474",
            "Ast": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }"
          },
          "StartLine": 297,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 308,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should provide thread safety statistics",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Thread-Safe Operations",
          "Should provide thread safety statistics"
        ],
        "Data": null,
        "ExpandedName": "Should provide thread safety statistics",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should provide thread safety statistics",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }",
            "Type": 19,
            "Start": 18914,
            "Length": 311,
            "StartLine": 328,
            "StartColumn": 127,
            "EndLine": 334,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "6662b139-2d8d-43ac-a6bb-9f69fa9c79ae",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }",
            "Parent": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Thread-Safe Operations",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Thread-Safe Operations"
          ],
          "Data": null,
          "ExpandedName": "Thread-Safe Operations",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
          "Blocks": [],
          "Tests": [
            "[-] Should create thread-safe CPG wrapper",
            "[-] Should handle concurrent operations safely",
            "[-] Should provide thread safety statistics"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "You cannot call a method on a null-valued expression.",
            "Duration": "00:00:00.1416270",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.7151048-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0519900",
            "UserDuration": "00:00:00.0896370",
            "OwnDuration": "00:00:00.1416270",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 217,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should create thread-safe CPG wrapper",
            "[-] Should handle concurrent operations safely",
            "[-] Should provide thread safety statistics"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "5276faa7-b8f1-4dc2-8167-3907f1757474",
            "Ast": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }"
          },
          "StartLine": 297,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 328,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should build call graphs from source code",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Call Graph Builder",
          "Should build call graphs from source code"
        ],
        "Data": null,
        "ExpandedName": "Should build call graphs from source code",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should build call graphs from source code",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Type": 19,
            "Start": 19662,
            "Length": 665,
            "StartLine": 344,
            "StartColumn": 125,
            "EndLine": 364,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "c167251b-b9aa-43fd-955c-4ff2489a1398",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Call Graph Builder",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Call Graph Builder"
          ],
          "Data": null,
          "ExpandedName": "Call Graph Builder",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder",
          "Blocks": [],
          "Tests": [
            "[-] Should build call graphs from source code",
            "[-] Should detect recursive calls"
          ],
          "Result": "Failed",
          "FailedCount": 2,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "You cannot call a method on a null-valued expression.",
            "Duration": "00:00:00.1416270",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.7151048-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0519900",
            "UserDuration": "00:00:00.0896370",
            "OwnDuration": "00:00:00.1416270",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 217,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "98a6b0b4-dc78-47ae-9bf8-49b412cc9dd0",
            "Ast": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should build call graphs from source code",
            "[-] Should detect recursive calls"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "187979b7-bec7-4a9c-a65a-3e15b71daa49",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 337,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 2,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 344,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should detect recursive calls",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Call Graph Builder",
          "Should detect recursive calls"
        ],
        "Data": null,
        "ExpandedName": "Should detect recursive calls",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should detect recursive calls",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Type": 19,
            "Start": 20455,
            "Length": 589,
            "StartLine": 366,
            "StartColumn": 113,
            "EndLine": 381,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "25488cc6-d4bd-45fb-89c9-ef9a628725de",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Call Graph Builder",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Call Graph Builder"
          ],
          "Data": null,
          "ExpandedName": "Call Graph Builder",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder",
          "Blocks": [],
          "Tests": [
            "[-] Should build call graphs from source code",
            "[-] Should detect recursive calls"
          ],
          "Result": "Failed",
          "FailedCount": 2,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "You cannot call a method on a null-valued expression.",
            "Duration": "00:00:00.1416270",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.7151048-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0519900",
            "UserDuration": "00:00:00.0896370",
            "OwnDuration": "00:00:00.1416270",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 217,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "98a6b0b4-dc78-47ae-9bf8-49b412cc9dd0",
            "Ast": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should build call graphs from source code",
            "[-] Should detect recursive calls"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "187979b7-bec7-4a9c-a65a-3e15b71daa49",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 337,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 2,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 366,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should track variable definitions and uses",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Data Flow Tracker",
          "Should track variable definitions and uses"
        ],
        "Data": null,
        "ExpandedName": "Should track variable definitions and uses",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should track variable definitions and uses",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Type": 19,
            "Start": 21478,
            "Length": 475,
            "StartLine": 391,
            "StartColumn": 125,
            "EndLine": 403,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "22750e62-e49d-4c1d-b4fa-f7baaa6e2553",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Data Flow Tracker",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Data Flow Tracker"
          ],
          "Data": null,
          "ExpandedName": "Data Flow Tracker",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker",
          "Blocks": [],
          "Tests": [
            "[-] Should track variable definitions and uses",
            "[-] Should perform taint analysis"
          ],
          "Result": "Failed",
          "FailedCount": 2,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "You cannot call a method on a null-valued expression.",
            "Duration": "00:00:00.1416270",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.7151048-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0519900",
            "UserDuration": "00:00:00.0896370",
            "OwnDuration": "00:00:00.1416270",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 217,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "c4815629-01e2-461a-b09b-c08e08906e39",
            "Ast": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should track variable definitions and uses",
            "[-] Should perform taint analysis"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "ae18a096-4336-4d57-8990-0236cf757f5f",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 384,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 2,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 391,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should perform taint analysis",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Data Flow Tracker",
          "Should perform taint analysis"
        ],
        "Data": null,
        "ExpandedName": "Should perform taint analysis",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should perform taint analysis",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Type": 19,
            "Start": 22080,
            "Length": 563,
            "StartLine": 405,
            "StartColumn": 112,
            "EndLine": 417,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "bbf55d86-d661-439b-a392-3004c371f347",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Data Flow Tracker",
          "Path": [
            "Enhanced Documentation System - CPG Components",
            "Data Flow Tracker"
          ],
          "Data": null,
          "ExpandedName": "Data Flow Tracker",
          "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker",
          "Blocks": [],
          "Tests": [
            "[-] Should track variable definitions and uses",
            "[-] Should perform taint analysis"
          ],
          "Result": "Failed",
          "FailedCount": 2,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - CPG Components",
            "Path": "Enhanced Documentation System - CPG Components",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - CPG Components",
            "ExpandedPath": "Enhanced Documentation System - CPG Components",
            "Blocks": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "You cannot call a method on a null-valued expression.",
            "Duration": "00:00:00.1416270",
            "Id": "",
            "GroupId": "",
            "Tag": "CPG Core",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Thread-Safe Operations [-] Call Graph Builder [-] Data Flow Tracker",
            "Passed": false,
            "First": true,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.7151048-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.0519900",
            "UserDuration": "00:00:00.0896370",
            "OwnDuration": "00:00:00.1416270",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 217,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": false,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "c4815629-01e2-461a-b09b-c08e08906e39",
            "Ast": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should track variable definitions and uses",
            "[-] Should perform taint analysis"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": false,
          "ExecutedAt": "0001-01-01T00:00:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "UserDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "OwnDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "ae18a096-4336-4d57-8990-0236cf757f5f",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 384,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 2,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 405,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should connect to Ollama service",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Ollama API Integration",
          "Should connect to Ollama service"
        ],
        "Data": null,
        "ExpandedName": "Should connect to Ollama service",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should connect to Ollama service",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 149179,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 14,
          "Microseconds": 917,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.7266087962962963E-07,
          "TotalHours": 4.143861111111111E-06,
          "TotalMilliseconds": 14.9179,
          "TotalMicroseconds": 14917.9,
          "TotalNanoseconds": 14917900.0,
          "TotalMinutes": 0.00024863166666666667,
          "TotalSeconds": 0.0149179
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }",
            "Type": 19,
            "Start": 26323,
            "Length": 222,
            "StartLine": 484,
            "StartColumn": 88,
            "EndLine": 489,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "258917d3-84e1-45f1-a69e-da3a03147bd1",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Ollama API Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Ollama API Integration"
          ],
          "Data": null,
          "ExpandedName": "Ollama API Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration",
          "Blocks": [],
          "Tests": [
            "[!] Should connect to Ollama service",
            "[!] Should list available models",
            "[!] Should generate responses for code analysis"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 368676,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 36,
            "Microseconds": 867,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.2670833333333333E-07,
            "TotalHours": 1.0241E-05,
            "TotalMilliseconds": 36.8676,
            "TotalMicroseconds": 36867.6,
            "TotalNanoseconds": 36867600.0,
            "TotalMinutes": 0.00061446,
            "TotalSeconds": 0.0368676
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 6,
            "PassedCount": 0,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:02.5731901",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.8567353-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1104343",
            "UserDuration": "00:00:02.4627558",
            "OwnDuration": "00:00:02.4341397",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 425,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should connect to Ollama service",
            "[!] Should list available models",
            "[!] Should generate responses for code analysis"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.2285392-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 366782,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 36,
            "Microseconds": 678,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.245162037037037E-07,
            "TotalHours": 1.0188388888888888E-05,
            "TotalMilliseconds": 36.6782,
            "TotalMicroseconds": 36678.2,
            "TotalNanoseconds": 36678200.0,
            "TotalMinutes": 0.0006113033333333334,
            "TotalSeconds": 0.0366782
          },
          "UserDuration": {
            "Ticks": 1894,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 189,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.1921296296296296E-09,
            "TotalHours": 5.261111111111111E-08,
            "TotalMilliseconds": 0.1894,
            "TotalMicroseconds": 189.4,
            "TotalNanoseconds": 189400.0,
            "TotalMinutes": 3.156666666666667E-06,
            "TotalSeconds": 0.0001894
          },
          "OwnDuration": {
            "Ticks": 197714,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 19,
            "Microseconds": 771,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.2883564814814815E-07,
            "TotalHours": 5.4920555555555555E-06,
            "TotalMilliseconds": 19.7714,
            "TotalMicroseconds": 19771.4,
            "TotalNanoseconds": 19771400.0,
            "TotalMinutes": 0.00032952333333333334,
            "TotalSeconds": 0.0197714
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e594b21a-03f3-4b66-a136-a96b4d576cdd",
            "Ast": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 483,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 484,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:46:39.2331837-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 149179,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 14,
          "Microseconds": 917,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.7266087962962963E-07,
          "TotalHours": 4.143861111111111E-06,
          "TotalMilliseconds": 14.9179,
          "TotalMicroseconds": 14917.9,
          "TotalNanoseconds": 14917900.0,
          "TotalMinutes": 0.00024863166666666667,
          "TotalSeconds": 0.0149179
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should list available models",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Ollama API Integration",
          "Should list available models"
        ],
        "Data": null,
        "ExpandedName": "Should list available models",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should list available models",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 6979,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 697,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 8.077546296296296E-09,
          "TotalHours": 1.938611111111111E-07,
          "TotalMilliseconds": 0.6979,
          "TotalMicroseconds": 697.9,
          "TotalNanoseconds": 697900.0,
          "TotalMinutes": 1.1631666666666667E-05,
          "TotalSeconds": 0.0006979
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }",
            "Type": 19,
            "Start": 26644,
            "Length": 279,
            "StartLine": 491,
            "StartColumn": 84,
            "EndLine": 497,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "e4616ff8-0d35-4b8f-a794-4f2e817ba5e5",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Ollama API Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Ollama API Integration"
          ],
          "Data": null,
          "ExpandedName": "Ollama API Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration",
          "Blocks": [],
          "Tests": [
            "[!] Should connect to Ollama service",
            "[!] Should list available models",
            "[!] Should generate responses for code analysis"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 368676,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 36,
            "Microseconds": 867,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.2670833333333333E-07,
            "TotalHours": 1.0241E-05,
            "TotalMilliseconds": 36.8676,
            "TotalMicroseconds": 36867.6,
            "TotalNanoseconds": 36867600.0,
            "TotalMinutes": 0.00061446,
            "TotalSeconds": 0.0368676
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 6,
            "PassedCount": 0,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:02.5731901",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.8567353-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1104343",
            "UserDuration": "00:00:02.4627558",
            "OwnDuration": "00:00:02.4341397",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 425,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should connect to Ollama service",
            "[!] Should list available models",
            "[!] Should generate responses for code analysis"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.2285392-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 366782,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 36,
            "Microseconds": 678,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.245162037037037E-07,
            "TotalHours": 1.0188388888888888E-05,
            "TotalMilliseconds": 36.6782,
            "TotalMicroseconds": 36678.2,
            "TotalNanoseconds": 36678200.0,
            "TotalMinutes": 0.0006113033333333334,
            "TotalSeconds": 0.0366782
          },
          "UserDuration": {
            "Ticks": 1894,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 189,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.1921296296296296E-09,
            "TotalHours": 5.261111111111111E-08,
            "TotalMilliseconds": 0.1894,
            "TotalMicroseconds": 189.4,
            "TotalNanoseconds": 189400.0,
            "TotalMinutes": 3.156666666666667E-06,
            "TotalSeconds": 0.0001894
          },
          "OwnDuration": {
            "Ticks": 197714,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 19,
            "Microseconds": 771,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.2883564814814815E-07,
            "TotalHours": 5.4920555555555555E-06,
            "TotalMilliseconds": 19.7714,
            "TotalMicroseconds": 19771.4,
            "TotalNanoseconds": 19771400.0,
            "TotalMinutes": 0.00032952333333333334,
            "TotalSeconds": 0.0197714
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e594b21a-03f3-4b66-a136-a96b4d576cdd",
            "Ast": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 483,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 491,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:46:39.247642-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 6979,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 697,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 8.077546296296296E-09,
          "TotalHours": 1.938611111111111E-07,
          "TotalMilliseconds": 0.6979,
          "TotalMicroseconds": 697.9,
          "TotalNanoseconds": 697900.0,
          "TotalMinutes": 1.1631666666666667E-05,
          "TotalSeconds": 0.0006979
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate responses for code analysis",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Ollama API Integration",
          "Should generate responses for code analysis"
        ],
        "Data": null,
        "ExpandedName": "Should generate responses for code analysis",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration.Should generate responses for code analysis",
        "Result": "Skipped",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 14804,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 1,
          "Microseconds": 480,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.713425925925926E-08,
          "TotalHours": 4.1122222222222223E-07,
          "TotalMilliseconds": 1.4804,
          "TotalMicroseconds": 1480.4,
          "TotalNanoseconds": 1480400.0,
          "TotalMinutes": 2.4673333333333333E-05,
          "TotalSeconds": 0.0014804
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }",
            "Type": 19,
            "Start": 27037,
            "Length": 545,
            "StartLine": 499,
            "StartColumn": 99,
            "EndLine": 508,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "2a1ca1ff-4a62-4434-9a89-fa7f34fbb103",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": true,
        "Block": {
          "Name": "Ollama API Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Ollama API Integration"
          ],
          "Data": null,
          "ExpandedName": "Ollama API Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Ollama API Integration",
          "Blocks": [],
          "Tests": [
            "[!] Should connect to Ollama service",
            "[!] Should list available models",
            "[!] Should generate responses for code analysis"
          ],
          "Result": "Skipped",
          "FailedCount": 0,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 368676,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 36,
            "Microseconds": 867,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.2670833333333333E-07,
            "TotalHours": 1.0241E-05,
            "TotalMilliseconds": 36.8676,
            "TotalMicroseconds": 36867.6,
            "TotalNanoseconds": 36867600.0,
            "TotalMinutes": 0.00061446,
            "TotalSeconds": 0.0368676
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": true,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 6,
            "PassedCount": 0,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:02.5731901",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.8567353-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1104343",
            "UserDuration": "00:00:02.4627558",
            "OwnDuration": "00:00:02.4341397",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 425,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Should connect to Ollama service",
            "[!] Should list available models",
            "[!] Should generate responses for code analysis"
          ],
          "Passed": true,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.2285392-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 366782,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 36,
            "Microseconds": 678,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.245162037037037E-07,
            "TotalHours": 1.0188388888888888E-05,
            "TotalMilliseconds": 36.6782,
            "TotalMicroseconds": 36678.2,
            "TotalNanoseconds": 36678200.0,
            "TotalMinutes": 0.0006113033333333334,
            "TotalSeconds": 0.0366782
          },
          "UserDuration": {
            "Ticks": 1894,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 189,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.1921296296296296E-09,
            "TotalHours": 5.261111111111111E-08,
            "TotalMilliseconds": 0.1894,
            "TotalMicroseconds": 189.4,
            "TotalNanoseconds": 189400.0,
            "TotalMinutes": 3.156666666666667E-06,
            "TotalSeconds": 0.0001894
          },
          "OwnDuration": {
            "Ticks": 197714,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 19,
            "Microseconds": 771,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.2883564814814815E-07,
            "TotalHours": 5.4920555555555555E-06,
            "TotalMilliseconds": 19.7714,
            "TotalMicroseconds": 19771.4,
            "TotalNanoseconds": 19771400.0,
            "TotalMinutes": 0.00032952333333333334,
            "TotalSeconds": 0.0197714
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e594b21a-03f3-4b66-a136-a96b4d576cdd",
            "Ast": "{\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 483,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 3,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 499,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:46:39.2483494-04:00",
        "Passed": true,
        "Skipped": true,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 14804,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 1,
          "Microseconds": 480,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.713425925925926E-08,
          "TotalHours": 4.1122222222222223E-07,
          "TotalMilliseconds": 1.4804,
          "TotalMicroseconds": 1480.4,
          "TotalNanoseconds": 1480400.0,
          "TotalMinutes": 2.4673333333333333E-05,
          "TotalSeconds": 0.0014804
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should create function documentation prompts",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Prompt Templates",
          "Should create function documentation prompts"
        ],
        "Data": null,
        "ExpandedName": "Should create function documentation prompts",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create function documentation prompts",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 28017,
            "Length": 427,
            "StartLine": 518,
            "StartColumn": 127,
            "EndLine": 525,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "e59b77d2-8b42-4f84-a5ba-8a7a2f706bce",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Prompt Templates",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Prompt Templates"
          ],
          "Data": null,
          "ExpandedName": "Prompt Templates",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
          "Blocks": [],
          "Tests": [
            "[-] Should create function documentation prompts",
            "[-] Should create module documentation prompts",
            "[-] Should support variable substitution"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 464071,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 46,
            "Microseconds": 407,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.37119212962963E-07,
            "TotalHours": 1.2890861111111111E-05,
            "TotalMilliseconds": 46.4071,
            "TotalMicroseconds": 46407.1,
            "TotalNanoseconds": 46407100.0,
            "TotalMinutes": 0.0007734516666666666,
            "TotalSeconds": 0.0464071
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 6,
            "PassedCount": 0,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:02.5731901",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.8567353-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1104343",
            "UserDuration": "00:00:02.4627558",
            "OwnDuration": "00:00:02.4341397",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 425,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b058d240-3f68-4dbe-bf2d-b3d521c06952",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should create function documentation prompts",
            "[-] Should create module documentation prompts",
            "[-] Should support variable substitution"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.2654058-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 447373,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 44,
            "Microseconds": 737,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.17792824074074E-07,
            "TotalHours": 1.2427027777777777E-05,
            "TotalMilliseconds": 44.7373,
            "TotalMicroseconds": 44737.3,
            "TotalNanoseconds": 44737300.0,
            "TotalMinutes": 0.0007456216666666667,
            "TotalSeconds": 0.0447373
          },
          "UserDuration": {
            "Ticks": 16698,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 1,
            "Microseconds": 669,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.932638888888889E-08,
            "TotalHours": 4.638333333333333E-07,
            "TotalMilliseconds": 1.6698,
            "TotalMicroseconds": 1669.8,
            "TotalNanoseconds": 1669800.0,
            "TotalMinutes": 2.783E-05,
            "TotalSeconds": 0.0016698
          },
          "OwnDuration": {
            "Ticks": 464071,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 46,
            "Microseconds": 407,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.37119212962963E-07,
            "TotalHours": 1.2890861111111111E-05,
            "TotalMilliseconds": 46.4071,
            "TotalMicroseconds": 46407.1,
            "TotalNanoseconds": 46407100.0,
            "TotalMinutes": 0.0007734516666666666,
            "TotalSeconds": 0.0464071
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "523c184a-faf6-44e3-81b2-c7429831fb34",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 511,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 518,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should create module documentation prompts",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Prompt Templates",
          "Should create module documentation prompts"
        ],
        "Data": null,
        "ExpandedName": "Should create module documentation prompts",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create module documentation prompts",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 28584,
            "Length": 411,
            "StartLine": 527,
            "StartColumn": 125,
            "EndLine": 534,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "7eb56070-7462-4dc8-85d4-3d46da587c3d",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Prompt Templates",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Prompt Templates"
          ],
          "Data": null,
          "ExpandedName": "Prompt Templates",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
          "Blocks": [],
          "Tests": [
            "[-] Should create function documentation prompts",
            "[-] Should create module documentation prompts",
            "[-] Should support variable substitution"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 464071,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 46,
            "Microseconds": 407,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.37119212962963E-07,
            "TotalHours": 1.2890861111111111E-05,
            "TotalMilliseconds": 46.4071,
            "TotalMicroseconds": 46407.1,
            "TotalNanoseconds": 46407100.0,
            "TotalMinutes": 0.0007734516666666666,
            "TotalSeconds": 0.0464071
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 6,
            "PassedCount": 0,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:02.5731901",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.8567353-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1104343",
            "UserDuration": "00:00:02.4627558",
            "OwnDuration": "00:00:02.4341397",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 425,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b058d240-3f68-4dbe-bf2d-b3d521c06952",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should create function documentation prompts",
            "[-] Should create module documentation prompts",
            "[-] Should support variable substitution"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.2654058-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 447373,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 44,
            "Microseconds": 737,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.17792824074074E-07,
            "TotalHours": 1.2427027777777777E-05,
            "TotalMilliseconds": 44.7373,
            "TotalMicroseconds": 44737.3,
            "TotalNanoseconds": 44737300.0,
            "TotalMinutes": 0.0007456216666666667,
            "TotalSeconds": 0.0447373
          },
          "UserDuration": {
            "Ticks": 16698,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 1,
            "Microseconds": 669,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.932638888888889E-08,
            "TotalHours": 4.638333333333333E-07,
            "TotalMilliseconds": 1.6698,
            "TotalMicroseconds": 1669.8,
            "TotalNanoseconds": 1669800.0,
            "TotalMinutes": 2.783E-05,
            "TotalSeconds": 0.0016698
          },
          "OwnDuration": {
            "Ticks": 464071,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 46,
            "Microseconds": 407,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.37119212962963E-07,
            "TotalHours": 1.2890861111111111E-05,
            "TotalMilliseconds": 46.4071,
            "TotalMicroseconds": 46407.1,
            "TotalNanoseconds": 46407100.0,
            "TotalMinutes": 0.0007734516666666666,
            "TotalSeconds": 0.0464071
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "523c184a-faf6-44e3-81b2-c7429831fb34",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 511,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 527,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should support variable substitution",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Prompt Templates",
          "Should support variable substitution"
        ],
        "Data": null,
        "ExpandedName": "Should support variable substitution",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should support variable substitution",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 29129,
            "Length": 542,
            "StartLine": 536,
            "StartColumn": 119,
            "EndLine": 546,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "66c2c9ef-621a-4997-9019-b7a174af24ce",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Prompt Templates",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Prompt Templates"
          ],
          "Data": null,
          "ExpandedName": "Prompt Templates",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
          "Blocks": [],
          "Tests": [
            "[-] Should create function documentation prompts",
            "[-] Should create module documentation prompts",
            "[-] Should support variable substitution"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 464071,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 46,
            "Microseconds": 407,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.37119212962963E-07,
            "TotalHours": 1.2890861111111111E-05,
            "TotalMilliseconds": 46.4071,
            "TotalMicroseconds": 46407.1,
            "TotalNanoseconds": 46407100.0,
            "TotalMinutes": 0.0007734516666666666,
            "TotalSeconds": 0.0464071
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 6,
            "PassedCount": 0,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:02.5731901",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.8567353-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1104343",
            "UserDuration": "00:00:02.4627558",
            "OwnDuration": "00:00:02.4341397",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 425,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b058d240-3f68-4dbe-bf2d-b3d521c06952",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should create function documentation prompts",
            "[-] Should create module documentation prompts",
            "[-] Should support variable substitution"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.2654058-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 447373,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 44,
            "Microseconds": 737,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.17792824074074E-07,
            "TotalHours": 1.2427027777777777E-05,
            "TotalMilliseconds": 44.7373,
            "TotalMicroseconds": 44737.3,
            "TotalNanoseconds": 44737300.0,
            "TotalMinutes": 0.0007456216666666667,
            "TotalSeconds": 0.0447373
          },
          "UserDuration": {
            "Ticks": 16698,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 1,
            "Microseconds": 669,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.932638888888889E-08,
            "TotalHours": 4.638333333333333E-07,
            "TotalMilliseconds": 1.6698,
            "TotalMicroseconds": 1669.8,
            "TotalNanoseconds": 1669800.0,
            "TotalMinutes": 2.783E-05,
            "TotalSeconds": 0.0016698
          },
          "OwnDuration": {
            "Ticks": 464071,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 46,
            "Microseconds": 407,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 5.37119212962963E-07,
            "TotalHours": 1.2890861111111111E-05,
            "TotalMilliseconds": 46.4071,
            "TotalMicroseconds": 46407.1,
            "TotalNanoseconds": 46407100.0,
            "TotalMinutes": 0.0007734516666666666,
            "TotalSeconds": 0.0464071
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "523c184a-faf6-44e3-81b2-c7429831fb34",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 511,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 536,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should cache and retrieve responses",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Response Cache",
          "Should cache and retrieve responses"
        ],
        "Data": null,
        "ExpandedName": "Should cache and retrieve responses",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should cache and retrieve responses",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }",
            "Type": 19,
            "Start": 30089,
            "Length": 485,
            "StartLine": 556,
            "StartColumn": 116,
            "EndLine": 566,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "1d06bbb4-2afe-4d38-ab49-d4de77f4021f",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Response Cache",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Response Cache"
          ],
          "Data": null,
          "ExpandedName": "Response Cache",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
          "Blocks": [],
          "Tests": [
            "[-] Should cache and retrieve responses",
            "[-] Should handle TTL expiration",
            "[-] Should provide cache statistics"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 557757,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 55,
            "Microseconds": 775,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.455520833333333E-07,
            "TotalHours": 1.549325E-05,
            "TotalMilliseconds": 55.7757,
            "TotalMicroseconds": 55775.7,
            "TotalNanoseconds": 55775700.0,
            "TotalMinutes": 0.000929595,
            "TotalSeconds": 0.0557757
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 6,
            "PassedCount": 0,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:02.5731901",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.8567353-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1104343",
            "UserDuration": "00:00:02.4627558",
            "OwnDuration": "00:00:02.4341397",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 425,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0de2609b-7ecf-4fcc-b3d8-ce27d3f00545",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should cache and retrieve responses",
            "[-] Should handle TTL expiration",
            "[-] Should provide cache statistics"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.2749456-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 534179,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 53,
            "Microseconds": 417,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.182627314814815E-07,
            "TotalHours": 1.4838305555555556E-05,
            "TotalMilliseconds": 53.4179,
            "TotalMicroseconds": 53417.9,
            "TotalNanoseconds": 53417900.0,
            "TotalMinutes": 0.0008902983333333334,
            "TotalSeconds": 0.0534179
          },
          "UserDuration": {
            "Ticks": 23578,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 2,
            "Microseconds": 357,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.7289351851851853E-08,
            "TotalHours": 6.549444444444445E-07,
            "TotalMilliseconds": 2.3578,
            "TotalMicroseconds": 2357.8,
            "TotalNanoseconds": 2357800.0,
            "TotalMinutes": 3.9296666666666666E-05,
            "TotalSeconds": 0.0023578
          },
          "OwnDuration": {
            "Ticks": 557757,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 55,
            "Microseconds": 775,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.455520833333333E-07,
            "TotalHours": 1.549325E-05,
            "TotalMilliseconds": 55.7757,
            "TotalMicroseconds": 55775.7,
            "TotalNanoseconds": 55775700.0,
            "TotalMinutes": 0.000929595,
            "TotalSeconds": 0.0557757
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0ea067c2-0220-4bb3-bd45-894af95956a3",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 549,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 556,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should handle TTL expiration",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Response Cache",
          "Should handle TTL expiration"
        ],
        "Data": null,
        "ExpandedName": "Should handle TTL expiration",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should handle TTL expiration",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }",
            "Type": 19,
            "Start": 30698,
            "Length": 522,
            "StartLine": 568,
            "StartColumn": 109,
            "EndLine": 579,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "490694ca-8768-47f1-bd13-14f753681024",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Response Cache",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Response Cache"
          ],
          "Data": null,
          "ExpandedName": "Response Cache",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
          "Blocks": [],
          "Tests": [
            "[-] Should cache and retrieve responses",
            "[-] Should handle TTL expiration",
            "[-] Should provide cache statistics"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 557757,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 55,
            "Microseconds": 775,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.455520833333333E-07,
            "TotalHours": 1.549325E-05,
            "TotalMilliseconds": 55.7757,
            "TotalMicroseconds": 55775.7,
            "TotalNanoseconds": 55775700.0,
            "TotalMinutes": 0.000929595,
            "TotalSeconds": 0.0557757
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 6,
            "PassedCount": 0,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:02.5731901",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.8567353-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1104343",
            "UserDuration": "00:00:02.4627558",
            "OwnDuration": "00:00:02.4341397",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 425,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0de2609b-7ecf-4fcc-b3d8-ce27d3f00545",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should cache and retrieve responses",
            "[-] Should handle TTL expiration",
            "[-] Should provide cache statistics"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.2749456-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 534179,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 53,
            "Microseconds": 417,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.182627314814815E-07,
            "TotalHours": 1.4838305555555556E-05,
            "TotalMilliseconds": 53.4179,
            "TotalMicroseconds": 53417.9,
            "TotalNanoseconds": 53417900.0,
            "TotalMinutes": 0.0008902983333333334,
            "TotalSeconds": 0.0534179
          },
          "UserDuration": {
            "Ticks": 23578,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 2,
            "Microseconds": 357,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.7289351851851853E-08,
            "TotalHours": 6.549444444444445E-07,
            "TotalMilliseconds": 2.3578,
            "TotalMicroseconds": 2357.8,
            "TotalNanoseconds": 2357800.0,
            "TotalMinutes": 3.9296666666666666E-05,
            "TotalSeconds": 0.0023578
          },
          "OwnDuration": {
            "Ticks": 557757,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 55,
            "Microseconds": 775,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.455520833333333E-07,
            "TotalHours": 1.549325E-05,
            "TotalMilliseconds": 55.7757,
            "TotalMicroseconds": 55775.7,
            "TotalNanoseconds": 55775700.0,
            "TotalMinutes": 0.000929595,
            "TotalSeconds": 0.0557757
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0ea067c2-0220-4bb3-bd45-894af95956a3",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 549,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 568,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should provide cache statistics",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Response Cache",
          "Should provide cache statistics"
        ],
        "Data": null,
        "ExpandedName": "Should provide cache statistics",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should provide cache statistics",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }",
            "Type": 19,
            "Start": 31347,
            "Length": 402,
            "StartLine": 581,
            "StartColumn": 112,
            "EndLine": 589,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "16c3578d-3c06-4c6e-9cbe-deb457721528",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Response Cache",
          "Path": [
            "Enhanced Documentation System - LLM Integration",
            "Response Cache"
          ],
          "Data": null,
          "ExpandedName": "Response Cache",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
          "Blocks": [],
          "Tests": [
            "[-] Should cache and retrieve responses",
            "[-] Should handle TTL expiration",
            "[-] Should provide cache statistics"
          ],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 3,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 557757,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 55,
            "Microseconds": 775,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.455520833333333E-07,
            "TotalHours": 1.549325E-05,
            "TotalMilliseconds": 55.7757,
            "TotalMicroseconds": 55775.7,
            "TotalNanoseconds": 55775700.0,
            "TotalMinutes": 0.000929595,
            "TotalSeconds": 0.0557757
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - LLM Integration",
            "Path": "Enhanced Documentation System - LLM Integration",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - LLM Integration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration",
            "Blocks": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 6,
            "PassedCount": 0,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 9,
            "ErrorRecord": "",
            "Duration": "00:00:02.5731901",
            "Id": "",
            "GroupId": "",
            "Tag": "LLM Integration",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[!] Ollama API Integration [-] Prompt Templates [-] Response Cache",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.8567353-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1104343",
            "UserDuration": "00:00:02.4627558",
            "OwnDuration": "00:00:02.4341397",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 425,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0de2609b-7ecf-4fcc-b3d8-ce27d3f00545",
            "Ast": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should cache and retrieve responses",
            "[-] Should handle TTL expiration",
            "[-] Should provide cache statistics"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.2749456-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 534179,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 53,
            "Microseconds": 417,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.182627314814815E-07,
            "TotalHours": 1.4838305555555556E-05,
            "TotalMilliseconds": 53.4179,
            "TotalMicroseconds": 53417.9,
            "TotalNanoseconds": 53417900.0,
            "TotalMinutes": 0.0008902983333333334,
            "TotalSeconds": 0.0534179
          },
          "UserDuration": {
            "Ticks": 23578,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 2,
            "Microseconds": 357,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.7289351851851853E-08,
            "TotalHours": 6.549444444444445E-07,
            "TotalMilliseconds": 2.3578,
            "TotalMicroseconds": 2357.8,
            "TotalNanoseconds": 2357800.0,
            "TotalMinutes": 3.9296666666666666E-05,
            "TotalSeconds": 0.0023578
          },
          "OwnDuration": {
            "Ticks": 557757,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 55,
            "Microseconds": 775,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.455520833333333E-07,
            "TotalHours": 1.549325E-05,
            "TotalMilliseconds": 55.7757,
            "TotalMicroseconds": 55775.7,
            "TotalNanoseconds": 55775700.0,
            "TotalMinutes": 0.000929595,
            "TotalSeconds": 0.0557757
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "0ea067c2-0220-4bb3-bd45-894af95956a3",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 549,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 3,
          "OwnPassedCount": 0,
          "OwnFailedCount": 3,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 581,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate PowerShell documentation templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should generate PowerShell documentation templates"
        ],
        "Data": null,
        "ExpandedName": "Should generate PowerShell documentation templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate PowerShell documentation templates",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 35429,
            "Length": 523,
            "StartLine": 650,
            "StartColumn": 140,
            "EndLine": 658,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "e2eb0bda-d9a7-4add-bb8a-4c32af7eccd3",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Result": "Failed",
          "FailedCount": 5,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 73185,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 7,
            "Microseconds": 318,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.470486111111111E-08,
            "TotalHours": 2.0329166666666668E-06,
            "TotalMilliseconds": 7.3185,
            "TotalMicroseconds": 7318.5,
            "TotalNanoseconds": 7318500.0,
            "TotalMinutes": 0.000121975,
            "TotalSeconds": 0.0073185
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[-] Language-Specific Templates [-] Automation Triggers",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:02.6240217",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($templateModulePaths -and $templateModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-Templates] Testing availability for $($templateModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $templateModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-Templates] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-Templates] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-Templates] ERROR: templateModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Language-Specific Templates [-] Automation Triggers",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:39.2883087-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1295474",
            "UserDuration": "00:00:02.4944743",
            "OwnDuration": "00:00:02.6014926",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($templateModulePaths -and $templateModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-Templates] Testing availability for $($templateModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $templateModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-Templates] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-Templates] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-Templates] ERROR: templateModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 597,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e2b490e5-fc4a-4142-9693-fc3c85e7c933",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.3194679-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 66028,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 6,
            "Microseconds": 602,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 7.64212962962963E-08,
            "TotalHours": 1.8341111111111111E-06,
            "TotalMilliseconds": 6.6028,
            "TotalMicroseconds": 6602.8,
            "TotalNanoseconds": 6602800.0,
            "TotalMinutes": 0.00011004666666666666,
            "TotalSeconds": 0.0066028
          },
          "UserDuration": {
            "Ticks": 7157,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 715,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.283564814814815E-09,
            "TotalHours": 1.9880555555555556E-07,
            "TotalMilliseconds": 0.7157,
            "TotalMicroseconds": 715.7,
            "TotalNanoseconds": 715700.0,
            "TotalMinutes": 1.1928333333333334E-05,
            "TotalSeconds": 0.0007157
          },
          "OwnDuration": {
            "Ticks": 73185,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 7,
            "Microseconds": 318,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.470486111111111E-08,
            "TotalHours": 2.0329166666666668E-06,
            "TotalMilliseconds": 7.3185,
            "TotalMicroseconds": 7318.5,
            "TotalNanoseconds": 7318500.0,
            "TotalMinutes": 0.000121975,
            "TotalSeconds": 0.0073185
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e53643a8-6890-49a5-b3bb-487df2abc1b0",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 643,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 5,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 650,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate Python documentation templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should generate Python documentation templates"
        ],
        "Data": null,
        "ExpandedName": "Should generate Python documentation templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate Python documentation templates",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 36103,
            "Length": 508,
            "StartLine": 660,
            "StartColumn": 136,
            "EndLine": 668,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "d3e572e7-b517-4403-9b41-6f9dcf95cd8d",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Result": "Failed",
          "FailedCount": 5,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 73185,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 7,
            "Microseconds": 318,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.470486111111111E-08,
            "TotalHours": 2.0329166666666668E-06,
            "TotalMilliseconds": 7.3185,
            "TotalMicroseconds": 7318.5,
            "TotalNanoseconds": 7318500.0,
            "TotalMinutes": 0.000121975,
            "TotalSeconds": 0.0073185
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[-] Language-Specific Templates [-] Automation Triggers",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:02.6240217",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($templateModulePaths -and $templateModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-Templates] Testing availability for $($templateModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $templateModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-Templates] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-Templates] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-Templates] ERROR: templateModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Language-Specific Templates [-] Automation Triggers",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:39.2883087-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1295474",
            "UserDuration": "00:00:02.4944743",
            "OwnDuration": "00:00:02.6014926",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($templateModulePaths -and $templateModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-Templates] Testing availability for $($templateModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $templateModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-Templates] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-Templates] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-Templates] ERROR: templateModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 597,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e2b490e5-fc4a-4142-9693-fc3c85e7c933",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.3194679-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 66028,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 6,
            "Microseconds": 602,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 7.64212962962963E-08,
            "TotalHours": 1.8341111111111111E-06,
            "TotalMilliseconds": 6.6028,
            "TotalMicroseconds": 6602.8,
            "TotalNanoseconds": 6602800.0,
            "TotalMinutes": 0.00011004666666666666,
            "TotalSeconds": 0.0066028
          },
          "UserDuration": {
            "Ticks": 7157,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 715,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.283564814814815E-09,
            "TotalHours": 1.9880555555555556E-07,
            "TotalMilliseconds": 0.7157,
            "TotalMicroseconds": 715.7,
            "TotalNanoseconds": 715700.0,
            "TotalMinutes": 1.1928333333333334E-05,
            "TotalSeconds": 0.0007157
          },
          "OwnDuration": {
            "Ticks": 73185,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 7,
            "Microseconds": 318,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.470486111111111E-08,
            "TotalHours": 2.0329166666666668E-06,
            "TotalMilliseconds": 7.3185,
            "TotalMicroseconds": 7318.5,
            "TotalNanoseconds": 7318500.0,
            "TotalMinutes": 0.000121975,
            "TotalSeconds": 0.0073185
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e53643a8-6890-49a5-b3bb-487df2abc1b0",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 643,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 5,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 660,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate C# documentation templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should generate C# documentation templates"
        ],
        "Data": null,
        "ExpandedName": "Should generate C# documentation templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate C# documentation templates",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }",
            "Type": 19,
            "Start": 36758,
            "Length": 523,
            "StartLine": 670,
            "StartColumn": 132,
            "EndLine": 678,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "9314d4a4-8e30-47ff-a19c-8f6a530e008f",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Result": "Failed",
          "FailedCount": 5,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 73185,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 7,
            "Microseconds": 318,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.470486111111111E-08,
            "TotalHours": 2.0329166666666668E-06,
            "TotalMilliseconds": 7.3185,
            "TotalMicroseconds": 7318.5,
            "TotalNanoseconds": 7318500.0,
            "TotalMinutes": 0.000121975,
            "TotalSeconds": 0.0073185
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[-] Language-Specific Templates [-] Automation Triggers",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:02.6240217",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($templateModulePaths -and $templateModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-Templates] Testing availability for $($templateModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $templateModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-Templates] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-Templates] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-Templates] ERROR: templateModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Language-Specific Templates [-] Automation Triggers",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:39.2883087-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1295474",
            "UserDuration": "00:00:02.4944743",
            "OwnDuration": "00:00:02.6014926",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($templateModulePaths -and $templateModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-Templates] Testing availability for $($templateModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $templateModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-Templates] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-Templates] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-Templates] ERROR: templateModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 597,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e2b490e5-fc4a-4142-9693-fc3c85e7c933",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.3194679-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 66028,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 6,
            "Microseconds": 602,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 7.64212962962963E-08,
            "TotalHours": 1.8341111111111111E-06,
            "TotalMilliseconds": 6.6028,
            "TotalMicroseconds": 6602.8,
            "TotalNanoseconds": 6602800.0,
            "TotalMinutes": 0.00011004666666666666,
            "TotalSeconds": 0.0066028
          },
          "UserDuration": {
            "Ticks": 7157,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 715,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.283564814814815E-09,
            "TotalHours": 1.9880555555555556E-07,
            "TotalMilliseconds": 0.7157,
            "TotalMicroseconds": 715.7,
            "TotalNanoseconds": 715700.0,
            "TotalMinutes": 1.1928333333333334E-05,
            "TotalSeconds": 0.0007157
          },
          "OwnDuration": {
            "Ticks": 73185,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 7,
            "Microseconds": 318,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.470486111111111E-08,
            "TotalHours": 2.0329166666666668E-06,
            "TotalMilliseconds": 7.3185,
            "TotalMicroseconds": 7318.5,
            "TotalNanoseconds": 7318500.0,
            "TotalMinutes": 0.000121975,
            "TotalSeconds": 0.0073185
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e53643a8-6890-49a5-b3bb-487df2abc1b0",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 643,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 5,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 670,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should generate JavaScript documentation templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should generate JavaScript documentation templates"
        ],
        "Data": null,
        "ExpandedName": "Should generate JavaScript documentation templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate JavaScript documentation templates",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 37436,
            "Length": 568,
            "StartLine": 680,
            "StartColumn": 140,
            "EndLine": 689,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "d0c2bf3f-e3c9-4445-bd23-5d3fb9044459",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Result": "Failed",
          "FailedCount": 5,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 73185,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 7,
            "Microseconds": 318,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.470486111111111E-08,
            "TotalHours": 2.0329166666666668E-06,
            "TotalMilliseconds": 7.3185,
            "TotalMicroseconds": 7318.5,
            "TotalNanoseconds": 7318500.0,
            "TotalMinutes": 0.000121975,
            "TotalSeconds": 0.0073185
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[-] Language-Specific Templates [-] Automation Triggers",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:02.6240217",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($templateModulePaths -and $templateModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-Templates] Testing availability for $($templateModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $templateModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-Templates] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-Templates] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-Templates] ERROR: templateModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Language-Specific Templates [-] Automation Triggers",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:39.2883087-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1295474",
            "UserDuration": "00:00:02.4944743",
            "OwnDuration": "00:00:02.6014926",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($templateModulePaths -and $templateModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-Templates] Testing availability for $($templateModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $templateModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-Templates] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-Templates] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-Templates] ERROR: templateModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 597,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e2b490e5-fc4a-4142-9693-fc3c85e7c933",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.3194679-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 66028,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 6,
            "Microseconds": 602,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 7.64212962962963E-08,
            "TotalHours": 1.8341111111111111E-06,
            "TotalMilliseconds": 6.6028,
            "TotalMicroseconds": 6602.8,
            "TotalNanoseconds": 6602800.0,
            "TotalMinutes": 0.00011004666666666666,
            "TotalSeconds": 0.0066028
          },
          "UserDuration": {
            "Ticks": 7157,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 715,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.283564814814815E-09,
            "TotalHours": 1.9880555555555556E-07,
            "TotalMilliseconds": 0.7157,
            "TotalMicroseconds": 715.7,
            "TotalNanoseconds": 715700.0,
            "TotalMinutes": 1.1928333333333334E-05,
            "TotalSeconds": 0.0007157
          },
          "OwnDuration": {
            "Ticks": 73185,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 7,
            "Microseconds": 318,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.470486111111111E-08,
            "TotalHours": 2.0329166666666668E-06,
            "TotalMilliseconds": 7.3185,
            "TotalMicroseconds": 7318.5,
            "TotalNanoseconds": 7318500.0,
            "TotalMinutes": 0.000121975,
            "TotalSeconds": 0.0073185
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e53643a8-6890-49a5-b3bb-487df2abc1b0",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 643,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 5,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 680,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should detect language from file extensions",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates",
          "Should detect language from file extensions"
        ],
        "Data": null,
        "ExpandedName": "Should detect language from file extensions",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should detect language from file extensions",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 38152,
            "Length": 581,
            "StartLine": 691,
            "StartColumn": 133,
            "EndLine": 699,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "910f5fab-ca74-45d9-9679-fb925b38bdd5",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Language-Specific Templates",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Language-Specific Templates"
          ],
          "Data": null,
          "ExpandedName": "Language-Specific Templates",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
          "Blocks": [],
          "Tests": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Result": "Failed",
          "FailedCount": 5,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 73185,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 7,
            "Microseconds": 318,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.470486111111111E-08,
            "TotalHours": 2.0329166666666668E-06,
            "TotalMilliseconds": 7.3185,
            "TotalMicroseconds": 7318.5,
            "TotalNanoseconds": 7318500.0,
            "TotalMinutes": 0.000121975,
            "TotalSeconds": 0.0073185
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[-] Language-Specific Templates [-] Automation Triggers",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:02.6240217",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($templateModulePaths -and $templateModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-Templates] Testing availability for $($templateModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $templateModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-Templates] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-Templates] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-Templates] ERROR: templateModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Language-Specific Templates [-] Automation Triggers",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:39.2883087-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1295474",
            "UserDuration": "00:00:02.4944743",
            "OwnDuration": "00:00:02.6014926",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($templateModulePaths -and $templateModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-Templates] Testing availability for $($templateModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $templateModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-Templates] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-Templates] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-Templates] ERROR: templateModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 597,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e2b490e5-fc4a-4142-9693-fc3c85e7c933",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should generate PowerShell documentation templates",
            "[-] Should generate Python documentation templates",
            "[-] Should generate C# documentation templates",
            "[-] Should generate JavaScript documentation templates",
            "[-] Should detect language from file extensions"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.3194679-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 66028,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 6,
            "Microseconds": 602,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 7.64212962962963E-08,
            "TotalHours": 1.8341111111111111E-06,
            "TotalMilliseconds": 6.6028,
            "TotalMicroseconds": 6602.8,
            "TotalNanoseconds": 6602800.0,
            "TotalMinutes": 0.00011004666666666666,
            "TotalSeconds": 0.0066028
          },
          "UserDuration": {
            "Ticks": 7157,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 715,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.283564814814815E-09,
            "TotalHours": 1.9880555555555556E-07,
            "TotalMilliseconds": 0.7157,
            "TotalMicroseconds": 715.7,
            "TotalNanoseconds": 715700.0,
            "TotalMinutes": 1.1928333333333334E-05,
            "TotalSeconds": 0.0007157
          },
          "OwnDuration": {
            "Ticks": 73185,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 7,
            "Microseconds": 318,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 8.470486111111111E-08,
            "TotalHours": 2.0329166666666668E-06,
            "TotalMilliseconds": 7.3185,
            "TotalMicroseconds": 7318.5,
            "TotalNanoseconds": 7318500.0,
            "TotalMinutes": 0.000121975,
            "TotalSeconds": 0.0073185
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "e53643a8-6890-49a5-b3bb-487df2abc1b0",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 643,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 5,
          "OwnPassedCount": 0,
          "OwnFailedCount": 5,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 691,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should initialize documentation triggers",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Automation Triggers",
          "Should initialize documentation triggers"
        ],
        "Data": null,
        "ExpandedName": "Should initialize documentation triggers",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should initialize documentation triggers",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }",
            "Type": 19,
            "Start": 39186,
            "Length": 235,
            "StartLine": 709,
            "StartColumn": 131,
            "EndLine": 714,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "b556afe0-65d4-4f6e-bf9f-a74293663ffa",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Automation Triggers",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Automation Triggers"
          ],
          "Data": null,
          "ExpandedName": "Automation Triggers",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers",
          "Blocks": [],
          "Tests": [
            "[-] Should initialize documentation triggers",
            "[-] Should log trigger activity"
          ],
          "Result": "Failed",
          "FailedCount": 2,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 152106,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 15,
            "Microseconds": 210,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.7604861111111112E-07,
            "TotalHours": 4.225166666666666E-06,
            "TotalMilliseconds": 15.2106,
            "TotalMicroseconds": 15210.6,
            "TotalNanoseconds": 15210600.0,
            "TotalMinutes": 0.00025351,
            "TotalSeconds": 0.0152106
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[-] Language-Specific Templates [-] Automation Triggers",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:02.6240217",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($templateModulePaths -and $templateModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-Templates] Testing availability for $($templateModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $templateModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-Templates] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-Templates] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-Templates] ERROR: templateModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Language-Specific Templates [-] Automation Triggers",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:39.2883087-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1295474",
            "UserDuration": "00:00:02.4944743",
            "OwnDuration": "00:00:02.6014926",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($templateModulePaths -and $templateModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-Templates] Testing availability for $($templateModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $templateModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-Templates] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-Templates] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-Templates] ERROR: templateModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 597,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "26ca46cc-c279-4971-be3e-fde80f44d189",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should initialize documentation triggers",
            "[-] Should log trigger activity"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.3267849-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 138611,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 13,
            "Microseconds": 861,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.6042939814814815E-07,
            "TotalHours": 3.8503055555555555E-06,
            "TotalMilliseconds": 13.8611,
            "TotalMicroseconds": 13861.1,
            "TotalNanoseconds": 13861100.0,
            "TotalMinutes": 0.00023101833333333334,
            "TotalSeconds": 0.0138611
          },
          "UserDuration": {
            "Ticks": 13495,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 1,
            "Microseconds": 349,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.5619212962962962E-08,
            "TotalHours": 3.748611111111111E-07,
            "TotalMilliseconds": 1.3495,
            "TotalMicroseconds": 1349.5,
            "TotalNanoseconds": 1349500.0,
            "TotalMinutes": 2.2491666666666667E-05,
            "TotalSeconds": 0.0013495
          },
          "OwnDuration": {
            "Ticks": 152106,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 15,
            "Microseconds": 210,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.7604861111111112E-07,
            "TotalHours": 4.225166666666666E-06,
            "TotalMilliseconds": 15.2106,
            "TotalMicroseconds": 15210.6,
            "TotalNanoseconds": 15210600.0,
            "TotalMinutes": 0.00025351,
            "TotalSeconds": 0.0152106
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "542dc787-f877-4bb0-8fad-d7e55eeb8dad",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 702,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 2,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 709,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should log trigger activity",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Automation Triggers",
          "Should log trigger activity"
        ],
        "Data": null,
        "ExpandedName": "Should log trigger activity",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should log trigger activity",
        "Result": "Failed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }",
            "Type": 19,
            "Start": 39554,
            "Length": 710,
            "StartLine": 716,
            "StartColumn": 118,
            "EndLine": 731,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "bf7c42c6-45e3-49fc-843d-432c38de348e",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Automation Triggers",
          "Path": [
            "Enhanced Documentation System - Templates & Automation",
            "Automation Triggers"
          ],
          "Data": null,
          "ExpandedName": "Automation Triggers",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers",
          "Blocks": [],
          "Tests": [
            "[-] Should initialize documentation triggers",
            "[-] Should log trigger activity"
          ],
          "Result": "Failed",
          "FailedCount": 2,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [
            "Cannot index into a null array."
          ],
          "Duration": {
            "Ticks": 152106,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 15,
            "Microseconds": 210,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.7604861111111112E-07,
            "TotalHours": 4.225166666666666E-06,
            "TotalMilliseconds": 15.2106,
            "TotalMicroseconds": 15210.6,
            "TotalNanoseconds": 15210600.0,
            "TotalMinutes": 0.00025351,
            "TotalSeconds": 0.0152106
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Templates & Automation",
            "Path": "Enhanced Documentation System - Templates & Automation",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Templates & Automation",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
            "Blocks": "[-] Language-Specific Templates [-] Automation Triggers",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 7,
            "PassedCount": 0,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 7,
            "ErrorRecord": "",
            "Duration": "00:00:02.6240217",
            "Id": "",
            "GroupId": "",
            "Tag": "Templates Automation",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($templateModulePaths -and $templateModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-Templates] Testing availability for $($templateModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $templateModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-Templates] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-Templates] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-Templates] ERROR: templateModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Language-Specific Templates [-] Automation Triggers",
            "Passed": false,
            "First": false,
            "Last": false,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:39.2883087-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1295474",
            "UserDuration": "00:00:02.4944743",
            "OwnDuration": "00:00:02.6014926",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($templateModulePaths -and $templateModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-Templates] Testing availability for $($templateModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $templateModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-Templates] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-Templates] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-Templates] ERROR: templateModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    ",
            "StartLine": 597,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "26ca46cc-c279-4971-be3e-fde80f44d189",
            "Ast": "{\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should initialize documentation triggers",
            "[-] Should log trigger activity"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.3267849-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 138611,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 13,
            "Microseconds": 861,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.6042939814814815E-07,
            "TotalHours": 3.8503055555555555E-06,
            "TotalMilliseconds": 13.8611,
            "TotalMicroseconds": 13861.1,
            "TotalNanoseconds": 13861100.0,
            "TotalMinutes": 0.00023101833333333334,
            "TotalSeconds": 0.0138611
          },
          "UserDuration": {
            "Ticks": 13495,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 1,
            "Microseconds": 349,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.5619212962962962E-08,
            "TotalHours": 3.748611111111111E-07,
            "TotalMilliseconds": 1.3495,
            "TotalMicroseconds": 1349.5,
            "TotalNanoseconds": 1349500.0,
            "TotalMinutes": 2.2491666666666667E-05,
            "TotalSeconds": 0.0013495
          },
          "OwnDuration": {
            "Ticks": 152106,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 15,
            "Microseconds": 210,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.7604861111111112E-07,
            "TotalHours": 4.225166666666666E-06,
            "TotalMilliseconds": 15.2106,
            "TotalMicroseconds": 15210.6,
            "TotalNanoseconds": 15210600.0,
            "TotalMinutes": 0.00025351,
            "TotalSeconds": 0.0152106
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "542dc787-f877-4bb0-8fad-d7e55eeb8dad",
            "Ast": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }"
          },
          "StartLine": 702,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 2,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 716,
        "Executed": false,
        "ExecutedAt": null,
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should meet cache performance benchmarks",
        "Path": [
          "Enhanced Documentation System - Performance",
          "Cache Performance",
          "Should meet cache performance benchmarks"
        ],
        "Data": null,
        "ExpandedName": "Should meet cache performance benchmarks",
        "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should meet cache performance benchmarks",
        "Result": "Failed",
        "ErrorRecord": [
          {
            "Exception": "System.Management.Automation.CommandNotFoundException: The term 'New-PerformanceCache' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\n   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
            "TargetObject": "New-PerformanceCache",
            "CategoryInfo": "ObjectNotFound: (New-PerformanceCache:String) [], CommandNotFoundException",
            "FullyQualifiedErrorId": "CommandNotFoundException",
            "ErrorDetails": null,
            "InvocationInfo": "System.Management.Automation.InvocationInfo",
            "ScriptStackTrace": "at <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 784\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2157\r\nat Invoke-TestItem, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1199\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 835\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60",
            "PipelineIterationInfo": ""
          }
        ],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 307272,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 30,
          "Microseconds": 727,
          "Nanoseconds": 200,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 3.556388888888889E-07,
          "TotalHours": 8.535333333333333E-06,
          "TotalMilliseconds": 30.7272,
          "TotalMicroseconds": 30727.2,
          "TotalNanoseconds": 30727200.0,
          "TotalMinutes": 0.00051212,
          "TotalSeconds": 0.0307272
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }",
            "Type": 19,
            "Start": 43152,
            "Length": 841,
            "StartLine": 783,
            "StartColumn": 122,
            "EndLine": 803,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "d6033451-b997-4c8c-b3d7-698ca8242304",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }",
            "Parent": "{\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Cache Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "Cache Performance"
          ],
          "Data": null,
          "ExpandedName": "Cache Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance",
          "Blocks": [],
          "Tests": [
            "[-] Should meet cache performance benchmarks",
            "[-] Should handle cache warming efficiently"
          ],
          "Result": "Failed",
          "FailedCount": 2,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 558568,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 55,
            "Microseconds": 856,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.464907407407407E-07,
            "TotalHours": 1.5515777777777777E-05,
            "TotalMilliseconds": 55.8568,
            "TotalMicroseconds": 55856.8,
            "TotalNanoseconds": 55856800.0,
            "TotalMinutes": 0.0009309466666666666,
            "TotalSeconds": 0.0558568
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 3,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:04.4023146",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Passed": false,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:39.3391867-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1783972",
            "UserDuration": "00:00:04.2239174",
            "OwnDuration": "00:00:02.4730530",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 739,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should meet cache performance benchmarks",
            "[-] Should handle cache warming efficiently"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.3848329-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 186724,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 18,
            "Microseconds": 672,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.1611574074074075E-07,
            "TotalHours": 5.186777777777778E-06,
            "TotalMilliseconds": 18.6724,
            "TotalMicroseconds": 18672.4,
            "TotalNanoseconds": 18672400.0,
            "TotalMinutes": 0.00031120666666666666,
            "TotalSeconds": 0.0186724
          },
          "UserDuration": {
            "Ticks": 371844,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 37,
            "Microseconds": 184,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.30375E-07,
            "TotalHours": 1.0329E-05,
            "TotalMilliseconds": 37.1844,
            "TotalMicroseconds": 37184.4,
            "TotalNanoseconds": 37184400.0,
            "TotalMinutes": 0.00061974,
            "TotalSeconds": 0.0371844
          },
          "OwnDuration": {
            "Ticks": 61763,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 6,
            "Microseconds": 176,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 7.14849537037037E-08,
            "TotalHours": 1.7156388888888888E-06,
            "TotalMilliseconds": 6.1763,
            "TotalMicroseconds": 6176.3,
            "TotalNanoseconds": 6176300.0,
            "TotalMinutes": 0.00010293833333333333,
            "TotalSeconds": 0.0061763
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "31e410bb-bc7c-4f1c-8d17-b63458d59b16",
            "Ast": "{\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }"
          },
          "StartLine": 781,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 2,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 783,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:46:39.3860851-04:00",
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 216227,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 21,
          "Microseconds": 622,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.502627314814815E-07,
          "TotalHours": 6.006305555555556E-06,
          "TotalMilliseconds": 21.6227,
          "TotalMicroseconds": 21622.7,
          "TotalNanoseconds": 21622700.0,
          "TotalMinutes": 0.00036037833333333333,
          "TotalSeconds": 0.0216227
        },
        "FrameworkDuration": {
          "Ticks": 91045,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 9,
          "Microseconds": 104,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.053761574074074E-07,
          "TotalHours": 2.529027777777778E-06,
          "TotalMilliseconds": 9.1045,
          "TotalMicroseconds": 9104.5,
          "TotalNanoseconds": 9104500.0,
          "TotalMinutes": 0.00015174166666666666,
          "TotalSeconds": 0.0091045
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should handle cache warming efficiently",
        "Path": [
          "Enhanced Documentation System - Performance",
          "Cache Performance",
          "Should handle cache warming efficiently"
        ],
        "Data": null,
        "ExpandedName": "Should handle cache warming efficiently",
        "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should handle cache warming efficiently",
        "Result": "Failed",
        "ErrorRecord": [
          {
            "Exception": "System.Management.Automation.CommandNotFoundException: The term 'New-PerformanceCache' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\n   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
            "TargetObject": "New-PerformanceCache",
            "CategoryInfo": "ObjectNotFound: (New-PerformanceCache:String) [], CommandNotFoundException",
            "FullyQualifiedErrorId": "CommandNotFoundException",
            "ErrorDetails": null,
            "InvocationInfo": "System.Management.Automation.InvocationInfo",
            "ScriptStackTrace": "at <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 806\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2157\r\nat Invoke-TestItem, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1199\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 835\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60",
            "PipelineIterationInfo": ""
          }
        ],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 189533,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 18,
          "Microseconds": 953,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.1936689814814814E-07,
          "TotalHours": 5.264805555555555E-06,
          "TotalMilliseconds": 18.9533,
          "TotalMicroseconds": 18953.3,
          "TotalNanoseconds": 18953300.0,
          "TotalMinutes": 0.00031588833333333333,
          "TotalSeconds": 0.0189533
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }",
            "Type": 19,
            "Start": 44129,
            "Length": 640,
            "StartLine": 805,
            "StartColumn": 121,
            "EndLine": 816,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "79d19557-2eeb-44df-8f89-1494acea802c",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }",
            "Parent": "{\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Cache Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "Cache Performance"
          ],
          "Data": null,
          "ExpandedName": "Cache Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance",
          "Blocks": [],
          "Tests": [
            "[-] Should meet cache performance benchmarks",
            "[-] Should handle cache warming efficiently"
          ],
          "Result": "Failed",
          "FailedCount": 2,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 558568,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 55,
            "Microseconds": 856,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.464907407407407E-07,
            "TotalHours": 1.5515777777777777E-05,
            "TotalMilliseconds": 55.8568,
            "TotalMicroseconds": 55856.8,
            "TotalNanoseconds": 55856800.0,
            "TotalMinutes": 0.0009309466666666666,
            "TotalSeconds": 0.0558568
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 3,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:04.4023146",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Passed": false,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:39.3391867-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1783972",
            "UserDuration": "00:00:04.2239174",
            "OwnDuration": "00:00:02.4730530",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 739,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should meet cache performance benchmarks",
            "[-] Should handle cache warming efficiently"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.3848329-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 186724,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 18,
            "Microseconds": 672,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.1611574074074075E-07,
            "TotalHours": 5.186777777777778E-06,
            "TotalMilliseconds": 18.6724,
            "TotalMicroseconds": 18672.4,
            "TotalNanoseconds": 18672400.0,
            "TotalMinutes": 0.00031120666666666666,
            "TotalSeconds": 0.0186724
          },
          "UserDuration": {
            "Ticks": 371844,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 37,
            "Microseconds": 184,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.30375E-07,
            "TotalHours": 1.0329E-05,
            "TotalMilliseconds": 37.1844,
            "TotalMicroseconds": 37184.4,
            "TotalNanoseconds": 37184400.0,
            "TotalMinutes": 0.00061974,
            "TotalSeconds": 0.0371844
          },
          "OwnDuration": {
            "Ticks": 61763,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 6,
            "Microseconds": 176,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 7.14849537037037E-08,
            "TotalHours": 1.7156388888888888E-06,
            "TotalMilliseconds": 6.1763,
            "TotalMicroseconds": 6176.3,
            "TotalNanoseconds": 6176300.0,
            "TotalMinutes": 0.00010293833333333333,
            "TotalSeconds": 0.0061763
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "31e410bb-bc7c-4f1c-8d17-b63458d59b16",
            "Ast": "{\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }"
          },
          "StartLine": 781,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 0,
          "OwnFailedCount": 2,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 805,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:46:39.4168867-04:00",
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 153837,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 15,
          "Microseconds": 383,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.7805208333333332E-07,
          "TotalHours": 4.27325E-06,
          "TotalMilliseconds": 15.3837,
          "TotalMicroseconds": 15383.7,
          "TotalNanoseconds": 15383700.0,
          "TotalMinutes": 0.000256395,
          "TotalSeconds": 0.0153837
        },
        "FrameworkDuration": {
          "Ticks": 35696,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 3,
          "Microseconds": 569,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.1314814814814815E-08,
          "TotalHours": 9.915555555555556E-07,
          "TotalMilliseconds": 3.5696,
          "TotalMicroseconds": 3569.6,
          "TotalNanoseconds": 3569600.0,
          "TotalMinutes": 5.9493333333333335E-05,
          "TotalSeconds": 0.0035696
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should process files at 100+ files per second",
        "Path": [
          "Enhanced Documentation System - Performance",
          "File Processing Performance",
          "Should process files at 100+ files per second"
        ],
        "Data": null,
        "ExpandedName": "Should process files at 100+ files per second",
        "ExpandedPath": "Enhanced Documentation System - Performance.File Processing Performance.Should process files at 100+ files per second",
        "Result": "Passed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 454640,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 45,
          "Microseconds": 464,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.262037037037037E-07,
          "TotalHours": 1.2628888888888888E-05,
          "TotalMilliseconds": 45.464,
          "TotalMicroseconds": 45464.0,
          "TotalNanoseconds": 45464000.0,
          "TotalMinutes": 0.0007577333333333333,
          "TotalSeconds": 0.045464
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }",
            "Type": 19,
            "Start": 46114,
            "Length": 1371,
            "StartLine": 852,
            "StartColumn": 64,
            "EndLine": 877,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "7f944080-7af9-4760-b055-a2106b892c50",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }",
            "Parent": "{\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "File Processing Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "File Processing Performance"
          ],
          "Data": null,
          "ExpandedName": "File Processing Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.File Processing Performance",
          "Blocks": [],
          "Tests": [
            "[+] Should process files at 100+ files per second",
            "[+] Should handle incremental updates efficiently"
          ],
          "Result": "Passed",
          "FailedCount": 0,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 1775735,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 177,
            "Microseconds": 573,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.0552488425925925E-06,
            "TotalHours": 4.932597222222222E-05,
            "TotalMilliseconds": 177.5735,
            "TotalMicroseconds": 177573.5,
            "TotalNanoseconds": 177573500.0,
            "TotalMinutes": 0.0029595583333333333,
            "TotalSeconds": 0.1775735
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 3,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:04.4023146",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Passed": false,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:39.3391867-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1783972",
            "UserDuration": "00:00:04.2239174",
            "OwnDuration": "00:00:02.4730530",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 739,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "461f50fb-fda4-4ba2-9162-7abd26cde2f1",
            "Ast": "{\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[+] Should process files at 100+ files per second",
            "[+] Should handle incremental updates efficiently"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.4406784-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 252192,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 25,
            "Microseconds": 219,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.918888888888889E-07,
            "TotalHours": 7.005333333333333E-06,
            "TotalMilliseconds": 25.2192,
            "TotalMicroseconds": 25219.2,
            "TotalNanoseconds": 25219200.0,
            "TotalMinutes": 0.00042032,
            "TotalSeconds": 0.0252192
          },
          "UserDuration": {
            "Ticks": 1523543,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 152,
            "Microseconds": 354,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.7633599537037038E-06,
            "TotalHours": 4.232063888888889E-05,
            "TotalMilliseconds": 152.3543,
            "TotalMicroseconds": 152354.3,
            "TotalNanoseconds": 152354300.0,
            "TotalMinutes": 0.0025392383333333332,
            "TotalSeconds": 0.1523543
          },
          "OwnDuration": {
            "Ticks": 1120349,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 112,
            "Microseconds": 34,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.2967002314814816E-06,
            "TotalHours": 3.1120805555555556E-05,
            "TotalMilliseconds": 112.0349,
            "TotalMicroseconds": 112034.9,
            "TotalNanoseconds": 112034900.0,
            "TotalMinutes": 0.0018672483333333333,
            "TotalSeconds": 0.1120349
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "6747539c-9b7e-4856-8f2c-40565cab970a",
            "Ast": "{\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }"
          },
          "StartLine": 819,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 2,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": false,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 852,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:46:39.4927286-04:00",
        "Passed": true,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 444876,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 44,
          "Microseconds": 487,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.149027777777778E-07,
          "TotalHours": 1.2357666666666667E-05,
          "TotalMilliseconds": 44.4876,
          "TotalMicroseconds": 44487.6,
          "TotalNanoseconds": 44487600.0,
          "TotalMinutes": 0.00074146,
          "TotalSeconds": 0.0444876
        },
        "FrameworkDuration": {
          "Ticks": 9764,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 976,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.1300925925925926E-08,
          "TotalHours": 2.7122222222222225E-07,
          "TotalMilliseconds": 0.9764,
          "TotalMicroseconds": 976.4,
          "TotalNanoseconds": 976400.0,
          "TotalMinutes": 1.6273333333333332E-05,
          "TotalSeconds": 0.0009764
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should handle incremental updates efficiently",
        "Path": [
          "Enhanced Documentation System - Performance",
          "File Processing Performance",
          "Should handle incremental updates efficiently"
        ],
        "Data": null,
        "ExpandedName": "Should handle incremental updates efficiently",
        "ExpandedPath": "Enhanced Documentation System - Performance.File Processing Performance.Should handle incremental updates efficiently",
        "Result": "Passed",
        "ErrorRecord": [],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 200746,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 20,
          "Microseconds": 74,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.323449074074074E-07,
          "TotalHours": 5.5762777777777775E-06,
          "TotalMilliseconds": 20.0746,
          "TotalMicroseconds": 20074.6,
          "TotalNanoseconds": 20074600.0,
          "TotalMinutes": 0.00033457666666666664,
          "TotalSeconds": 0.0200746
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }",
            "Type": 19,
            "Start": 47640,
            "Length": 938,
            "StartLine": 879,
            "StartColumn": 140,
            "EndLine": 900,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "8fb61014-09ef-4127-bdac-3ded172d314a",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }",
            "Parent": "{\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "File Processing Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "File Processing Performance"
          ],
          "Data": null,
          "ExpandedName": "File Processing Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.File Processing Performance",
          "Blocks": [],
          "Tests": [
            "[+] Should process files at 100+ files per second",
            "[+] Should handle incremental updates efficiently"
          ],
          "Result": "Passed",
          "FailedCount": 0,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 2,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 1775735,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 177,
            "Microseconds": 573,
            "Nanoseconds": 500,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.0552488425925925E-06,
            "TotalHours": 4.932597222222222E-05,
            "TotalMilliseconds": 177.5735,
            "TotalMicroseconds": 177573.5,
            "TotalNanoseconds": 177573500.0,
            "TotalMinutes": 0.0029595583333333333,
            "TotalSeconds": 0.1775735
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 3,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:04.4023146",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Passed": false,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:39.3391867-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1783972",
            "UserDuration": "00:00:04.2239174",
            "OwnDuration": "00:00:02.4730530",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 739,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "461f50fb-fda4-4ba2-9162-7abd26cde2f1",
            "Ast": "{\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[+] Should process files at 100+ files per second",
            "[+] Should handle incremental updates efficiently"
          ],
          "Passed": true,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.4406784-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 252192,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 25,
            "Microseconds": 219,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.918888888888889E-07,
            "TotalHours": 7.005333333333333E-06,
            "TotalMilliseconds": 25.2192,
            "TotalMicroseconds": 25219.2,
            "TotalNanoseconds": 25219200.0,
            "TotalMinutes": 0.00042032,
            "TotalSeconds": 0.0252192
          },
          "UserDuration": {
            "Ticks": 1523543,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 152,
            "Microseconds": 354,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.7633599537037038E-06,
            "TotalHours": 4.232063888888889E-05,
            "TotalMilliseconds": 152.3543,
            "TotalMicroseconds": 152354.3,
            "TotalNanoseconds": 152354300.0,
            "TotalMinutes": 0.0025392383333333332,
            "TotalSeconds": 0.1523543
          },
          "OwnDuration": {
            "Ticks": 1120349,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 112,
            "Microseconds": 34,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.2967002314814816E-06,
            "TotalHours": 3.1120805555555556E-05,
            "TotalMilliseconds": 112.0349,
            "TotalMicroseconds": 112034.9,
            "TotalNanoseconds": 112034900.0,
            "TotalMinutes": 0.0018672483333333333,
            "TotalSeconds": 0.1120349
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "6747539c-9b7e-4856-8f2c-40565cab970a",
            "Ast": "{\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }"
          },
          "StartLine": 819,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 2,
          "OwnPassedCount": 2,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": false,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 879,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:46:39.5382207-04:00",
        "Passed": true,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 194243,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 19,
          "Microseconds": 424,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.2481828703703705E-07,
          "TotalHours": 5.395638888888889E-06,
          "TotalMilliseconds": 19.4243,
          "TotalMicroseconds": 19424.3,
          "TotalNanoseconds": 19424300.0,
          "TotalMinutes": 0.00032373833333333333,
          "TotalSeconds": 0.0194243
        },
        "FrameworkDuration": {
          "Ticks": 6503,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 650,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 7.52662037037037E-09,
          "TotalHours": 1.806388888888889E-07,
          "TotalMilliseconds": 0.6503,
          "TotalMicroseconds": 650.3,
          "TotalNanoseconds": 650300.0,
          "TotalMinutes": 1.0838333333333333E-05,
          "TotalSeconds": 0.0006503
        },
        "PluginData": null,
        "FrameworkData": null
      },
      {
        "Name": "Should demonstrate parallel processing benefits",
        "Path": [
          "Enhanced Documentation System - Performance",
          "Parallel Processing Performance",
          "Should demonstrate parallel processing benefits"
        ],
        "Data": null,
        "ExpandedName": "Should demonstrate parallel processing benefits",
        "ExpandedPath": "Enhanced Documentation System - Performance.Parallel Processing Performance.Should demonstrate parallel processing benefits",
        "Result": "Failed",
        "ErrorRecord": [
          {
            "Exception": "System.Exception: Expected the actual value to be less than 403.0951, but got 680.5131.",
            "TargetObject": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "CategoryInfo": "InvalidResult: (System.Collections.…ring,System.Object]:Dictionary`2) [], Exception",
            "FullyQualifiedErrorId": "PesterAssertionFailed",
            "ErrorDetails": null,
            "InvocationInfo": "System.Management.Automation.InvocationInfo",
            "ScriptStackTrace": "at Invoke-Assertion, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 8250\r\nat Should<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 8193\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 924\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2157\r\nat Invoke-TestItem, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1199\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 835\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60",
            "PipelineIterationInfo": ""
          }
        ],
        "StandardOutput": null,
        "Duration": {
          "Ticks": 15123201,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 512,
          "Microseconds": 320,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 1,
          "TotalDays": 1.750370486111111E-05,
          "TotalHours": 0.00042008891666666667,
          "TotalMilliseconds": 1512.3201,
          "TotalMicroseconds": 1512320.1,
          "TotalNanoseconds": 1512320100.0,
          "TotalMinutes": 0.025205335,
          "TotalSeconds": 1.5123201
        },
        "ItemType": "Test",
        "Id": "",
        "GroupId": "",
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }",
            "Type": 19,
            "Start": 48797,
            "Length": 1070,
            "StartLine": 905,
            "StartColumn": 130,
            "EndLine": 925,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "a5664aac-4fc4-4d27-a295-8a52da871e52",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "$sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }",
            "Parent": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }"
          }
        },
        "Tag": null,
        "Focus": false,
        "Skip": false,
        "Block": {
          "Name": "Parallel Processing Performance",
          "Path": [
            "Enhanced Documentation System - Performance",
            "Parallel Processing Performance"
          ],
          "Data": null,
          "ExpandedName": "Parallel Processing Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance.Parallel Processing Performance",
          "Blocks": [],
          "Tests": [
            "[-] Should demonstrate parallel processing benefits"
          ],
          "Result": "Failed",
          "FailedCount": 1,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 1,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 16958313,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 695,
            "Microseconds": 831,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 1,
            "TotalDays": 1.9627677083333333E-05,
            "TotalHours": 0.00047106425,
            "TotalMilliseconds": 1695.8313,
            "TotalMicroseconds": 1695831.3,
            "TotalNanoseconds": 1695831300.0,
            "TotalMinutes": 0.028263855,
            "TotalSeconds": 1.6958313
          },
          "Id": "",
          "GroupId": "",
          "Tag": [],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Enhanced Documentation System - Performance",
            "Path": "Enhanced Documentation System - Performance",
            "Data": null,
            "ExpandedName": "Enhanced Documentation System - Performance",
            "ExpandedPath": "Enhanced Documentation System - Performance",
            "Blocks": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Tests": "",
            "Result": "Failed",
            "FailedCount": 3,
            "PassedCount": 2,
            "SkippedCount": 0,
            "NotRunCount": 0,
            "TotalCount": 5,
            "ErrorRecord": "",
            "Duration": "00:00:04.4023146",
            "Id": "",
            "GroupId": "",
            "Tag": "Performance Benchmarking",
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": false,
            "Parent": "[ ] Root",
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": "\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        ",
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Cache Performance [+] File Processing Performance [-] Parallel Processing Performance",
            "Passed": false,
            "First": false,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:39.3391867-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00",
            "FrameworkDuration": "00:00:00.1783972",
            "UserDuration": "00:00:04.2239174",
            "OwnDuration": "00:00:02.4730530",
            "ScriptBlock": "\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    ",
            "StartLine": 739,
            "FrameworkData": null,
            "PluginData": null,
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": null,
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Should demonstrate parallel processing benefits"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.5624052-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 430819,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 43,
            "Microseconds": 81,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 4.986331018518518E-07,
            "TotalHours": 1.1967194444444445E-05,
            "TotalMilliseconds": 43.0819,
            "TotalMicroseconds": 43081.9,
            "TotalNanoseconds": 43081900.0,
            "TotalMinutes": 0.0007180316666666667,
            "TotalSeconds": 0.0430819
          },
          "UserDuration": {
            "Ticks": 16527494,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 652,
            "Microseconds": 749,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 1,
            "TotalDays": 1.912904398148148E-05,
            "TotalHours": 0.00045909705555555554,
            "TotalMilliseconds": 1652.7494,
            "TotalMicroseconds": 1652749.4,
            "TotalNanoseconds": 1652749400.0,
            "TotalMinutes": 0.027545823333333334,
            "TotalSeconds": 1.6527494
          },
          "OwnDuration": {
            "Ticks": 1835112,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 183,
            "Microseconds": 511,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.123972222222222E-06,
            "TotalHours": 5.097533333333333E-05,
            "TotalMilliseconds": 183.5112,
            "TotalMicroseconds": 183511.2,
            "TotalNanoseconds": 183511200.0,
            "TotalMinutes": 0.00305852,
            "TotalSeconds": 0.1835112
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "b635d68a-77fe-4913-9cfa-0372621b2a90",
            "Ast": "{\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }"
          },
          "StartLine": 903,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 1,
          "OwnPassedCount": 0,
          "OwnFailedCount": 1,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "First": true,
        "Last": true,
        "Include": false,
        "Exclude": false,
        "Explicit": false,
        "ShouldRun": true,
        "StartLine": 905,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:46:39.5635945-04:00",
        "Passed": false,
        "Skipped": false,
        "Inconclusive": false,
        "UserDuration": {
          "Ticks": 15001840,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 500,
          "Microseconds": 184,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 1,
          "TotalDays": 1.736324074074074E-05,
          "TotalHours": 0.00041671777777777777,
          "TotalMilliseconds": 1500.184,
          "TotalMicroseconds": 1500184.0,
          "TotalNanoseconds": 1500184000.0,
          "TotalMinutes": 0.025003066666666667,
          "TotalSeconds": 1.500184
        },
        "FrameworkDuration": {
          "Ticks": 121361,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 12,
          "Microseconds": 136,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.4046412037037036E-07,
          "TotalHours": 3.371138888888889E-06,
          "TotalMilliseconds": 12.1361,
          "TotalMicroseconds": 12136.1,
          "TotalNanoseconds": 12136100.0,
          "TotalMinutes": 0.00020226833333333334,
          "TotalSeconds": 0.0121361
        },
        "PluginData": null,
        "FrameworkData": null
      }
    ],
    "CodeCoverage": null
  },
  "FailedTests": [
    {
      "Name": "Should create thread-safe CPG wrapper",
      "Path": [
        "Enhanced Documentation System - CPG Components",
        "Thread-Safe Operations",
        "Should create thread-safe CPG wrapper"
      ],
      "Data": null,
      "ExpandedName": "Should create thread-safe CPG wrapper",
      "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should create thread-safe CPG wrapper",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }",
          "Type": 19,
          "Start": 17271,
          "Length": 619,
          "StartLine": 299,
          "StartColumn": 125,
          "EndLine": 306,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "f8191d70-b45f-40d5-a3ea-dd9289ee0f15",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow $cpg = New-ThreadSafeCPG $cpg | Should -Not -BeNullOrEmpty $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"",
            "Traps": null,
            "Extent": "Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"",
            "Parent": "{\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 299,
            "StartColumnNumber": 125,
            "EndLineNumber": 306,
            "EndColumnNumber": 14,
            "Text": "{\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }",
            "StartOffset": 17271,
            "EndOffset": 17890
          },
          "Parent": {
            "ScriptBlock": "{\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }",
            "Parent": "It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Thread-Safe Operations",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Thread-Safe Operations"
        ],
        "Data": null,
        "ExpandedName": "Thread-Safe Operations",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should create thread-safe CPG wrapper",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should create thread-safe CPG wrapper",
            "Data": null,
            "ExpandedName": "Should create thread-safe CPG wrapper",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should create thread-safe CPG wrapper",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 299,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle concurrent operations safely",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should handle concurrent operations safely",
            "Data": null,
            "ExpandedName": "Should handle concurrent operations safely",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should handle concurrent operations safely",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 308,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should provide thread safety statistics",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should provide thread safety statistics",
            "Data": null,
            "ExpandedName": "Should provide thread safety statistics",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should provide thread safety statistics",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 328,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 3,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 3,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 50196,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T20:43:17.6686205-04:00",
            "CreationTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LastAccessTime": "2025-08-28T20:44:27.0013384-04:00",
            "LastAccessTimeUtc": "2025-08-29T00:44:27.0013384Z",
            "LastWriteTime": "2025-08-28T20:43:17.6686205-04:00",
            "LastWriteTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 23,
          "PassedCount": 2,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 46809013,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 680,
            "Microseconds": 901,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.417709837962963E-05,
            "TotalHours": 0.001300250361111111,
            "TotalMilliseconds": 4680.9013,
            "TotalMicroseconds": 4680901.3,
            "TotalNanoseconds": 4680901300.0,
            "TotalMinutes": 0.07801502166666667,
            "TotalSeconds": 4.6809013
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_987e9a83-43a0-4852-b50b-7810e03bd040",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "27908d1f-3444-4a7c-aad4-e951b25f7123",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1199199,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 119,
            "Microseconds": 919,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3879618055555555E-06,
            "TotalHours": 3.331108333333333E-05,
            "TotalMilliseconds": 119.9199,
            "TotalMicroseconds": 119919.9,
            "TotalNanoseconds": 119919900.0,
            "TotalMinutes": 0.001998665,
            "TotalSeconds": 0.1199199
          },
          "FrameworkDuration": {
            "Ticks": 3338424,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 333,
            "Microseconds": 842,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.863916666666666E-06,
            "TotalHours": 9.2734E-05,
            "TotalMilliseconds": 333.8424,
            "TotalMicroseconds": 333842.4,
            "TotalNanoseconds": 333842400.0,
            "TotalMinutes": 0.00556404,
            "TotalSeconds": 0.3338424
          },
          "UserDuration": {
            "Ticks": 42271390,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 227,
            "Microseconds": 139,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.8925219907407405E-05,
            "TotalHours": 0.0011742052777777778,
            "TotalMilliseconds": 4227.139,
            "TotalMicroseconds": 4227139.0,
            "TotalNanoseconds": 4227139000.0,
            "TotalMinutes": 0.07045231666666667,
            "TotalSeconds": 4.227139
          },
          "OwnDuration": {
            "Ticks": -50602521,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -60,
            "Microseconds": -252,
            "Nanoseconds": -100,
            "Minutes": 0,
            "Seconds": -5,
            "TotalDays": -5.856773263888889E-05,
            "TotalHours": -0.0014056255833333334,
            "TotalMilliseconds": -5060.2521,
            "TotalMicroseconds": -5060252.1,
            "TotalNanoseconds": -5060252100.0,
            "TotalMinutes": -0.084337535,
            "TotalSeconds": -5.0602521
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "00f170e2-f378-4dc1-850d-470bbf038648",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable",
            "Mock": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - CPG Components",
          "Path": [
            "Enhanced Documentation System - CPG Components"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - CPG Components",
          "ExpandedPath": "Enhanced Documentation System - CPG Components",
          "Blocks": [
            "[-] Thread-Safe Operations",
            "[-] Call Graph Builder",
            "[-] Data Flow Tracker"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 7,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 7,
          "ErrorRecord": [
            "You cannot call a method on a null-valued expression."
          ],
          "Duration": {
            "Ticks": 1416270,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 141,
            "Microseconds": 627,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.639201388888889E-06,
            "TotalHours": 3.9340833333333335E-05,
            "TotalMilliseconds": 141.627,
            "TotalMicroseconds": 141627.0,
            "TotalNanoseconds": 141627000.0,
            "TotalMinutes": 0.00236045,
            "TotalSeconds": 0.141627
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "CPG",
            "Core"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "2f84a03c-92b0-487f-a6ea-2a0d0b00bc48",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Thread-Safe Operations",
            "[-] Call Graph Builder",
            "[-] Data Flow Tracker"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:36.7151048-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 519900,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 51,
            "Microseconds": 990,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.017361111111111E-07,
            "TotalHours": 1.4441666666666666E-05,
            "TotalMilliseconds": 51.99,
            "TotalMicroseconds": 51990.0,
            "TotalNanoseconds": 51990000.0,
            "TotalMinutes": 0.0008665,
            "TotalSeconds": 0.05199
          },
          "UserDuration": {
            "Ticks": 896370,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 89,
            "Microseconds": 637,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.0374652777777778E-06,
            "TotalHours": 2.4899166666666667E-05,
            "TotalMilliseconds": 89.637,
            "TotalMicroseconds": 89637.0,
            "TotalNanoseconds": 89637000.0,
            "TotalMinutes": 0.00149395,
            "TotalSeconds": 0.089637
          },
          "OwnDuration": {
            "Ticks": 1416270,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 141,
            "Microseconds": 627,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.639201388888889E-06,
            "TotalHours": 3.9340833333333335E-05,
            "TotalMilliseconds": 141.627,
            "TotalMicroseconds": 141627.0,
            "TotalNanoseconds": 141627000.0,
            "TotalMinutes": 0.00236045,
            "TotalSeconds": 0.141627
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "5cad56ab-c9bf-4ee6-add0-1634ea060cf3",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 217,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": null,
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should create thread-safe CPG wrapper",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should create thread-safe CPG wrapper",
            "Data": null,
            "ExpandedName": "Should create thread-safe CPG wrapper",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should create thread-safe CPG wrapper",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 299,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle concurrent operations safely",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should handle concurrent operations safely",
            "Data": null,
            "ExpandedName": "Should handle concurrent operations safely",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should handle concurrent operations safely",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 308,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should provide thread safety statistics",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should provide thread safety statistics",
            "Data": null,
            "ExpandedName": "Should provide thread safety statistics",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should provide thread safety statistics",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 328,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": true,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }",
            "Type": 19,
            "Start": 17130,
            "Length": 2106,
            "StartLine": 297,
            "StartColumn": 42,
            "EndLine": 335,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "5276faa7-b8f1-4dc2-8167-3907f1757474",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }",
            "Parent": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }"
          }
        },
        "StartLine": 297,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 3,
        "OwnPassedCount": 0,
        "OwnFailedCount": 3,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": true,
      "Last": false,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 299,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should handle concurrent operations safely",
      "Path": [
        "Enhanced Documentation System - CPG Components",
        "Thread-Safe Operations",
        "Should handle concurrent operations safely"
      ],
      "Data": null,
      "ExpandedName": "Should handle concurrent operations safely",
      "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should handle concurrent operations safely",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }",
          "Type": 19,
          "Start": 18035,
          "Length": 737,
          "StartLine": 308,
          "StartColumn": 130,
          "EndLine": 326,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "bd71da43-0fea-40da-ad4d-e2704d06f533",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "$cpg = New-ThreadSafeCPG $results = @() $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                } $results = $jobs | Wait-Job | Receive-Job $jobs | Remove-Job $results.Count | Should -Be 10 $results | Should -Match \"Success-\"",
            "Traps": null,
            "Extent": "$cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"",
            "Parent": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 308,
            "StartColumnNumber": 130,
            "EndLineNumber": 326,
            "EndColumnNumber": 14,
            "Text": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }",
            "StartOffset": 18035,
            "EndOffset": 18772
          },
          "Parent": {
            "ScriptBlock": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }",
            "Parent": "It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Thread-Safe Operations",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Thread-Safe Operations"
        ],
        "Data": null,
        "ExpandedName": "Thread-Safe Operations",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should create thread-safe CPG wrapper",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should create thread-safe CPG wrapper",
            "Data": null,
            "ExpandedName": "Should create thread-safe CPG wrapper",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should create thread-safe CPG wrapper",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 299,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle concurrent operations safely",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should handle concurrent operations safely",
            "Data": null,
            "ExpandedName": "Should handle concurrent operations safely",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should handle concurrent operations safely",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 308,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should provide thread safety statistics",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should provide thread safety statistics",
            "Data": null,
            "ExpandedName": "Should provide thread safety statistics",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should provide thread safety statistics",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 328,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 3,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 3,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 50196,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T20:43:17.6686205-04:00",
            "CreationTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LastAccessTime": "2025-08-28T20:44:27.0013384-04:00",
            "LastAccessTimeUtc": "2025-08-29T00:44:27.0013384Z",
            "LastWriteTime": "2025-08-28T20:43:17.6686205-04:00",
            "LastWriteTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 23,
          "PassedCount": 2,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 46809013,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 680,
            "Microseconds": 901,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.417709837962963E-05,
            "TotalHours": 0.001300250361111111,
            "TotalMilliseconds": 4680.9013,
            "TotalMicroseconds": 4680901.3,
            "TotalNanoseconds": 4680901300.0,
            "TotalMinutes": 0.07801502166666667,
            "TotalSeconds": 4.6809013
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_987e9a83-43a0-4852-b50b-7810e03bd040",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "27908d1f-3444-4a7c-aad4-e951b25f7123",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1199199,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 119,
            "Microseconds": 919,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3879618055555555E-06,
            "TotalHours": 3.331108333333333E-05,
            "TotalMilliseconds": 119.9199,
            "TotalMicroseconds": 119919.9,
            "TotalNanoseconds": 119919900.0,
            "TotalMinutes": 0.001998665,
            "TotalSeconds": 0.1199199
          },
          "FrameworkDuration": {
            "Ticks": 3338424,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 333,
            "Microseconds": 842,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.863916666666666E-06,
            "TotalHours": 9.2734E-05,
            "TotalMilliseconds": 333.8424,
            "TotalMicroseconds": 333842.4,
            "TotalNanoseconds": 333842400.0,
            "TotalMinutes": 0.00556404,
            "TotalSeconds": 0.3338424
          },
          "UserDuration": {
            "Ticks": 42271390,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 227,
            "Microseconds": 139,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.8925219907407405E-05,
            "TotalHours": 0.0011742052777777778,
            "TotalMilliseconds": 4227.139,
            "TotalMicroseconds": 4227139.0,
            "TotalNanoseconds": 4227139000.0,
            "TotalMinutes": 0.07045231666666667,
            "TotalSeconds": 4.227139
          },
          "OwnDuration": {
            "Ticks": -50602521,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -60,
            "Microseconds": -252,
            "Nanoseconds": -100,
            "Minutes": 0,
            "Seconds": -5,
            "TotalDays": -5.856773263888889E-05,
            "TotalHours": -0.0014056255833333334,
            "TotalMilliseconds": -5060.2521,
            "TotalMicroseconds": -5060252.1,
            "TotalNanoseconds": -5060252100.0,
            "TotalMinutes": -0.084337535,
            "TotalSeconds": -5.0602521
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "00f170e2-f378-4dc1-850d-470bbf038648",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable",
            "Mock": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - CPG Components",
          "Path": [
            "Enhanced Documentation System - CPG Components"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - CPG Components",
          "ExpandedPath": "Enhanced Documentation System - CPG Components",
          "Blocks": [
            "[-] Thread-Safe Operations",
            "[-] Call Graph Builder",
            "[-] Data Flow Tracker"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 7,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 7,
          "ErrorRecord": [
            "You cannot call a method on a null-valued expression."
          ],
          "Duration": {
            "Ticks": 1416270,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 141,
            "Microseconds": 627,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.639201388888889E-06,
            "TotalHours": 3.9340833333333335E-05,
            "TotalMilliseconds": 141.627,
            "TotalMicroseconds": 141627.0,
            "TotalNanoseconds": 141627000.0,
            "TotalMinutes": 0.00236045,
            "TotalSeconds": 0.141627
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "CPG",
            "Core"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "2f84a03c-92b0-487f-a6ea-2a0d0b00bc48",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Thread-Safe Operations",
            "[-] Call Graph Builder",
            "[-] Data Flow Tracker"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:36.7151048-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 519900,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 51,
            "Microseconds": 990,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.017361111111111E-07,
            "TotalHours": 1.4441666666666666E-05,
            "TotalMilliseconds": 51.99,
            "TotalMicroseconds": 51990.0,
            "TotalNanoseconds": 51990000.0,
            "TotalMinutes": 0.0008665,
            "TotalSeconds": 0.05199
          },
          "UserDuration": {
            "Ticks": 896370,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 89,
            "Microseconds": 637,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.0374652777777778E-06,
            "TotalHours": 2.4899166666666667E-05,
            "TotalMilliseconds": 89.637,
            "TotalMicroseconds": 89637.0,
            "TotalNanoseconds": 89637000.0,
            "TotalMinutes": 0.00149395,
            "TotalSeconds": 0.089637
          },
          "OwnDuration": {
            "Ticks": 1416270,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 141,
            "Microseconds": 627,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.639201388888889E-06,
            "TotalHours": 3.9340833333333335E-05,
            "TotalMilliseconds": 141.627,
            "TotalMicroseconds": 141627.0,
            "TotalNanoseconds": 141627000.0,
            "TotalMinutes": 0.00236045,
            "TotalSeconds": 0.141627
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "5cad56ab-c9bf-4ee6-add0-1634ea060cf3",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 217,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": null,
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should create thread-safe CPG wrapper",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should create thread-safe CPG wrapper",
            "Data": null,
            "ExpandedName": "Should create thread-safe CPG wrapper",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should create thread-safe CPG wrapper",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 299,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle concurrent operations safely",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should handle concurrent operations safely",
            "Data": null,
            "ExpandedName": "Should handle concurrent operations safely",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should handle concurrent operations safely",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 308,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should provide thread safety statistics",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should provide thread safety statistics",
            "Data": null,
            "ExpandedName": "Should provide thread safety statistics",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should provide thread safety statistics",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 328,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": true,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }",
            "Type": 19,
            "Start": 17130,
            "Length": 2106,
            "StartLine": 297,
            "StartColumn": 42,
            "EndLine": 335,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "5276faa7-b8f1-4dc2-8167-3907f1757474",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }",
            "Parent": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }"
          }
        },
        "StartLine": 297,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 3,
        "OwnPassedCount": 0,
        "OwnFailedCount": 3,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": false,
      "Last": false,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 308,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should provide thread safety statistics",
      "Path": [
        "Enhanced Documentation System - CPG Components",
        "Thread-Safe Operations",
        "Should provide thread safety statistics"
      ],
      "Data": null,
      "ExpandedName": "Should provide thread safety statistics",
      "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should provide thread safety statistics",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }",
          "Type": 19,
          "Start": 18914,
          "Length": 311,
          "StartLine": 328,
          "StartColumn": 127,
          "EndLine": 334,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "6662b139-2d8d-43ac-a6bb-9f69fa9c79ae",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "$stats = Get-ThreadSafetyStats $stats | Should -Not -BeNullOrEmpty $stats.TotalOperations | Should -BeOfType [int] $stats.ReadOperations | Should -BeOfType [int] $stats.WriteOperations | Should -BeOfType [int]",
            "Traps": null,
            "Extent": "$stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]",
            "Parent": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 328,
            "StartColumnNumber": 127,
            "EndLineNumber": 334,
            "EndColumnNumber": 14,
            "Text": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }",
            "StartOffset": 18914,
            "EndOffset": 19225
          },
          "Parent": {
            "ScriptBlock": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }",
            "Parent": "It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Thread-Safe Operations",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Thread-Safe Operations"
        ],
        "Data": null,
        "ExpandedName": "Thread-Safe Operations",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should create thread-safe CPG wrapper",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should create thread-safe CPG wrapper",
            "Data": null,
            "ExpandedName": "Should create thread-safe CPG wrapper",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should create thread-safe CPG wrapper",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 299,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle concurrent operations safely",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should handle concurrent operations safely",
            "Data": null,
            "ExpandedName": "Should handle concurrent operations safely",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should handle concurrent operations safely",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 308,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should provide thread safety statistics",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should provide thread safety statistics",
            "Data": null,
            "ExpandedName": "Should provide thread safety statistics",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should provide thread safety statistics",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 328,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 3,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 3,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 50196,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T20:43:17.6686205-04:00",
            "CreationTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LastAccessTime": "2025-08-28T20:44:27.0013384-04:00",
            "LastAccessTimeUtc": "2025-08-29T00:44:27.0013384Z",
            "LastWriteTime": "2025-08-28T20:43:17.6686205-04:00",
            "LastWriteTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 23,
          "PassedCount": 2,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 46809013,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 680,
            "Microseconds": 901,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.417709837962963E-05,
            "TotalHours": 0.001300250361111111,
            "TotalMilliseconds": 4680.9013,
            "TotalMicroseconds": 4680901.3,
            "TotalNanoseconds": 4680901300.0,
            "TotalMinutes": 0.07801502166666667,
            "TotalSeconds": 4.6809013
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_987e9a83-43a0-4852-b50b-7810e03bd040",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "27908d1f-3444-4a7c-aad4-e951b25f7123",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1199199,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 119,
            "Microseconds": 919,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3879618055555555E-06,
            "TotalHours": 3.331108333333333E-05,
            "TotalMilliseconds": 119.9199,
            "TotalMicroseconds": 119919.9,
            "TotalNanoseconds": 119919900.0,
            "TotalMinutes": 0.001998665,
            "TotalSeconds": 0.1199199
          },
          "FrameworkDuration": {
            "Ticks": 3338424,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 333,
            "Microseconds": 842,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.863916666666666E-06,
            "TotalHours": 9.2734E-05,
            "TotalMilliseconds": 333.8424,
            "TotalMicroseconds": 333842.4,
            "TotalNanoseconds": 333842400.0,
            "TotalMinutes": 0.00556404,
            "TotalSeconds": 0.3338424
          },
          "UserDuration": {
            "Ticks": 42271390,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 227,
            "Microseconds": 139,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.8925219907407405E-05,
            "TotalHours": 0.0011742052777777778,
            "TotalMilliseconds": 4227.139,
            "TotalMicroseconds": 4227139.0,
            "TotalNanoseconds": 4227139000.0,
            "TotalMinutes": 0.07045231666666667,
            "TotalSeconds": 4.227139
          },
          "OwnDuration": {
            "Ticks": -50602521,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -60,
            "Microseconds": -252,
            "Nanoseconds": -100,
            "Minutes": 0,
            "Seconds": -5,
            "TotalDays": -5.856773263888889E-05,
            "TotalHours": -0.0014056255833333334,
            "TotalMilliseconds": -5060.2521,
            "TotalMicroseconds": -5060252.1,
            "TotalNanoseconds": -5060252100.0,
            "TotalMinutes": -0.084337535,
            "TotalSeconds": -5.0602521
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "00f170e2-f378-4dc1-850d-470bbf038648",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable",
            "Mock": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - CPG Components",
          "Path": [
            "Enhanced Documentation System - CPG Components"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - CPG Components",
          "ExpandedPath": "Enhanced Documentation System - CPG Components",
          "Blocks": [
            "[-] Thread-Safe Operations",
            "[-] Call Graph Builder",
            "[-] Data Flow Tracker"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 7,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 7,
          "ErrorRecord": [
            "You cannot call a method on a null-valued expression."
          ],
          "Duration": {
            "Ticks": 1416270,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 141,
            "Microseconds": 627,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.639201388888889E-06,
            "TotalHours": 3.9340833333333335E-05,
            "TotalMilliseconds": 141.627,
            "TotalMicroseconds": 141627.0,
            "TotalNanoseconds": 141627000.0,
            "TotalMinutes": 0.00236045,
            "TotalSeconds": 0.141627
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "CPG",
            "Core"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "2f84a03c-92b0-487f-a6ea-2a0d0b00bc48",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Thread-Safe Operations",
            "[-] Call Graph Builder",
            "[-] Data Flow Tracker"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:36.7151048-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 519900,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 51,
            "Microseconds": 990,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.017361111111111E-07,
            "TotalHours": 1.4441666666666666E-05,
            "TotalMilliseconds": 51.99,
            "TotalMicroseconds": 51990.0,
            "TotalNanoseconds": 51990000.0,
            "TotalMinutes": 0.0008665,
            "TotalSeconds": 0.05199
          },
          "UserDuration": {
            "Ticks": 896370,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 89,
            "Microseconds": 637,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.0374652777777778E-06,
            "TotalHours": 2.4899166666666667E-05,
            "TotalMilliseconds": 89.637,
            "TotalMicroseconds": 89637.0,
            "TotalNanoseconds": 89637000.0,
            "TotalMinutes": 0.00149395,
            "TotalSeconds": 0.089637
          },
          "OwnDuration": {
            "Ticks": 1416270,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 141,
            "Microseconds": 627,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.639201388888889E-06,
            "TotalHours": 3.9340833333333335E-05,
            "TotalMilliseconds": 141.627,
            "TotalMicroseconds": 141627.0,
            "TotalNanoseconds": 141627000.0,
            "TotalMinutes": 0.00236045,
            "TotalSeconds": 0.141627
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "5cad56ab-c9bf-4ee6-add0-1634ea060cf3",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 217,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": null,
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should create thread-safe CPG wrapper",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should create thread-safe CPG wrapper",
            "Data": null,
            "ExpandedName": "Should create thread-safe CPG wrapper",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should create thread-safe CPG wrapper",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 299,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle concurrent operations safely",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should handle concurrent operations safely",
            "Data": null,
            "ExpandedName": "Should handle concurrent operations safely",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should handle concurrent operations safely",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 308,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should provide thread safety statistics",
            "Path": "Enhanced Documentation System - CPG Components Thread-Safe Operations Should provide thread safety statistics",
            "Data": null,
            "ExpandedName": "Should provide thread safety statistics",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Thread-Safe Operations.Should provide thread safety statistics",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Thread-Safe Operations",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 328,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": true,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }",
            "Type": 19,
            "Start": 17130,
            "Length": 2106,
            "StartLine": 297,
            "StartColumn": 42,
            "EndLine": 335,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "5276faa7-b8f1-4dc2-8167-3907f1757474",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }",
            "Parent": "{\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }"
          }
        },
        "StartLine": 297,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 3,
        "OwnPassedCount": 0,
        "OwnFailedCount": 3,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": false,
      "Last": true,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 328,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should build call graphs from source code",
      "Path": [
        "Enhanced Documentation System - CPG Components",
        "Call Graph Builder",
        "Should build call graphs from source code"
      ],
      "Data": null,
      "ExpandedName": "Should build call graphs from source code",
      "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should build call graphs from source code",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
          "Type": 19,
          "Start": 19662,
          "Length": 665,
          "StartLine": 344,
          "StartColumn": 125,
          "EndLine": 364,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "c167251b-b9aa-43fd-955c-4ff2489a1398",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }",
            "Traps": null,
            "Extent": "Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 344,
            "StartColumnNumber": 125,
            "EndLineNumber": 364,
            "EndColumnNumber": 14,
            "Text": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "StartOffset": 19662,
            "EndOffset": 20327
          },
          "Parent": {
            "ScriptBlock": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Parent": "It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Call Graph Builder",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Call Graph Builder"
        ],
        "Data": null,
        "ExpandedName": "Call Graph Builder",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should build call graphs from source code",
            "Path": "Enhanced Documentation System - CPG Components Call Graph Builder Should build call graphs from source code",
            "Data": null,
            "ExpandedName": "Should build call graphs from source code",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should build call graphs from source code",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Call Graph Builder",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 344,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should detect recursive calls",
            "Path": "Enhanced Documentation System - CPG Components Call Graph Builder Should detect recursive calls",
            "Data": null,
            "ExpandedName": "Should detect recursive calls",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should detect recursive calls",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Call Graph Builder",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 366,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 2,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 2,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 50196,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T20:43:17.6686205-04:00",
            "CreationTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LastAccessTime": "2025-08-28T20:44:27.0013384-04:00",
            "LastAccessTimeUtc": "2025-08-29T00:44:27.0013384Z",
            "LastWriteTime": "2025-08-28T20:43:17.6686205-04:00",
            "LastWriteTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 23,
          "PassedCount": 2,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 46809013,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 680,
            "Microseconds": 901,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.417709837962963E-05,
            "TotalHours": 0.001300250361111111,
            "TotalMilliseconds": 4680.9013,
            "TotalMicroseconds": 4680901.3,
            "TotalNanoseconds": 4680901300.0,
            "TotalMinutes": 0.07801502166666667,
            "TotalSeconds": 4.6809013
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_987e9a83-43a0-4852-b50b-7810e03bd040",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "27908d1f-3444-4a7c-aad4-e951b25f7123",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1199199,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 119,
            "Microseconds": 919,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3879618055555555E-06,
            "TotalHours": 3.331108333333333E-05,
            "TotalMilliseconds": 119.9199,
            "TotalMicroseconds": 119919.9,
            "TotalNanoseconds": 119919900.0,
            "TotalMinutes": 0.001998665,
            "TotalSeconds": 0.1199199
          },
          "FrameworkDuration": {
            "Ticks": 3338424,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 333,
            "Microseconds": 842,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.863916666666666E-06,
            "TotalHours": 9.2734E-05,
            "TotalMilliseconds": 333.8424,
            "TotalMicroseconds": 333842.4,
            "TotalNanoseconds": 333842400.0,
            "TotalMinutes": 0.00556404,
            "TotalSeconds": 0.3338424
          },
          "UserDuration": {
            "Ticks": 42271390,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 227,
            "Microseconds": 139,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.8925219907407405E-05,
            "TotalHours": 0.0011742052777777778,
            "TotalMilliseconds": 4227.139,
            "TotalMicroseconds": 4227139.0,
            "TotalNanoseconds": 4227139000.0,
            "TotalMinutes": 0.07045231666666667,
            "TotalSeconds": 4.227139
          },
          "OwnDuration": {
            "Ticks": -50602521,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -60,
            "Microseconds": -252,
            "Nanoseconds": -100,
            "Minutes": 0,
            "Seconds": -5,
            "TotalDays": -5.856773263888889E-05,
            "TotalHours": -0.0014056255833333334,
            "TotalMilliseconds": -5060.2521,
            "TotalMicroseconds": -5060252.1,
            "TotalNanoseconds": -5060252100.0,
            "TotalMinutes": -0.084337535,
            "TotalSeconds": -5.0602521
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "00f170e2-f378-4dc1-850d-470bbf038648",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable",
            "Mock": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - CPG Components",
          "Path": [
            "Enhanced Documentation System - CPG Components"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - CPG Components",
          "ExpandedPath": "Enhanced Documentation System - CPG Components",
          "Blocks": [
            "[-] Thread-Safe Operations",
            "[-] Call Graph Builder",
            "[-] Data Flow Tracker"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 7,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 7,
          "ErrorRecord": [
            "You cannot call a method on a null-valued expression."
          ],
          "Duration": {
            "Ticks": 1416270,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 141,
            "Microseconds": 627,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.639201388888889E-06,
            "TotalHours": 3.9340833333333335E-05,
            "TotalMilliseconds": 141.627,
            "TotalMicroseconds": 141627.0,
            "TotalNanoseconds": 141627000.0,
            "TotalMinutes": 0.00236045,
            "TotalSeconds": 0.141627
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "CPG",
            "Core"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "2f84a03c-92b0-487f-a6ea-2a0d0b00bc48",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Thread-Safe Operations",
            "[-] Call Graph Builder",
            "[-] Data Flow Tracker"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:36.7151048-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 519900,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 51,
            "Microseconds": 990,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.017361111111111E-07,
            "TotalHours": 1.4441666666666666E-05,
            "TotalMilliseconds": 51.99,
            "TotalMicroseconds": 51990.0,
            "TotalNanoseconds": 51990000.0,
            "TotalMinutes": 0.0008665,
            "TotalSeconds": 0.05199
          },
          "UserDuration": {
            "Ticks": 896370,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 89,
            "Microseconds": 637,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.0374652777777778E-06,
            "TotalHours": 2.4899166666666667E-05,
            "TotalMilliseconds": 89.637,
            "TotalMicroseconds": 89637.0,
            "TotalNanoseconds": 89637000.0,
            "TotalMinutes": 0.00149395,
            "TotalSeconds": 0.089637
          },
          "OwnDuration": {
            "Ticks": 1416270,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 141,
            "Microseconds": 627,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.639201388888889E-06,
            "TotalHours": 3.9340833333333335E-05,
            "TotalMilliseconds": 141.627,
            "TotalMicroseconds": 141627.0,
            "TotalNanoseconds": 141627000.0,
            "TotalMinutes": 0.00236045,
            "TotalSeconds": 0.141627
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "5cad56ab-c9bf-4ee6-add0-1634ea060cf3",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 217,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 19310,
            "Length": 212,
            "StartLine": 338,
            "StartColumn": 23,
            "EndLine": 342,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "98a6b0b4-dc78-47ae-9bf8-49b412cc9dd0",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }",
            "Parent": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }"
          }
        },
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should build call graphs from source code",
            "Path": "Enhanced Documentation System - CPG Components Call Graph Builder Should build call graphs from source code",
            "Data": null,
            "ExpandedName": "Should build call graphs from source code",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should build call graphs from source code",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Call Graph Builder",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 344,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should detect recursive calls",
            "Path": "Enhanced Documentation System - CPG Components Call Graph Builder Should detect recursive calls",
            "Data": null,
            "ExpandedName": "Should detect recursive calls",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should detect recursive calls",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Call Graph Builder",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 366,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": false,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 19285,
            "Length": 1770,
            "StartLine": 337,
            "StartColumn": 38,
            "EndLine": 382,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "187979b7-bec7-4a9c-a65a-3e15b71daa49",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }"
          }
        },
        "StartLine": 337,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 2,
        "OwnPassedCount": 0,
        "OwnFailedCount": 2,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": true,
      "Last": false,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 344,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should detect recursive calls",
      "Path": [
        "Enhanced Documentation System - CPG Components",
        "Call Graph Builder",
        "Should detect recursive calls"
      ],
      "Data": null,
      "ExpandedName": "Should detect recursive calls",
      "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should detect recursive calls",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
          "Type": 19,
          "Start": 20455,
          "Length": 589,
          "StartLine": 366,
          "StartColumn": 113,
          "EndLine": 381,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "25488cc6-d4bd-45fb-89c9-ef9a628725de",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }",
            "Traps": null,
            "Extent": "Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 366,
            "StartColumnNumber": 113,
            "EndLineNumber": 381,
            "EndColumnNumber": 14,
            "Text": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "StartOffset": 20455,
            "EndOffset": 21044
          },
          "Parent": {
            "ScriptBlock": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "Parent": "It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Call Graph Builder",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Call Graph Builder"
        ],
        "Data": null,
        "ExpandedName": "Call Graph Builder",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should build call graphs from source code",
            "Path": "Enhanced Documentation System - CPG Components Call Graph Builder Should build call graphs from source code",
            "Data": null,
            "ExpandedName": "Should build call graphs from source code",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should build call graphs from source code",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Call Graph Builder",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 344,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should detect recursive calls",
            "Path": "Enhanced Documentation System - CPG Components Call Graph Builder Should detect recursive calls",
            "Data": null,
            "ExpandedName": "Should detect recursive calls",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should detect recursive calls",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Call Graph Builder",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 366,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 2,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 2,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 50196,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T20:43:17.6686205-04:00",
            "CreationTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LastAccessTime": "2025-08-28T20:44:27.0013384-04:00",
            "LastAccessTimeUtc": "2025-08-29T00:44:27.0013384Z",
            "LastWriteTime": "2025-08-28T20:43:17.6686205-04:00",
            "LastWriteTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 23,
          "PassedCount": 2,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 46809013,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 680,
            "Microseconds": 901,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.417709837962963E-05,
            "TotalHours": 0.001300250361111111,
            "TotalMilliseconds": 4680.9013,
            "TotalMicroseconds": 4680901.3,
            "TotalNanoseconds": 4680901300.0,
            "TotalMinutes": 0.07801502166666667,
            "TotalSeconds": 4.6809013
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_987e9a83-43a0-4852-b50b-7810e03bd040",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "27908d1f-3444-4a7c-aad4-e951b25f7123",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1199199,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 119,
            "Microseconds": 919,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3879618055555555E-06,
            "TotalHours": 3.331108333333333E-05,
            "TotalMilliseconds": 119.9199,
            "TotalMicroseconds": 119919.9,
            "TotalNanoseconds": 119919900.0,
            "TotalMinutes": 0.001998665,
            "TotalSeconds": 0.1199199
          },
          "FrameworkDuration": {
            "Ticks": 3338424,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 333,
            "Microseconds": 842,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.863916666666666E-06,
            "TotalHours": 9.2734E-05,
            "TotalMilliseconds": 333.8424,
            "TotalMicroseconds": 333842.4,
            "TotalNanoseconds": 333842400.0,
            "TotalMinutes": 0.00556404,
            "TotalSeconds": 0.3338424
          },
          "UserDuration": {
            "Ticks": 42271390,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 227,
            "Microseconds": 139,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.8925219907407405E-05,
            "TotalHours": 0.0011742052777777778,
            "TotalMilliseconds": 4227.139,
            "TotalMicroseconds": 4227139.0,
            "TotalNanoseconds": 4227139000.0,
            "TotalMinutes": 0.07045231666666667,
            "TotalSeconds": 4.227139
          },
          "OwnDuration": {
            "Ticks": -50602521,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -60,
            "Microseconds": -252,
            "Nanoseconds": -100,
            "Minutes": 0,
            "Seconds": -5,
            "TotalDays": -5.856773263888889E-05,
            "TotalHours": -0.0014056255833333334,
            "TotalMilliseconds": -5060.2521,
            "TotalMicroseconds": -5060252.1,
            "TotalNanoseconds": -5060252100.0,
            "TotalMinutes": -0.084337535,
            "TotalSeconds": -5.0602521
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "00f170e2-f378-4dc1-850d-470bbf038648",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable",
            "Mock": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - CPG Components",
          "Path": [
            "Enhanced Documentation System - CPG Components"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - CPG Components",
          "ExpandedPath": "Enhanced Documentation System - CPG Components",
          "Blocks": [
            "[-] Thread-Safe Operations",
            "[-] Call Graph Builder",
            "[-] Data Flow Tracker"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 7,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 7,
          "ErrorRecord": [
            "You cannot call a method on a null-valued expression."
          ],
          "Duration": {
            "Ticks": 1416270,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 141,
            "Microseconds": 627,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.639201388888889E-06,
            "TotalHours": 3.9340833333333335E-05,
            "TotalMilliseconds": 141.627,
            "TotalMicroseconds": 141627.0,
            "TotalNanoseconds": 141627000.0,
            "TotalMinutes": 0.00236045,
            "TotalSeconds": 0.141627
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "CPG",
            "Core"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "2f84a03c-92b0-487f-a6ea-2a0d0b00bc48",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Thread-Safe Operations",
            "[-] Call Graph Builder",
            "[-] Data Flow Tracker"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:36.7151048-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 519900,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 51,
            "Microseconds": 990,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.017361111111111E-07,
            "TotalHours": 1.4441666666666666E-05,
            "TotalMilliseconds": 51.99,
            "TotalMicroseconds": 51990.0,
            "TotalNanoseconds": 51990000.0,
            "TotalMinutes": 0.0008665,
            "TotalSeconds": 0.05199
          },
          "UserDuration": {
            "Ticks": 896370,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 89,
            "Microseconds": 637,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.0374652777777778E-06,
            "TotalHours": 2.4899166666666667E-05,
            "TotalMilliseconds": 89.637,
            "TotalMicroseconds": 89637.0,
            "TotalNanoseconds": 89637000.0,
            "TotalMinutes": 0.00149395,
            "TotalSeconds": 0.089637
          },
          "OwnDuration": {
            "Ticks": 1416270,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 141,
            "Microseconds": 627,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.639201388888889E-06,
            "TotalHours": 3.9340833333333335E-05,
            "TotalMilliseconds": 141.627,
            "TotalMicroseconds": 141627.0,
            "TotalNanoseconds": 141627000.0,
            "TotalMinutes": 0.00236045,
            "TotalSeconds": 0.141627
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "5cad56ab-c9bf-4ee6-add0-1634ea060cf3",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 217,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 19310,
            "Length": 212,
            "StartLine": 338,
            "StartColumn": 23,
            "EndLine": 342,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "98a6b0b4-dc78-47ae-9bf8-49b412cc9dd0",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }",
            "Parent": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }"
          }
        },
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should build call graphs from source code",
            "Path": "Enhanced Documentation System - CPG Components Call Graph Builder Should build call graphs from source code",
            "Data": null,
            "ExpandedName": "Should build call graphs from source code",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should build call graphs from source code",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Call Graph Builder",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 344,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should detect recursive calls",
            "Path": "Enhanced Documentation System - CPG Components Call Graph Builder Should detect recursive calls",
            "Data": null,
            "ExpandedName": "Should detect recursive calls",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Call Graph Builder.Should detect recursive calls",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Call Graph Builder",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 366,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": false,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 19285,
            "Length": 1770,
            "StartLine": 337,
            "StartColumn": 38,
            "EndLine": 382,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "187979b7-bec7-4a9c-a65a-3e15b71daa49",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }"
          }
        },
        "StartLine": 337,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 2,
        "OwnPassedCount": 0,
        "OwnFailedCount": 2,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": false,
      "Last": true,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 366,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should track variable definitions and uses",
      "Path": [
        "Enhanced Documentation System - CPG Components",
        "Data Flow Tracker",
        "Should track variable definitions and uses"
      ],
      "Data": null,
      "ExpandedName": "Should track variable definitions and uses",
      "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should track variable definitions and uses",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
          "Type": 19,
          "Start": 21478,
          "Length": 475,
          "StartLine": 391,
          "StartColumn": 125,
          "EndLine": 403,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "22750e62-e49d-4c1d-b4fa-f7baaa6e2553",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }",
            "Traps": null,
            "Extent": "Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 391,
            "StartColumnNumber": 125,
            "EndLineNumber": 403,
            "EndColumnNumber": 14,
            "Text": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "StartOffset": 21478,
            "EndOffset": 21953
          },
          "Parent": {
            "ScriptBlock": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Parent": "It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Data Flow Tracker",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Data Flow Tracker"
        ],
        "Data": null,
        "ExpandedName": "Data Flow Tracker",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should track variable definitions and uses",
            "Path": "Enhanced Documentation System - CPG Components Data Flow Tracker Should track variable definitions and uses",
            "Data": null,
            "ExpandedName": "Should track variable definitions and uses",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should track variable definitions and uses",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Data Flow Tracker",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 391,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should perform taint analysis",
            "Path": "Enhanced Documentation System - CPG Components Data Flow Tracker Should perform taint analysis",
            "Data": null,
            "ExpandedName": "Should perform taint analysis",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should perform taint analysis",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Data Flow Tracker",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 405,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 2,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 2,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 50196,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T20:43:17.6686205-04:00",
            "CreationTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LastAccessTime": "2025-08-28T20:44:27.0013384-04:00",
            "LastAccessTimeUtc": "2025-08-29T00:44:27.0013384Z",
            "LastWriteTime": "2025-08-28T20:43:17.6686205-04:00",
            "LastWriteTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 23,
          "PassedCount": 2,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 46809013,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 680,
            "Microseconds": 901,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.417709837962963E-05,
            "TotalHours": 0.001300250361111111,
            "TotalMilliseconds": 4680.9013,
            "TotalMicroseconds": 4680901.3,
            "TotalNanoseconds": 4680901300.0,
            "TotalMinutes": 0.07801502166666667,
            "TotalSeconds": 4.6809013
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_987e9a83-43a0-4852-b50b-7810e03bd040",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "27908d1f-3444-4a7c-aad4-e951b25f7123",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1199199,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 119,
            "Microseconds": 919,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3879618055555555E-06,
            "TotalHours": 3.331108333333333E-05,
            "TotalMilliseconds": 119.9199,
            "TotalMicroseconds": 119919.9,
            "TotalNanoseconds": 119919900.0,
            "TotalMinutes": 0.001998665,
            "TotalSeconds": 0.1199199
          },
          "FrameworkDuration": {
            "Ticks": 3338424,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 333,
            "Microseconds": 842,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.863916666666666E-06,
            "TotalHours": 9.2734E-05,
            "TotalMilliseconds": 333.8424,
            "TotalMicroseconds": 333842.4,
            "TotalNanoseconds": 333842400.0,
            "TotalMinutes": 0.00556404,
            "TotalSeconds": 0.3338424
          },
          "UserDuration": {
            "Ticks": 42271390,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 227,
            "Microseconds": 139,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.8925219907407405E-05,
            "TotalHours": 0.0011742052777777778,
            "TotalMilliseconds": 4227.139,
            "TotalMicroseconds": 4227139.0,
            "TotalNanoseconds": 4227139000.0,
            "TotalMinutes": 0.07045231666666667,
            "TotalSeconds": 4.227139
          },
          "OwnDuration": {
            "Ticks": -50602521,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -60,
            "Microseconds": -252,
            "Nanoseconds": -100,
            "Minutes": 0,
            "Seconds": -5,
            "TotalDays": -5.856773263888889E-05,
            "TotalHours": -0.0014056255833333334,
            "TotalMilliseconds": -5060.2521,
            "TotalMicroseconds": -5060252.1,
            "TotalNanoseconds": -5060252100.0,
            "TotalMinutes": -0.084337535,
            "TotalSeconds": -5.0602521
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "00f170e2-f378-4dc1-850d-470bbf038648",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable",
            "Mock": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - CPG Components",
          "Path": [
            "Enhanced Documentation System - CPG Components"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - CPG Components",
          "ExpandedPath": "Enhanced Documentation System - CPG Components",
          "Blocks": [
            "[-] Thread-Safe Operations",
            "[-] Call Graph Builder",
            "[-] Data Flow Tracker"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 7,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 7,
          "ErrorRecord": [
            "You cannot call a method on a null-valued expression."
          ],
          "Duration": {
            "Ticks": 1416270,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 141,
            "Microseconds": 627,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.639201388888889E-06,
            "TotalHours": 3.9340833333333335E-05,
            "TotalMilliseconds": 141.627,
            "TotalMicroseconds": 141627.0,
            "TotalNanoseconds": 141627000.0,
            "TotalMinutes": 0.00236045,
            "TotalSeconds": 0.141627
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "CPG",
            "Core"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "2f84a03c-92b0-487f-a6ea-2a0d0b00bc48",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Thread-Safe Operations",
            "[-] Call Graph Builder",
            "[-] Data Flow Tracker"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:36.7151048-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 519900,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 51,
            "Microseconds": 990,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.017361111111111E-07,
            "TotalHours": 1.4441666666666666E-05,
            "TotalMilliseconds": 51.99,
            "TotalMicroseconds": 51990.0,
            "TotalNanoseconds": 51990000.0,
            "TotalMinutes": 0.0008665,
            "TotalSeconds": 0.05199
          },
          "UserDuration": {
            "Ticks": 896370,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 89,
            "Microseconds": 637,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.0374652777777778E-06,
            "TotalHours": 2.4899166666666667E-05,
            "TotalMilliseconds": 89.637,
            "TotalMicroseconds": 89637.0,
            "TotalNanoseconds": 89637000.0,
            "TotalMinutes": 0.00149395,
            "TotalSeconds": 0.089637
          },
          "OwnDuration": {
            "Ticks": 1416270,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 141,
            "Microseconds": 627,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.639201388888889E-06,
            "TotalHours": 3.9340833333333335E-05,
            "TotalMilliseconds": 141.627,
            "TotalMicroseconds": 141627.0,
            "TotalNanoseconds": 141627000.0,
            "TotalMinutes": 0.00236045,
            "TotalSeconds": 0.141627
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "5cad56ab-c9bf-4ee6-add0-1634ea060cf3",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 217,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 21128,
            "Length": 210,
            "StartLine": 385,
            "StartColumn": 23,
            "EndLine": 389,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "c4815629-01e2-461a-b09b-c08e08906e39",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }",
            "Parent": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }"
          }
        },
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should track variable definitions and uses",
            "Path": "Enhanced Documentation System - CPG Components Data Flow Tracker Should track variable definitions and uses",
            "Data": null,
            "ExpandedName": "Should track variable definitions and uses",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should track variable definitions and uses",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Data Flow Tracker",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 391,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should perform taint analysis",
            "Path": "Enhanced Documentation System - CPG Components Data Flow Tracker Should perform taint analysis",
            "Data": null,
            "ExpandedName": "Should perform taint analysis",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should perform taint analysis",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Data Flow Tracker",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 405,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": false,
        "Last": true,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 21103,
            "Length": 1551,
            "StartLine": 384,
            "StartColumn": 37,
            "EndLine": 418,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "ae18a096-4336-4d57-8990-0236cf757f5f",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }"
          }
        },
        "StartLine": 384,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 2,
        "OwnPassedCount": 0,
        "OwnFailedCount": 2,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": true,
      "Last": false,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 391,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should perform taint analysis",
      "Path": [
        "Enhanced Documentation System - CPG Components",
        "Data Flow Tracker",
        "Should perform taint analysis"
      ],
      "Data": null,
      "ExpandedName": "Should perform taint analysis",
      "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should perform taint analysis",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
          "Type": 19,
          "Start": 22080,
          "Length": 563,
          "StartLine": 405,
          "StartColumn": 112,
          "EndLine": 417,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "bbf55d86-d661-439b-a392-3004c371f347",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }",
            "Traps": null,
            "Extent": "Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 405,
            "StartColumnNumber": 112,
            "EndLineNumber": 417,
            "EndColumnNumber": 14,
            "Text": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "StartOffset": 22080,
            "EndOffset": 22643
          },
          "Parent": {
            "ScriptBlock": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "Parent": "It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Data Flow Tracker",
        "Path": [
          "Enhanced Documentation System - CPG Components",
          "Data Flow Tracker"
        ],
        "Data": null,
        "ExpandedName": "Data Flow Tracker",
        "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should track variable definitions and uses",
            "Path": "Enhanced Documentation System - CPG Components Data Flow Tracker Should track variable definitions and uses",
            "Data": null,
            "ExpandedName": "Should track variable definitions and uses",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should track variable definitions and uses",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Data Flow Tracker",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 391,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should perform taint analysis",
            "Path": "Enhanced Documentation System - CPG Components Data Flow Tracker Should perform taint analysis",
            "Data": null,
            "ExpandedName": "Should perform taint analysis",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should perform taint analysis",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Data Flow Tracker",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 405,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 2,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 2,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 50196,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T20:43:17.6686205-04:00",
            "CreationTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LastAccessTime": "2025-08-28T20:44:27.0013384-04:00",
            "LastAccessTimeUtc": "2025-08-29T00:44:27.0013384Z",
            "LastWriteTime": "2025-08-28T20:43:17.6686205-04:00",
            "LastWriteTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 23,
          "PassedCount": 2,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 46809013,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 680,
            "Microseconds": 901,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.417709837962963E-05,
            "TotalHours": 0.001300250361111111,
            "TotalMilliseconds": 4680.9013,
            "TotalMicroseconds": 4680901.3,
            "TotalNanoseconds": 4680901300.0,
            "TotalMinutes": 0.07801502166666667,
            "TotalSeconds": 4.6809013
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_987e9a83-43a0-4852-b50b-7810e03bd040",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "27908d1f-3444-4a7c-aad4-e951b25f7123",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1199199,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 119,
            "Microseconds": 919,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3879618055555555E-06,
            "TotalHours": 3.331108333333333E-05,
            "TotalMilliseconds": 119.9199,
            "TotalMicroseconds": 119919.9,
            "TotalNanoseconds": 119919900.0,
            "TotalMinutes": 0.001998665,
            "TotalSeconds": 0.1199199
          },
          "FrameworkDuration": {
            "Ticks": 3338424,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 333,
            "Microseconds": 842,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.863916666666666E-06,
            "TotalHours": 9.2734E-05,
            "TotalMilliseconds": 333.8424,
            "TotalMicroseconds": 333842.4,
            "TotalNanoseconds": 333842400.0,
            "TotalMinutes": 0.00556404,
            "TotalSeconds": 0.3338424
          },
          "UserDuration": {
            "Ticks": 42271390,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 227,
            "Microseconds": 139,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.8925219907407405E-05,
            "TotalHours": 0.0011742052777777778,
            "TotalMilliseconds": 4227.139,
            "TotalMicroseconds": 4227139.0,
            "TotalNanoseconds": 4227139000.0,
            "TotalMinutes": 0.07045231666666667,
            "TotalSeconds": 4.227139
          },
          "OwnDuration": {
            "Ticks": -50602521,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -60,
            "Microseconds": -252,
            "Nanoseconds": -100,
            "Minutes": 0,
            "Seconds": -5,
            "TotalDays": -5.856773263888889E-05,
            "TotalHours": -0.0014056255833333334,
            "TotalMilliseconds": -5060.2521,
            "TotalMicroseconds": -5060252.1,
            "TotalNanoseconds": -5060252100.0,
            "TotalMinutes": -0.084337535,
            "TotalSeconds": -5.0602521
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "00f170e2-f378-4dc1-850d-470bbf038648",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable",
            "Mock": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - CPG Components",
          "Path": [
            "Enhanced Documentation System - CPG Components"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - CPG Components",
          "ExpandedPath": "Enhanced Documentation System - CPG Components",
          "Blocks": [
            "[-] Thread-Safe Operations",
            "[-] Call Graph Builder",
            "[-] Data Flow Tracker"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 7,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 7,
          "ErrorRecord": [
            "You cannot call a method on a null-valued expression."
          ],
          "Duration": {
            "Ticks": 1416270,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 141,
            "Microseconds": 627,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.639201388888889E-06,
            "TotalHours": 3.9340833333333335E-05,
            "TotalMilliseconds": 141.627,
            "TotalMicroseconds": 141627.0,
            "TotalNanoseconds": 141627000.0,
            "TotalMinutes": 0.00236045,
            "TotalSeconds": 0.141627
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "CPG",
            "Core"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "2f84a03c-92b0-487f-a6ea-2a0d0b00bc48",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Thread-Safe Operations",
            "[-] Call Graph Builder",
            "[-] Data Flow Tracker"
          ],
          "Passed": false,
          "First": true,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:36.7151048-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 519900,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 51,
            "Microseconds": 990,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 6.017361111111111E-07,
            "TotalHours": 1.4441666666666666E-05,
            "TotalMilliseconds": 51.99,
            "TotalMicroseconds": 51990.0,
            "TotalNanoseconds": 51990000.0,
            "TotalMinutes": 0.0008665,
            "TotalSeconds": 0.05199
          },
          "UserDuration": {
            "Ticks": 896370,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 89,
            "Microseconds": 637,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.0374652777777778E-06,
            "TotalHours": 2.4899166666666667E-05,
            "TotalMilliseconds": 89.637,
            "TotalMicroseconds": 89637.0,
            "TotalNanoseconds": 89637000.0,
            "TotalMinutes": 0.00149395,
            "TotalSeconds": 0.089637
          },
          "OwnDuration": {
            "Ticks": 1416270,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 141,
            "Microseconds": 627,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.639201388888889E-06,
            "TotalHours": 3.9340833333333335E-05,
            "TotalMilliseconds": 141.627,
            "TotalMicroseconds": 141627.0,
            "TotalNanoseconds": 141627000.0,
            "TotalMinutes": 0.00236045,
            "TotalSeconds": 0.141627
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "5cad56ab-c9bf-4ee6-add0-1634ea060cf3",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-CPG] CPG Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-CPG] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"========== [BeforeAll-CPG] STARTING CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n            Write-Host \"[BeforeAll-CPG] Initializing CPG test environment...\" -ForegroundColor Yellow\r\n            Write-Debug \"[BeforeAll-CPG] Starting CPG module initialization\"\r\n            \r\n            # Module paths\r\n            $cpgModulePaths = @{\r\n                'CPG-ThreadSafeOperations' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-ThreadSafeOperations.psm1\"\r\n                'CPG-Unified' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-Unified.psm1\"\r\n                'CPG-CallGraphBuilder' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-CallGraphBuilder.psm1\"\r\n                'CPG-DataFlowTracker' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\CPG-DataFlowTracker.psm1\"\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Module paths configured:\" -ForegroundColor Yellow\r\n            $cpgModulePaths.GetEnumerator() | ForEach-Object {\r\n                Write-Host \"  $($_.Key): $($_.Value)\" -ForegroundColor Gray\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Module paths configured: $($cpgModulePaths.Keys -join ', ')\"\r\n            Write-Debug \"[BeforeAll-CPG] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] Current script variable status:\" -ForegroundColor Yellow\r\n            if ($script:CPGModulesAvailable) {\r\n                Write-Host \"  CPGModulesAvailable type: $($script:CPGModulesAvailable.GetType().FullName)\" -ForegroundColor Gray\r\n                Write-Host \"  CPGModulesAvailable keys: $($script:CPGModulesAvailable.Keys -join ', ')\" -ForegroundColor Gray\r\n            } else {\r\n                Write-Host \"  CPGModulesAvailable: NULL\" -ForegroundColor Red\r\n            }\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            Write-Host \"[BeforeAll-CPG] Testing availability for $($cpgModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n            foreach ($moduleName in $cpgModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-CPG] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Host \"[BeforeAll-CPG] ===== Testing Module: $moduleName =====\" -ForegroundColor White\r\n                Write-Debug \"[BeforeAll-CPG] Testing availability for module: $moduleName\"\r\n                \r\n                try {\r\n                    Write-Host \"[BeforeAll-CPG] Calling Test-ModuleAvailable for $moduleName...\" -ForegroundColor Gray\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $cpgModulePaths[$moduleName]\r\n                    Write-Host \"[BeforeAll-CPG] Test-ModuleAvailable returned: $moduleResult\" -ForegroundColor White\r\n                    \r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Host \"[BeforeAll-CPG] Updated script variable $moduleName = $moduleResult\" -ForegroundColor Green\r\n                        Write-Debug \"[BeforeAll-CPG] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Host \"[BeforeAll-CPG] ERROR: CPGModulesAvailable hashtable missing key: $moduleName\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-CPG] WARNING: CPGModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Host \"[BeforeAll-CPG] EXCEPTION testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                    Write-Debug \"[BeforeAll-CPG] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:CPGModulesAvailable -and $script:CPGModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:CPGModulesAvailable[$moduleName] = $false\r\n                        Write-Host \"[BeforeAll-CPG] Set $moduleName = false due to exception\" -ForegroundColor Red\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Write-Host \"[BeforeAll-CPG] ===== FINAL MODULE AVAILABILITY SUMMARY =====\" -ForegroundColor Cyan\r\n            $script:CPGModulesAvailable.GetEnumerator() | ForEach-Object {\r\n                $status = if ($_.Value) { \"AVAILABLE\" } else { \"NOT AVAILABLE\" }\r\n                $color = if ($_.Value) { \"Green\" } else { \"Red\" }\r\n                Write-Host \"  $($_.Key): $status\" -ForegroundColor $color\r\n            }\r\n            Write-Debug \"[BeforeAll-CPG] Final module availability: $($script:CPGModulesAvailable | ConvertTo-Json -Compress)\"\r\n            \r\n            Write-Host \"[BeforeAll-CPG] CPG module initialization completed\" -ForegroundColor Cyan\r\n            Write-Debug \"[BeforeAll-CPG] CPG module initialization completed\"\r\n            Write-Host \"========== [BeforeAll-CPG] END CPG MODULE TESTING ==========\" -ForegroundColor Cyan\r\n        }\r\n        \r\n        Context \"Thread-Safe Operations\" {\r\n            \r\n            It \"Should create thread-safe CPG wrapper\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                Write-Host \"[TEST-CONDITION] Evaluating skip condition for CPG-ThreadSafeOperations...\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Module availability value: $($script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                Write-Host \"[TEST-CONDITION] Skip condition result: $(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations'])\" -ForegroundColor Yellow\r\n                $cpg = New-ThreadSafeCPG\r\n                $cpg | Should -Not -BeNullOrEmpty\r\n                $cpg.GetType().Name | Should -Be \"ThreadSafeCPG\"\r\n            }\r\n            \r\n            It \"Should handle concurrent operations safely\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $cpg = New-ThreadSafeCPG\r\n                $results = @()\r\n                \r\n                # Simulate concurrent operations\r\n                $jobs = 1..10 | ForEach-Object {\r\n                    Start-Job -ScriptBlock {\r\n                        param($cpgInstance, $iteration)\r\n                        $cpgInstance.AddNode(\"TestNode$iteration\", \"Test\")\r\n                        return \"Success-$iteration\"\r\n                    } -ArgumentList $cpg, $_\r\n                }\r\n                \r\n                $results = $jobs | Wait-Job | Receive-Job\r\n                $jobs | Remove-Job\r\n                \r\n                $results.Count | Should -Be 10\r\n                $results | Should -Match \"Success-\"\r\n            }\r\n            \r\n            It \"Should provide thread safety statistics\" -Skip:(-not $script:CPGModulesAvailable['CPG-ThreadSafeOperations']) {\r\n                $stats = Get-ThreadSafetyStats\r\n                $stats | Should -Not -BeNullOrEmpty\r\n                $stats.TotalOperations | Should -BeOfType [int]\r\n                $stats.ReadOperations | Should -BeOfType [int]\r\n                $stats.WriteOperations | Should -BeOfType [int]\r\n            }\r\n        }\r\n        \r\n        Context \"Call Graph Builder\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-CallGraphBuilder module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should build call graphs from source code\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Build\" -ScriptBlock {\r\n                    $testCode = @'\r\nfunction Test-Function {\r\n    param([string]$Input)\r\n    Another-Function $Input\r\n    return $Input\r\n}\r\n\r\nfunction Another-Function {\r\n    param([string]$Data)\r\n    Write-Output $Data\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $testCode -Language \"PowerShell\"\r\n                    $callGraph | Should -Not -BeNullOrEmpty\r\n                    $callGraph.Nodes.Count | Should -BeGreaterThan 0\r\n                    $callGraph.Edges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n            \r\n            It \"Should detect recursive calls\" -Skip:(-not $script:CPGModulesAvailable['CPG-CallGraphBuilder']) {\r\n                Measure-TestPerformance -TestName \"CallGraph-Recursive\" -ScriptBlock {\r\n                    $recursiveCode = @'\r\nfunction Recursive-Function {\r\n    param([int]$Count)\r\n    if ($Count -gt 0) {\r\n        Recursive-Function ($Count - 1)\r\n    }\r\n}\r\n'@\r\n                    \r\n                    $callGraph = Build-CallGraph -SourceCode $recursiveCode -Language \"PowerShell\"\r\n                    $recursiveEdges = $callGraph.Edges | Where-Object { $_.Source -eq $_.Target }\r\n                    $recursiveEdges.Count | Should -BeGreaterThan 0\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Data Flow Tracker\" {\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 217,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": false,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 21128,
            "Length": 210,
            "StartLine": 385,
            "StartColumn": 23,
            "EndLine": 389,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "c4815629-01e2-461a-b09b-c08e08906e39",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }",
            "Parent": "{\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }"
          }
        },
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should track variable definitions and uses",
            "Path": "Enhanced Documentation System - CPG Components Data Flow Tracker Should track variable definitions and uses",
            "Data": null,
            "ExpandedName": "Should track variable definitions and uses",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should track variable definitions and uses",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Data Flow Tracker",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 391,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should perform taint analysis",
            "Path": "Enhanced Documentation System - CPG Components Data Flow Tracker Should perform taint analysis",
            "Data": null,
            "ExpandedName": "Should perform taint analysis",
            "ExpandedPath": "Enhanced Documentation System - CPG Components.Data Flow Tracker.Should perform taint analysis",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Data Flow Tracker",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 405,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": false,
        "Last": true,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": false,
        "ExecutedAt": "0001-01-01T00:00:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "UserDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "OwnDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 21103,
            "Length": 1551,
            "StartLine": 384,
            "StartColumn": 37,
            "EndLine": 418,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "ae18a096-4336-4d57-8990-0236cf757f5f",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            BeforeAll {\r\n                if (-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                    Set-ItResult -Skipped -Because \"CPG-DataFlowTracker module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should track variable definitions and uses\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-DefUse\" -ScriptBlock {\r\n                    $testCode = @'\r\n$variable = \"test\"\r\nWrite-Output $variable\r\n$variable = \"modified\"\r\n'@\r\n                    \r\n                    $dataFlow = Trace-DataFlow -SourceCode $testCode -Language \"PowerShell\"\r\n                    $dataFlow | Should -Not -BeNullOrEmpty\r\n                    $dataFlow.DefUseChains | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should perform taint analysis\" -Skip:(-not $script:CPGModulesAvailable['CPG-DataFlowTracker']) {\r\n                Measure-TestPerformance -TestName \"DataFlow-Taint\" -ScriptBlock {\r\n                    $taintedCode = @'\r\n$userInput = Read-Host \"Enter data\"\r\n$sqlQuery = \"SELECT * FROM users WHERE name = '$userInput'\"\r\nInvoke-SqlCmd -Query $sqlQuery\r\n'@\r\n                    \r\n                    $taintAnalysis = Invoke-TaintAnalysis -SourceCode $taintedCode -Language \"PowerShell\"\r\n                    $taintAnalysis | Should -Not -BeNullOrEmpty\r\n                    $taintAnalysis.TaintedPaths | Should -Not -BeNullOrEmpty\r\n                }\r\n            }\r\n        }"
          }
        },
        "StartLine": 384,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 2,
        "OwnPassedCount": 0,
        "OwnFailedCount": 2,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": false,
      "Last": true,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 405,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should create function documentation prompts",
      "Path": [
        "Enhanced Documentation System - LLM Integration",
        "Prompt Templates",
        "Should create function documentation prompts"
      ],
      "Data": null,
      "ExpandedName": "Should create function documentation prompts",
      "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create function documentation prompts",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }",
          "Type": 19,
          "Start": 28017,
          "Length": 427,
          "StartLine": 518,
          "StartColumn": 127,
          "EndLine": 525,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "e59b77d2-8b42-4f84-a5ba-8a7a2f706bce",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }",
            "Traps": null,
            "Extent": "Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 518,
            "StartColumnNumber": 127,
            "EndLineNumber": 525,
            "EndColumnNumber": 14,
            "Text": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }",
            "StartOffset": 28017,
            "EndOffset": 28444
          },
          "Parent": {
            "ScriptBlock": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }",
            "Parent": "It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Prompt Templates",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Prompt Templates"
        ],
        "Data": null,
        "ExpandedName": "Prompt Templates",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should create function documentation prompts",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should create function documentation prompts",
            "Data": null,
            "ExpandedName": "Should create function documentation prompts",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create function documentation prompts",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 518,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should create module documentation prompts",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should create module documentation prompts",
            "Data": null,
            "ExpandedName": "Should create module documentation prompts",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create module documentation prompts",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 527,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should support variable substitution",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should support variable substitution",
            "Data": null,
            "ExpandedName": "Should support variable substitution",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should support variable substitution",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 536,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 3,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 3,
        "ErrorRecord": [
          {
            "Exception": "System.Management.Automation.RuntimeException: Cannot index into a null array.\r\n   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
            "TargetObject": null,
            "CategoryInfo": "InvalidOperation: (:) [], RuntimeException",
            "FullyQualifiedErrorId": "NullArray",
            "ErrorDetails": null,
            "InvocationInfo": "System.Management.Automation.InvocationInfo",
            "ScriptStackTrace": "at <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 513\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1975\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60",
            "PipelineIterationInfo": ""
          }
        ],
        "Duration": {
          "Ticks": 464071,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 46,
          "Microseconds": 407,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.37119212962963E-07,
          "TotalHours": 1.2890861111111111E-05,
          "TotalMilliseconds": 46.4071,
          "TotalMicroseconds": 46407.1,
          "TotalNanoseconds": 46407100.0,
          "TotalMinutes": 0.0007734516666666666,
          "TotalSeconds": 0.0464071
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 50196,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T20:43:17.6686205-04:00",
            "CreationTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LastAccessTime": "2025-08-28T20:44:27.0013384-04:00",
            "LastAccessTimeUtc": "2025-08-29T00:44:27.0013384Z",
            "LastWriteTime": "2025-08-28T20:43:17.6686205-04:00",
            "LastWriteTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 23,
          "PassedCount": 2,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 46809013,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 680,
            "Microseconds": 901,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.417709837962963E-05,
            "TotalHours": 0.001300250361111111,
            "TotalMilliseconds": 4680.9013,
            "TotalMicroseconds": 4680901.3,
            "TotalNanoseconds": 4680901300.0,
            "TotalMinutes": 0.07801502166666667,
            "TotalSeconds": 4.6809013
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_987e9a83-43a0-4852-b50b-7810e03bd040",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "27908d1f-3444-4a7c-aad4-e951b25f7123",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1199199,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 119,
            "Microseconds": 919,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3879618055555555E-06,
            "TotalHours": 3.331108333333333E-05,
            "TotalMilliseconds": 119.9199,
            "TotalMicroseconds": 119919.9,
            "TotalNanoseconds": 119919900.0,
            "TotalMinutes": 0.001998665,
            "TotalSeconds": 0.1199199
          },
          "FrameworkDuration": {
            "Ticks": 3338424,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 333,
            "Microseconds": 842,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.863916666666666E-06,
            "TotalHours": 9.2734E-05,
            "TotalMilliseconds": 333.8424,
            "TotalMicroseconds": 333842.4,
            "TotalNanoseconds": 333842400.0,
            "TotalMinutes": 0.00556404,
            "TotalSeconds": 0.3338424
          },
          "UserDuration": {
            "Ticks": 42271390,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 227,
            "Microseconds": 139,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.8925219907407405E-05,
            "TotalHours": 0.0011742052777777778,
            "TotalMilliseconds": 4227.139,
            "TotalMicroseconds": 4227139.0,
            "TotalNanoseconds": 4227139000.0,
            "TotalMinutes": 0.07045231666666667,
            "TotalSeconds": 4.227139
          },
          "OwnDuration": {
            "Ticks": -50602521,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -60,
            "Microseconds": -252,
            "Nanoseconds": -100,
            "Minutes": 0,
            "Seconds": -5,
            "TotalDays": -5.856773263888889E-05,
            "TotalHours": -0.0014056255833333334,
            "TotalMilliseconds": -5060.2521,
            "TotalMicroseconds": -5060252.1,
            "TotalNanoseconds": -5060252100.0,
            "TotalMinutes": -0.084337535,
            "TotalSeconds": -5.0602521
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "00f170e2-f378-4dc1-850d-470bbf038648",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable",
            "Mock": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - LLM Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - LLM Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration",
          "Blocks": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 6,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 9,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 25731901,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 573,
            "Microseconds": 190,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.9782292824074074E-05,
            "TotalHours": 0.0007147750277777778,
            "TotalMilliseconds": 2573.1901,
            "TotalMicroseconds": 2573190.1,
            "TotalNanoseconds": 2573190100.0,
            "TotalMinutes": 0.04288650166666667,
            "TotalSeconds": 2.5731901
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "LLM",
            "Integration"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "98403d94-7f80-4824-bc48-8d5eea700a8b",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:36.8567353-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 1104343,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 110,
            "Microseconds": 434,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.2781747685185185E-06,
            "TotalHours": 3.067619444444444E-05,
            "TotalMilliseconds": 110.4343,
            "TotalMicroseconds": 110434.3,
            "TotalNanoseconds": 110434300.0,
            "TotalMinutes": 0.0018405716666666666,
            "TotalSeconds": 0.1104343
          },
          "UserDuration": {
            "Ticks": 24627558,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 462,
            "Microseconds": 755,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.8504118055555556E-05,
            "TotalHours": 0.0006840988333333333,
            "TotalMilliseconds": 2462.7558,
            "TotalMicroseconds": 2462755.8,
            "TotalNanoseconds": 2462755800.0,
            "TotalMinutes": 0.04104593,
            "TotalSeconds": 2.4627558
          },
          "OwnDuration": {
            "Ticks": 24341397,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 434,
            "Microseconds": 139,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.8172913194444444E-05,
            "TotalHours": 0.0006761499166666666,
            "TotalMilliseconds": 2434.1397,
            "TotalMicroseconds": 2434139.7,
            "TotalNanoseconds": 2434139700.0,
            "TotalMinutes": 0.040568995,
            "TotalSeconds": 2.4341397
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "7f9521e2-2f25-4240-adf6-b2bf7560a756",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 425,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 27665,
            "Length": 210,
            "StartLine": 512,
            "StartColumn": 23,
            "EndLine": 516,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "b058d240-3f68-4dbe-bf2d-b3d521c06952",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }",
            "Parent": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }"
          }
        },
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should create function documentation prompts",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should create function documentation prompts",
            "Data": null,
            "ExpandedName": "Should create function documentation prompts",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create function documentation prompts",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 518,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should create module documentation prompts",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should create module documentation prompts",
            "Data": null,
            "ExpandedName": "Should create module documentation prompts",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create module documentation prompts",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 527,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should support variable substitution",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should support variable substitution",
            "Data": null,
            "ExpandedName": "Should support variable substitution",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should support variable substitution",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 536,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": false,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:46:39.2654058-04:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 447373,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 44,
          "Microseconds": 737,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.17792824074074E-07,
          "TotalHours": 1.2427027777777777E-05,
          "TotalMilliseconds": 44.7373,
          "TotalMicroseconds": 44737.3,
          "TotalNanoseconds": 44737300.0,
          "TotalMinutes": 0.0007456216666666667,
          "TotalSeconds": 0.0447373
        },
        "UserDuration": {
          "Ticks": 16698,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 1,
          "Microseconds": 669,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.932638888888889E-08,
          "TotalHours": 4.638333333333333E-07,
          "TotalMilliseconds": 1.6698,
          "TotalMicroseconds": 1669.8,
          "TotalNanoseconds": 1669800.0,
          "TotalMinutes": 2.783E-05,
          "TotalSeconds": 0.0016698
        },
        "OwnDuration": {
          "Ticks": 464071,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 46,
          "Microseconds": 407,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.37119212962963E-07,
          "TotalHours": 1.2890861111111111E-05,
          "TotalMilliseconds": 46.4071,
          "TotalMicroseconds": 46407.1,
          "TotalNanoseconds": 46407100.0,
          "TotalMinutes": 0.0007734516666666666,
          "TotalSeconds": 0.0464071
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 27640,
            "Length": 2042,
            "StartLine": 511,
            "StartColumn": 36,
            "EndLine": 547,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "523c184a-faf6-44e3-81b2-c7429831fb34",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }"
          }
        },
        "StartLine": 511,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 3,
        "OwnPassedCount": 0,
        "OwnFailedCount": 3,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": true,
      "Last": false,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 518,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should create module documentation prompts",
      "Path": [
        "Enhanced Documentation System - LLM Integration",
        "Prompt Templates",
        "Should create module documentation prompts"
      ],
      "Data": null,
      "ExpandedName": "Should create module documentation prompts",
      "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create module documentation prompts",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }",
          "Type": 19,
          "Start": 28584,
          "Length": 411,
          "StartLine": 527,
          "StartColumn": 125,
          "EndLine": 534,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "7eb56070-7462-4dc8-85d4-3d46da587c3d",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }",
            "Traps": null,
            "Extent": "Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 527,
            "StartColumnNumber": 125,
            "EndLineNumber": 534,
            "EndColumnNumber": 14,
            "Text": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }",
            "StartOffset": 28584,
            "EndOffset": 28995
          },
          "Parent": {
            "ScriptBlock": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }",
            "Parent": "It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Prompt Templates",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Prompt Templates"
        ],
        "Data": null,
        "ExpandedName": "Prompt Templates",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should create function documentation prompts",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should create function documentation prompts",
            "Data": null,
            "ExpandedName": "Should create function documentation prompts",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create function documentation prompts",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 518,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should create module documentation prompts",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should create module documentation prompts",
            "Data": null,
            "ExpandedName": "Should create module documentation prompts",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create module documentation prompts",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 527,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should support variable substitution",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should support variable substitution",
            "Data": null,
            "ExpandedName": "Should support variable substitution",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should support variable substitution",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 536,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 3,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 3,
        "ErrorRecord": [
          {
            "Exception": "System.Management.Automation.RuntimeException: Cannot index into a null array.\r\n   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
            "TargetObject": null,
            "CategoryInfo": "InvalidOperation: (:) [], RuntimeException",
            "FullyQualifiedErrorId": "NullArray",
            "ErrorDetails": null,
            "InvocationInfo": "System.Management.Automation.InvocationInfo",
            "ScriptStackTrace": "at <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 513\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1975\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60",
            "PipelineIterationInfo": ""
          }
        ],
        "Duration": {
          "Ticks": 464071,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 46,
          "Microseconds": 407,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.37119212962963E-07,
          "TotalHours": 1.2890861111111111E-05,
          "TotalMilliseconds": 46.4071,
          "TotalMicroseconds": 46407.1,
          "TotalNanoseconds": 46407100.0,
          "TotalMinutes": 0.0007734516666666666,
          "TotalSeconds": 0.0464071
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 50196,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T20:43:17.6686205-04:00",
            "CreationTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LastAccessTime": "2025-08-28T20:44:27.0013384-04:00",
            "LastAccessTimeUtc": "2025-08-29T00:44:27.0013384Z",
            "LastWriteTime": "2025-08-28T20:43:17.6686205-04:00",
            "LastWriteTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 23,
          "PassedCount": 2,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 46809013,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 680,
            "Microseconds": 901,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.417709837962963E-05,
            "TotalHours": 0.001300250361111111,
            "TotalMilliseconds": 4680.9013,
            "TotalMicroseconds": 4680901.3,
            "TotalNanoseconds": 4680901300.0,
            "TotalMinutes": 0.07801502166666667,
            "TotalSeconds": 4.6809013
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_987e9a83-43a0-4852-b50b-7810e03bd040",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "27908d1f-3444-4a7c-aad4-e951b25f7123",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1199199,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 119,
            "Microseconds": 919,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3879618055555555E-06,
            "TotalHours": 3.331108333333333E-05,
            "TotalMilliseconds": 119.9199,
            "TotalMicroseconds": 119919.9,
            "TotalNanoseconds": 119919900.0,
            "TotalMinutes": 0.001998665,
            "TotalSeconds": 0.1199199
          },
          "FrameworkDuration": {
            "Ticks": 3338424,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 333,
            "Microseconds": 842,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.863916666666666E-06,
            "TotalHours": 9.2734E-05,
            "TotalMilliseconds": 333.8424,
            "TotalMicroseconds": 333842.4,
            "TotalNanoseconds": 333842400.0,
            "TotalMinutes": 0.00556404,
            "TotalSeconds": 0.3338424
          },
          "UserDuration": {
            "Ticks": 42271390,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 227,
            "Microseconds": 139,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.8925219907407405E-05,
            "TotalHours": 0.0011742052777777778,
            "TotalMilliseconds": 4227.139,
            "TotalMicroseconds": 4227139.0,
            "TotalNanoseconds": 4227139000.0,
            "TotalMinutes": 0.07045231666666667,
            "TotalSeconds": 4.227139
          },
          "OwnDuration": {
            "Ticks": -50602521,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -60,
            "Microseconds": -252,
            "Nanoseconds": -100,
            "Minutes": 0,
            "Seconds": -5,
            "TotalDays": -5.856773263888889E-05,
            "TotalHours": -0.0014056255833333334,
            "TotalMilliseconds": -5060.2521,
            "TotalMicroseconds": -5060252.1,
            "TotalNanoseconds": -5060252100.0,
            "TotalMinutes": -0.084337535,
            "TotalSeconds": -5.0602521
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "00f170e2-f378-4dc1-850d-470bbf038648",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable",
            "Mock": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - LLM Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - LLM Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration",
          "Blocks": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 6,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 9,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 25731901,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 573,
            "Microseconds": 190,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.9782292824074074E-05,
            "TotalHours": 0.0007147750277777778,
            "TotalMilliseconds": 2573.1901,
            "TotalMicroseconds": 2573190.1,
            "TotalNanoseconds": 2573190100.0,
            "TotalMinutes": 0.04288650166666667,
            "TotalSeconds": 2.5731901
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "LLM",
            "Integration"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "98403d94-7f80-4824-bc48-8d5eea700a8b",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:36.8567353-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 1104343,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 110,
            "Microseconds": 434,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.2781747685185185E-06,
            "TotalHours": 3.067619444444444E-05,
            "TotalMilliseconds": 110.4343,
            "TotalMicroseconds": 110434.3,
            "TotalNanoseconds": 110434300.0,
            "TotalMinutes": 0.0018405716666666666,
            "TotalSeconds": 0.1104343
          },
          "UserDuration": {
            "Ticks": 24627558,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 462,
            "Microseconds": 755,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.8504118055555556E-05,
            "TotalHours": 0.0006840988333333333,
            "TotalMilliseconds": 2462.7558,
            "TotalMicroseconds": 2462755.8,
            "TotalNanoseconds": 2462755800.0,
            "TotalMinutes": 0.04104593,
            "TotalSeconds": 2.4627558
          },
          "OwnDuration": {
            "Ticks": 24341397,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 434,
            "Microseconds": 139,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.8172913194444444E-05,
            "TotalHours": 0.0006761499166666666,
            "TotalMilliseconds": 2434.1397,
            "TotalMicroseconds": 2434139.7,
            "TotalNanoseconds": 2434139700.0,
            "TotalMinutes": 0.040568995,
            "TotalSeconds": 2.4341397
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "7f9521e2-2f25-4240-adf6-b2bf7560a756",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 425,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 27665,
            "Length": 210,
            "StartLine": 512,
            "StartColumn": 23,
            "EndLine": 516,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "b058d240-3f68-4dbe-bf2d-b3d521c06952",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }",
            "Parent": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }"
          }
        },
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should create function documentation prompts",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should create function documentation prompts",
            "Data": null,
            "ExpandedName": "Should create function documentation prompts",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create function documentation prompts",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 518,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should create module documentation prompts",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should create module documentation prompts",
            "Data": null,
            "ExpandedName": "Should create module documentation prompts",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create module documentation prompts",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 527,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should support variable substitution",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should support variable substitution",
            "Data": null,
            "ExpandedName": "Should support variable substitution",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should support variable substitution",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 536,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": false,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:46:39.2654058-04:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 447373,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 44,
          "Microseconds": 737,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.17792824074074E-07,
          "TotalHours": 1.2427027777777777E-05,
          "TotalMilliseconds": 44.7373,
          "TotalMicroseconds": 44737.3,
          "TotalNanoseconds": 44737300.0,
          "TotalMinutes": 0.0007456216666666667,
          "TotalSeconds": 0.0447373
        },
        "UserDuration": {
          "Ticks": 16698,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 1,
          "Microseconds": 669,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.932638888888889E-08,
          "TotalHours": 4.638333333333333E-07,
          "TotalMilliseconds": 1.6698,
          "TotalMicroseconds": 1669.8,
          "TotalNanoseconds": 1669800.0,
          "TotalMinutes": 2.783E-05,
          "TotalSeconds": 0.0016698
        },
        "OwnDuration": {
          "Ticks": 464071,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 46,
          "Microseconds": 407,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.37119212962963E-07,
          "TotalHours": 1.2890861111111111E-05,
          "TotalMilliseconds": 46.4071,
          "TotalMicroseconds": 46407.1,
          "TotalNanoseconds": 46407100.0,
          "TotalMinutes": 0.0007734516666666666,
          "TotalSeconds": 0.0464071
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 27640,
            "Length": 2042,
            "StartLine": 511,
            "StartColumn": 36,
            "EndLine": 547,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "523c184a-faf6-44e3-81b2-c7429831fb34",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }"
          }
        },
        "StartLine": 511,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 3,
        "OwnPassedCount": 0,
        "OwnFailedCount": 3,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": false,
      "Last": false,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 527,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should support variable substitution",
      "Path": [
        "Enhanced Documentation System - LLM Integration",
        "Prompt Templates",
        "Should support variable substitution"
      ],
      "Data": null,
      "ExpandedName": "Should support variable substitution",
      "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should support variable substitution",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }",
          "Type": 19,
          "Start": 29129,
          "Length": 542,
          "StartLine": 536,
          "StartColumn": 119,
          "EndLine": 546,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "66c2c9ef-621a-4997-9019-b7a174af24ce",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }",
            "Traps": null,
            "Extent": "Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 536,
            "StartColumnNumber": 119,
            "EndLineNumber": 546,
            "EndColumnNumber": 14,
            "Text": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }",
            "StartOffset": 29129,
            "EndOffset": 29671
          },
          "Parent": {
            "ScriptBlock": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }",
            "Parent": "It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Prompt Templates",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Prompt Templates"
        ],
        "Data": null,
        "ExpandedName": "Prompt Templates",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should create function documentation prompts",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should create function documentation prompts",
            "Data": null,
            "ExpandedName": "Should create function documentation prompts",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create function documentation prompts",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 518,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should create module documentation prompts",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should create module documentation prompts",
            "Data": null,
            "ExpandedName": "Should create module documentation prompts",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create module documentation prompts",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 527,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should support variable substitution",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should support variable substitution",
            "Data": null,
            "ExpandedName": "Should support variable substitution",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should support variable substitution",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 536,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 3,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 3,
        "ErrorRecord": [
          {
            "Exception": "System.Management.Automation.RuntimeException: Cannot index into a null array.\r\n   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
            "TargetObject": null,
            "CategoryInfo": "InvalidOperation: (:) [], RuntimeException",
            "FullyQualifiedErrorId": "NullArray",
            "ErrorDetails": null,
            "InvocationInfo": "System.Management.Automation.InvocationInfo",
            "ScriptStackTrace": "at <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 513\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1975\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60",
            "PipelineIterationInfo": ""
          }
        ],
        "Duration": {
          "Ticks": 464071,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 46,
          "Microseconds": 407,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.37119212962963E-07,
          "TotalHours": 1.2890861111111111E-05,
          "TotalMilliseconds": 46.4071,
          "TotalMicroseconds": 46407.1,
          "TotalNanoseconds": 46407100.0,
          "TotalMinutes": 0.0007734516666666666,
          "TotalSeconds": 0.0464071
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 50196,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T20:43:17.6686205-04:00",
            "CreationTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LastAccessTime": "2025-08-28T20:44:27.0013384-04:00",
            "LastAccessTimeUtc": "2025-08-29T00:44:27.0013384Z",
            "LastWriteTime": "2025-08-28T20:43:17.6686205-04:00",
            "LastWriteTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 23,
          "PassedCount": 2,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 46809013,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 680,
            "Microseconds": 901,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.417709837962963E-05,
            "TotalHours": 0.001300250361111111,
            "TotalMilliseconds": 4680.9013,
            "TotalMicroseconds": 4680901.3,
            "TotalNanoseconds": 4680901300.0,
            "TotalMinutes": 0.07801502166666667,
            "TotalSeconds": 4.6809013
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_987e9a83-43a0-4852-b50b-7810e03bd040",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "27908d1f-3444-4a7c-aad4-e951b25f7123",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1199199,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 119,
            "Microseconds": 919,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3879618055555555E-06,
            "TotalHours": 3.331108333333333E-05,
            "TotalMilliseconds": 119.9199,
            "TotalMicroseconds": 119919.9,
            "TotalNanoseconds": 119919900.0,
            "TotalMinutes": 0.001998665,
            "TotalSeconds": 0.1199199
          },
          "FrameworkDuration": {
            "Ticks": 3338424,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 333,
            "Microseconds": 842,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.863916666666666E-06,
            "TotalHours": 9.2734E-05,
            "TotalMilliseconds": 333.8424,
            "TotalMicroseconds": 333842.4,
            "TotalNanoseconds": 333842400.0,
            "TotalMinutes": 0.00556404,
            "TotalSeconds": 0.3338424
          },
          "UserDuration": {
            "Ticks": 42271390,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 227,
            "Microseconds": 139,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.8925219907407405E-05,
            "TotalHours": 0.0011742052777777778,
            "TotalMilliseconds": 4227.139,
            "TotalMicroseconds": 4227139.0,
            "TotalNanoseconds": 4227139000.0,
            "TotalMinutes": 0.07045231666666667,
            "TotalSeconds": 4.227139
          },
          "OwnDuration": {
            "Ticks": -50602521,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -60,
            "Microseconds": -252,
            "Nanoseconds": -100,
            "Minutes": 0,
            "Seconds": -5,
            "TotalDays": -5.856773263888889E-05,
            "TotalHours": -0.0014056255833333334,
            "TotalMilliseconds": -5060.2521,
            "TotalMicroseconds": -5060252.1,
            "TotalNanoseconds": -5060252100.0,
            "TotalMinutes": -0.084337535,
            "TotalSeconds": -5.0602521
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "00f170e2-f378-4dc1-850d-470bbf038648",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable",
            "Mock": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - LLM Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - LLM Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration",
          "Blocks": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 6,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 9,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 25731901,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 573,
            "Microseconds": 190,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.9782292824074074E-05,
            "TotalHours": 0.0007147750277777778,
            "TotalMilliseconds": 2573.1901,
            "TotalMicroseconds": 2573190.1,
            "TotalNanoseconds": 2573190100.0,
            "TotalMinutes": 0.04288650166666667,
            "TotalSeconds": 2.5731901
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "LLM",
            "Integration"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "98403d94-7f80-4824-bc48-8d5eea700a8b",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:36.8567353-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 1104343,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 110,
            "Microseconds": 434,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.2781747685185185E-06,
            "TotalHours": 3.067619444444444E-05,
            "TotalMilliseconds": 110.4343,
            "TotalMicroseconds": 110434.3,
            "TotalNanoseconds": 110434300.0,
            "TotalMinutes": 0.0018405716666666666,
            "TotalSeconds": 0.1104343
          },
          "UserDuration": {
            "Ticks": 24627558,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 462,
            "Microseconds": 755,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.8504118055555556E-05,
            "TotalHours": 0.0006840988333333333,
            "TotalMilliseconds": 2462.7558,
            "TotalMicroseconds": 2462755.8,
            "TotalNanoseconds": 2462755800.0,
            "TotalMinutes": 0.04104593,
            "TotalSeconds": 2.4627558
          },
          "OwnDuration": {
            "Ticks": 24341397,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 434,
            "Microseconds": 139,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.8172913194444444E-05,
            "TotalHours": 0.0006761499166666666,
            "TotalMilliseconds": 2434.1397,
            "TotalMicroseconds": 2434139.7,
            "TotalNanoseconds": 2434139700.0,
            "TotalMinutes": 0.040568995,
            "TotalSeconds": 2.4341397
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "7f9521e2-2f25-4240-adf6-b2bf7560a756",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 425,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 27665,
            "Length": 210,
            "StartLine": 512,
            "StartColumn": 23,
            "EndLine": 516,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "b058d240-3f68-4dbe-bf2d-b3d521c06952",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }",
            "Parent": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }"
          }
        },
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should create function documentation prompts",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should create function documentation prompts",
            "Data": null,
            "ExpandedName": "Should create function documentation prompts",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create function documentation prompts",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 518,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should create module documentation prompts",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should create module documentation prompts",
            "Data": null,
            "ExpandedName": "Should create module documentation prompts",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should create module documentation prompts",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 527,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should support variable substitution",
            "Path": "Enhanced Documentation System - LLM Integration Prompt Templates Should support variable substitution",
            "Data": null,
            "ExpandedName": "Should support variable substitution",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Prompt Templates.Should support variable substitution",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Prompt Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 536,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": false,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:46:39.2654058-04:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 447373,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 44,
          "Microseconds": 737,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.17792824074074E-07,
          "TotalHours": 1.2427027777777777E-05,
          "TotalMilliseconds": 44.7373,
          "TotalMicroseconds": 44737.3,
          "TotalNanoseconds": 44737300.0,
          "TotalMinutes": 0.0007456216666666667,
          "TotalSeconds": 0.0447373
        },
        "UserDuration": {
          "Ticks": 16698,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 1,
          "Microseconds": 669,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.932638888888889E-08,
          "TotalHours": 4.638333333333333E-07,
          "TotalMilliseconds": 1.6698,
          "TotalMicroseconds": 1669.8,
          "TotalNanoseconds": 1669800.0,
          "TotalMinutes": 2.783E-05,
          "TotalSeconds": 0.0016698
        },
        "OwnDuration": {
          "Ticks": 464071,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 46,
          "Microseconds": 407,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 5.37119212962963E-07,
          "TotalHours": 1.2890861111111111E-05,
          "TotalMilliseconds": 46.4071,
          "TotalMicroseconds": 46407.1,
          "TotalNanoseconds": 46407100.0,
          "TotalMinutes": 0.0007734516666666666,
          "TotalSeconds": 0.0464071
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 27640,
            "Length": 2042,
            "StartLine": 511,
            "StartColumn": 36,
            "EndLine": 547,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "523c184a-faf6-44e3-81b2-c7429831fb34",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }"
          }
        },
        "StartLine": 511,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 3,
        "OwnPassedCount": 0,
        "OwnFailedCount": 3,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": false,
      "Last": true,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 536,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should cache and retrieve responses",
      "Path": [
        "Enhanced Documentation System - LLM Integration",
        "Response Cache",
        "Should cache and retrieve responses"
      ],
      "Data": null,
      "ExpandedName": "Should cache and retrieve responses",
      "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should cache and retrieve responses",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }",
          "Type": 19,
          "Start": 30089,
          "Length": 485,
          "StartLine": 556,
          "StartColumn": 116,
          "EndLine": 566,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "1d06bbb4-2afe-4d38-ab49-d4de77f4021f",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }",
            "Traps": null,
            "Extent": "Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 556,
            "StartColumnNumber": 116,
            "EndLineNumber": 566,
            "EndColumnNumber": 14,
            "Text": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }",
            "StartOffset": 30089,
            "EndOffset": 30574
          },
          "Parent": {
            "ScriptBlock": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }",
            "Parent": "It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Response Cache",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Response Cache"
        ],
        "Data": null,
        "ExpandedName": "Response Cache",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should cache and retrieve responses",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should cache and retrieve responses",
            "Data": null,
            "ExpandedName": "Should cache and retrieve responses",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should cache and retrieve responses",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 556,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle TTL expiration",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should handle TTL expiration",
            "Data": null,
            "ExpandedName": "Should handle TTL expiration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should handle TTL expiration",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 568,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should provide cache statistics",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should provide cache statistics",
            "Data": null,
            "ExpandedName": "Should provide cache statistics",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should provide cache statistics",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 581,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 3,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 3,
        "ErrorRecord": [
          {
            "Exception": "System.Management.Automation.RuntimeException: Cannot index into a null array.\r\n   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
            "TargetObject": null,
            "CategoryInfo": "InvalidOperation: (:) [], RuntimeException",
            "FullyQualifiedErrorId": "NullArray",
            "ErrorDetails": null,
            "InvocationInfo": "System.Management.Automation.InvocationInfo",
            "ScriptStackTrace": "at <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 551\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1975\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60",
            "PipelineIterationInfo": ""
          }
        ],
        "Duration": {
          "Ticks": 557757,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 55,
          "Microseconds": 775,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.455520833333333E-07,
          "TotalHours": 1.549325E-05,
          "TotalMilliseconds": 55.7757,
          "TotalMicroseconds": 55775.7,
          "TotalNanoseconds": 55775700.0,
          "TotalMinutes": 0.000929595,
          "TotalSeconds": 0.0557757
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 50196,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T20:43:17.6686205-04:00",
            "CreationTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LastAccessTime": "2025-08-28T20:44:27.0013384-04:00",
            "LastAccessTimeUtc": "2025-08-29T00:44:27.0013384Z",
            "LastWriteTime": "2025-08-28T20:43:17.6686205-04:00",
            "LastWriteTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 23,
          "PassedCount": 2,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 46809013,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 680,
            "Microseconds": 901,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.417709837962963E-05,
            "TotalHours": 0.001300250361111111,
            "TotalMilliseconds": 4680.9013,
            "TotalMicroseconds": 4680901.3,
            "TotalNanoseconds": 4680901300.0,
            "TotalMinutes": 0.07801502166666667,
            "TotalSeconds": 4.6809013
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_987e9a83-43a0-4852-b50b-7810e03bd040",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "27908d1f-3444-4a7c-aad4-e951b25f7123",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1199199,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 119,
            "Microseconds": 919,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3879618055555555E-06,
            "TotalHours": 3.331108333333333E-05,
            "TotalMilliseconds": 119.9199,
            "TotalMicroseconds": 119919.9,
            "TotalNanoseconds": 119919900.0,
            "TotalMinutes": 0.001998665,
            "TotalSeconds": 0.1199199
          },
          "FrameworkDuration": {
            "Ticks": 3338424,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 333,
            "Microseconds": 842,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.863916666666666E-06,
            "TotalHours": 9.2734E-05,
            "TotalMilliseconds": 333.8424,
            "TotalMicroseconds": 333842.4,
            "TotalNanoseconds": 333842400.0,
            "TotalMinutes": 0.00556404,
            "TotalSeconds": 0.3338424
          },
          "UserDuration": {
            "Ticks": 42271390,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 227,
            "Microseconds": 139,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.8925219907407405E-05,
            "TotalHours": 0.0011742052777777778,
            "TotalMilliseconds": 4227.139,
            "TotalMicroseconds": 4227139.0,
            "TotalNanoseconds": 4227139000.0,
            "TotalMinutes": 0.07045231666666667,
            "TotalSeconds": 4.227139
          },
          "OwnDuration": {
            "Ticks": -50602521,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -60,
            "Microseconds": -252,
            "Nanoseconds": -100,
            "Minutes": 0,
            "Seconds": -5,
            "TotalDays": -5.856773263888889E-05,
            "TotalHours": -0.0014056255833333334,
            "TotalMilliseconds": -5060.2521,
            "TotalMicroseconds": -5060252.1,
            "TotalNanoseconds": -5060252100.0,
            "TotalMinutes": -0.084337535,
            "TotalSeconds": -5.0602521
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "00f170e2-f378-4dc1-850d-470bbf038648",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable",
            "Mock": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - LLM Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - LLM Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration",
          "Blocks": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 6,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 9,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 25731901,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 573,
            "Microseconds": 190,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.9782292824074074E-05,
            "TotalHours": 0.0007147750277777778,
            "TotalMilliseconds": 2573.1901,
            "TotalMicroseconds": 2573190.1,
            "TotalNanoseconds": 2573190100.0,
            "TotalMinutes": 0.04288650166666667,
            "TotalSeconds": 2.5731901
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "LLM",
            "Integration"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "98403d94-7f80-4824-bc48-8d5eea700a8b",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:36.8567353-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 1104343,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 110,
            "Microseconds": 434,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.2781747685185185E-06,
            "TotalHours": 3.067619444444444E-05,
            "TotalMilliseconds": 110.4343,
            "TotalMicroseconds": 110434.3,
            "TotalNanoseconds": 110434300.0,
            "TotalMinutes": 0.0018405716666666666,
            "TotalSeconds": 0.1104343
          },
          "UserDuration": {
            "Ticks": 24627558,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 462,
            "Microseconds": 755,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.8504118055555556E-05,
            "TotalHours": 0.0006840988333333333,
            "TotalMilliseconds": 2462.7558,
            "TotalMicroseconds": 2462755.8,
            "TotalNanoseconds": 2462755800.0,
            "TotalMinutes": 0.04104593,
            "TotalSeconds": 2.4627558
          },
          "OwnDuration": {
            "Ticks": 24341397,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 434,
            "Microseconds": 139,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.8172913194444444E-05,
            "TotalHours": 0.0006761499166666666,
            "TotalMilliseconds": 2434.1397,
            "TotalMicroseconds": 2434139.7,
            "TotalNanoseconds": 2434139700.0,
            "TotalMinutes": 0.040568995,
            "TotalSeconds": 2.4341397
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "7f9521e2-2f25-4240-adf6-b2bf7560a756",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 425,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 29752,
            "Length": 206,
            "StartLine": 550,
            "StartColumn": 23,
            "EndLine": 554,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "0de2609b-7ecf-4fcc-b3d8-ce27d3f00545",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }",
            "Parent": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }"
          }
        },
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should cache and retrieve responses",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should cache and retrieve responses",
            "Data": null,
            "ExpandedName": "Should cache and retrieve responses",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should cache and retrieve responses",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 556,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle TTL expiration",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should handle TTL expiration",
            "Data": null,
            "ExpandedName": "Should handle TTL expiration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should handle TTL expiration",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 568,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should provide cache statistics",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should provide cache statistics",
            "Data": null,
            "ExpandedName": "Should provide cache statistics",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should provide cache statistics",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 581,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": false,
        "Last": true,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:46:39.2749456-04:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 534179,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 53,
          "Microseconds": 417,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.182627314814815E-07,
          "TotalHours": 1.4838305555555556E-05,
          "TotalMilliseconds": 53.4179,
          "TotalMicroseconds": 53417.9,
          "TotalNanoseconds": 53417900.0,
          "TotalMinutes": 0.0008902983333333334,
          "TotalSeconds": 0.0534179
        },
        "UserDuration": {
          "Ticks": 23578,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 2,
          "Microseconds": 357,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.7289351851851853E-08,
          "TotalHours": 6.549444444444445E-07,
          "TotalMilliseconds": 2.3578,
          "TotalMicroseconds": 2357.8,
          "TotalNanoseconds": 2357800.0,
          "TotalMinutes": 3.9296666666666666E-05,
          "TotalSeconds": 0.0023578
        },
        "OwnDuration": {
          "Ticks": 557757,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 55,
          "Microseconds": 775,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.455520833333333E-07,
          "TotalHours": 1.549325E-05,
          "TotalMilliseconds": 55.7757,
          "TotalMicroseconds": 55775.7,
          "TotalNanoseconds": 55775700.0,
          "TotalMinutes": 0.000929595,
          "TotalSeconds": 0.0557757
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 29727,
            "Length": 2033,
            "StartLine": 549,
            "StartColumn": 34,
            "EndLine": 590,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "0ea067c2-0220-4bb3-bd45-894af95956a3",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }"
          }
        },
        "StartLine": 549,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 3,
        "OwnPassedCount": 0,
        "OwnFailedCount": 3,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": true,
      "Last": false,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 556,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should handle TTL expiration",
      "Path": [
        "Enhanced Documentation System - LLM Integration",
        "Response Cache",
        "Should handle TTL expiration"
      ],
      "Data": null,
      "ExpandedName": "Should handle TTL expiration",
      "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should handle TTL expiration",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }",
          "Type": 19,
          "Start": 30698,
          "Length": 522,
          "StartLine": 568,
          "StartColumn": 109,
          "EndLine": 579,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "490694ca-8768-47f1-bd13-14f753681024",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }",
            "Traps": null,
            "Extent": "Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 568,
            "StartColumnNumber": 109,
            "EndLineNumber": 579,
            "EndColumnNumber": 14,
            "Text": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }",
            "StartOffset": 30698,
            "EndOffset": 31220
          },
          "Parent": {
            "ScriptBlock": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }",
            "Parent": "It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Response Cache",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Response Cache"
        ],
        "Data": null,
        "ExpandedName": "Response Cache",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should cache and retrieve responses",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should cache and retrieve responses",
            "Data": null,
            "ExpandedName": "Should cache and retrieve responses",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should cache and retrieve responses",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 556,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle TTL expiration",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should handle TTL expiration",
            "Data": null,
            "ExpandedName": "Should handle TTL expiration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should handle TTL expiration",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 568,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should provide cache statistics",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should provide cache statistics",
            "Data": null,
            "ExpandedName": "Should provide cache statistics",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should provide cache statistics",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 581,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 3,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 3,
        "ErrorRecord": [
          {
            "Exception": "System.Management.Automation.RuntimeException: Cannot index into a null array.\r\n   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
            "TargetObject": null,
            "CategoryInfo": "InvalidOperation: (:) [], RuntimeException",
            "FullyQualifiedErrorId": "NullArray",
            "ErrorDetails": null,
            "InvocationInfo": "System.Management.Automation.InvocationInfo",
            "ScriptStackTrace": "at <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 551\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1975\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60",
            "PipelineIterationInfo": ""
          }
        ],
        "Duration": {
          "Ticks": 557757,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 55,
          "Microseconds": 775,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.455520833333333E-07,
          "TotalHours": 1.549325E-05,
          "TotalMilliseconds": 55.7757,
          "TotalMicroseconds": 55775.7,
          "TotalNanoseconds": 55775700.0,
          "TotalMinutes": 0.000929595,
          "TotalSeconds": 0.0557757
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 50196,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T20:43:17.6686205-04:00",
            "CreationTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LastAccessTime": "2025-08-28T20:44:27.0013384-04:00",
            "LastAccessTimeUtc": "2025-08-29T00:44:27.0013384Z",
            "LastWriteTime": "2025-08-28T20:43:17.6686205-04:00",
            "LastWriteTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 23,
          "PassedCount": 2,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 46809013,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 680,
            "Microseconds": 901,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.417709837962963E-05,
            "TotalHours": 0.001300250361111111,
            "TotalMilliseconds": 4680.9013,
            "TotalMicroseconds": 4680901.3,
            "TotalNanoseconds": 4680901300.0,
            "TotalMinutes": 0.07801502166666667,
            "TotalSeconds": 4.6809013
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_987e9a83-43a0-4852-b50b-7810e03bd040",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "27908d1f-3444-4a7c-aad4-e951b25f7123",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1199199,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 119,
            "Microseconds": 919,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3879618055555555E-06,
            "TotalHours": 3.331108333333333E-05,
            "TotalMilliseconds": 119.9199,
            "TotalMicroseconds": 119919.9,
            "TotalNanoseconds": 119919900.0,
            "TotalMinutes": 0.001998665,
            "TotalSeconds": 0.1199199
          },
          "FrameworkDuration": {
            "Ticks": 3338424,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 333,
            "Microseconds": 842,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.863916666666666E-06,
            "TotalHours": 9.2734E-05,
            "TotalMilliseconds": 333.8424,
            "TotalMicroseconds": 333842.4,
            "TotalNanoseconds": 333842400.0,
            "TotalMinutes": 0.00556404,
            "TotalSeconds": 0.3338424
          },
          "UserDuration": {
            "Ticks": 42271390,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 227,
            "Microseconds": 139,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.8925219907407405E-05,
            "TotalHours": 0.0011742052777777778,
            "TotalMilliseconds": 4227.139,
            "TotalMicroseconds": 4227139.0,
            "TotalNanoseconds": 4227139000.0,
            "TotalMinutes": 0.07045231666666667,
            "TotalSeconds": 4.227139
          },
          "OwnDuration": {
            "Ticks": -50602521,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -60,
            "Microseconds": -252,
            "Nanoseconds": -100,
            "Minutes": 0,
            "Seconds": -5,
            "TotalDays": -5.856773263888889E-05,
            "TotalHours": -0.0014056255833333334,
            "TotalMilliseconds": -5060.2521,
            "TotalMicroseconds": -5060252.1,
            "TotalNanoseconds": -5060252100.0,
            "TotalMinutes": -0.084337535,
            "TotalSeconds": -5.0602521
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "00f170e2-f378-4dc1-850d-470bbf038648",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable",
            "Mock": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - LLM Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - LLM Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration",
          "Blocks": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 6,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 9,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 25731901,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 573,
            "Microseconds": 190,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.9782292824074074E-05,
            "TotalHours": 0.0007147750277777778,
            "TotalMilliseconds": 2573.1901,
            "TotalMicroseconds": 2573190.1,
            "TotalNanoseconds": 2573190100.0,
            "TotalMinutes": 0.04288650166666667,
            "TotalSeconds": 2.5731901
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "LLM",
            "Integration"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "98403d94-7f80-4824-bc48-8d5eea700a8b",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:36.8567353-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 1104343,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 110,
            "Microseconds": 434,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.2781747685185185E-06,
            "TotalHours": 3.067619444444444E-05,
            "TotalMilliseconds": 110.4343,
            "TotalMicroseconds": 110434.3,
            "TotalNanoseconds": 110434300.0,
            "TotalMinutes": 0.0018405716666666666,
            "TotalSeconds": 0.1104343
          },
          "UserDuration": {
            "Ticks": 24627558,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 462,
            "Microseconds": 755,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.8504118055555556E-05,
            "TotalHours": 0.0006840988333333333,
            "TotalMilliseconds": 2462.7558,
            "TotalMicroseconds": 2462755.8,
            "TotalNanoseconds": 2462755800.0,
            "TotalMinutes": 0.04104593,
            "TotalSeconds": 2.4627558
          },
          "OwnDuration": {
            "Ticks": 24341397,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 434,
            "Microseconds": 139,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.8172913194444444E-05,
            "TotalHours": 0.0006761499166666666,
            "TotalMilliseconds": 2434.1397,
            "TotalMicroseconds": 2434139.7,
            "TotalNanoseconds": 2434139700.0,
            "TotalMinutes": 0.040568995,
            "TotalSeconds": 2.4341397
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "7f9521e2-2f25-4240-adf6-b2bf7560a756",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 425,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 29752,
            "Length": 206,
            "StartLine": 550,
            "StartColumn": 23,
            "EndLine": 554,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "0de2609b-7ecf-4fcc-b3d8-ce27d3f00545",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }",
            "Parent": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }"
          }
        },
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should cache and retrieve responses",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should cache and retrieve responses",
            "Data": null,
            "ExpandedName": "Should cache and retrieve responses",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should cache and retrieve responses",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 556,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle TTL expiration",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should handle TTL expiration",
            "Data": null,
            "ExpandedName": "Should handle TTL expiration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should handle TTL expiration",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 568,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should provide cache statistics",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should provide cache statistics",
            "Data": null,
            "ExpandedName": "Should provide cache statistics",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should provide cache statistics",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 581,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": false,
        "Last": true,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:46:39.2749456-04:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 534179,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 53,
          "Microseconds": 417,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.182627314814815E-07,
          "TotalHours": 1.4838305555555556E-05,
          "TotalMilliseconds": 53.4179,
          "TotalMicroseconds": 53417.9,
          "TotalNanoseconds": 53417900.0,
          "TotalMinutes": 0.0008902983333333334,
          "TotalSeconds": 0.0534179
        },
        "UserDuration": {
          "Ticks": 23578,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 2,
          "Microseconds": 357,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.7289351851851853E-08,
          "TotalHours": 6.549444444444445E-07,
          "TotalMilliseconds": 2.3578,
          "TotalMicroseconds": 2357.8,
          "TotalNanoseconds": 2357800.0,
          "TotalMinutes": 3.9296666666666666E-05,
          "TotalSeconds": 0.0023578
        },
        "OwnDuration": {
          "Ticks": 557757,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 55,
          "Microseconds": 775,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.455520833333333E-07,
          "TotalHours": 1.549325E-05,
          "TotalMilliseconds": 55.7757,
          "TotalMicroseconds": 55775.7,
          "TotalNanoseconds": 55775700.0,
          "TotalMinutes": 0.000929595,
          "TotalSeconds": 0.0557757
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 29727,
            "Length": 2033,
            "StartLine": 549,
            "StartColumn": 34,
            "EndLine": 590,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "0ea067c2-0220-4bb3-bd45-894af95956a3",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }"
          }
        },
        "StartLine": 549,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 3,
        "OwnPassedCount": 0,
        "OwnFailedCount": 3,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": false,
      "Last": false,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 568,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should provide cache statistics",
      "Path": [
        "Enhanced Documentation System - LLM Integration",
        "Response Cache",
        "Should provide cache statistics"
      ],
      "Data": null,
      "ExpandedName": "Should provide cache statistics",
      "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should provide cache statistics",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }",
          "Type": 19,
          "Start": 31347,
          "Length": 402,
          "StartLine": 581,
          "StartColumn": 112,
          "EndLine": 589,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "16c3578d-3c06-4c6e-9cbe-deb457721528",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }",
            "Traps": null,
            "Extent": "Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 581,
            "StartColumnNumber": 112,
            "EndLineNumber": 589,
            "EndColumnNumber": 14,
            "Text": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }",
            "StartOffset": 31347,
            "EndOffset": 31749
          },
          "Parent": {
            "ScriptBlock": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }",
            "Parent": "It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Response Cache",
        "Path": [
          "Enhanced Documentation System - LLM Integration",
          "Response Cache"
        ],
        "Data": null,
        "ExpandedName": "Response Cache",
        "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should cache and retrieve responses",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should cache and retrieve responses",
            "Data": null,
            "ExpandedName": "Should cache and retrieve responses",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should cache and retrieve responses",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 556,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle TTL expiration",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should handle TTL expiration",
            "Data": null,
            "ExpandedName": "Should handle TTL expiration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should handle TTL expiration",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 568,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should provide cache statistics",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should provide cache statistics",
            "Data": null,
            "ExpandedName": "Should provide cache statistics",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should provide cache statistics",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 581,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 3,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 3,
        "ErrorRecord": [
          {
            "Exception": "System.Management.Automation.RuntimeException: Cannot index into a null array.\r\n   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
            "TargetObject": null,
            "CategoryInfo": "InvalidOperation: (:) [], RuntimeException",
            "FullyQualifiedErrorId": "NullArray",
            "ErrorDetails": null,
            "InvocationInfo": "System.Management.Automation.InvocationInfo",
            "ScriptStackTrace": "at <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 551\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1975\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60",
            "PipelineIterationInfo": ""
          }
        ],
        "Duration": {
          "Ticks": 557757,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 55,
          "Microseconds": 775,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.455520833333333E-07,
          "TotalHours": 1.549325E-05,
          "TotalMilliseconds": 55.7757,
          "TotalMicroseconds": 55775.7,
          "TotalNanoseconds": 55775700.0,
          "TotalMinutes": 0.000929595,
          "TotalSeconds": 0.0557757
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 50196,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T20:43:17.6686205-04:00",
            "CreationTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LastAccessTime": "2025-08-28T20:44:27.0013384-04:00",
            "LastAccessTimeUtc": "2025-08-29T00:44:27.0013384Z",
            "LastWriteTime": "2025-08-28T20:43:17.6686205-04:00",
            "LastWriteTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 23,
          "PassedCount": 2,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 46809013,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 680,
            "Microseconds": 901,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.417709837962963E-05,
            "TotalHours": 0.001300250361111111,
            "TotalMilliseconds": 4680.9013,
            "TotalMicroseconds": 4680901.3,
            "TotalNanoseconds": 4680901300.0,
            "TotalMinutes": 0.07801502166666667,
            "TotalSeconds": 4.6809013
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_987e9a83-43a0-4852-b50b-7810e03bd040",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "27908d1f-3444-4a7c-aad4-e951b25f7123",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1199199,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 119,
            "Microseconds": 919,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3879618055555555E-06,
            "TotalHours": 3.331108333333333E-05,
            "TotalMilliseconds": 119.9199,
            "TotalMicroseconds": 119919.9,
            "TotalNanoseconds": 119919900.0,
            "TotalMinutes": 0.001998665,
            "TotalSeconds": 0.1199199
          },
          "FrameworkDuration": {
            "Ticks": 3338424,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 333,
            "Microseconds": 842,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.863916666666666E-06,
            "TotalHours": 9.2734E-05,
            "TotalMilliseconds": 333.8424,
            "TotalMicroseconds": 333842.4,
            "TotalNanoseconds": 333842400.0,
            "TotalMinutes": 0.00556404,
            "TotalSeconds": 0.3338424
          },
          "UserDuration": {
            "Ticks": 42271390,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 227,
            "Microseconds": 139,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.8925219907407405E-05,
            "TotalHours": 0.0011742052777777778,
            "TotalMilliseconds": 4227.139,
            "TotalMicroseconds": 4227139.0,
            "TotalNanoseconds": 4227139000.0,
            "TotalMinutes": 0.07045231666666667,
            "TotalSeconds": 4.227139
          },
          "OwnDuration": {
            "Ticks": -50602521,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -60,
            "Microseconds": -252,
            "Nanoseconds": -100,
            "Minutes": 0,
            "Seconds": -5,
            "TotalDays": -5.856773263888889E-05,
            "TotalHours": -0.0014056255833333334,
            "TotalMilliseconds": -5060.2521,
            "TotalMicroseconds": -5060252.1,
            "TotalNanoseconds": -5060252100.0,
            "TotalMinutes": -0.084337535,
            "TotalSeconds": -5.0602521
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "00f170e2-f378-4dc1-850d-470bbf038648",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable",
            "Mock": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - LLM Integration",
          "Path": [
            "Enhanced Documentation System - LLM Integration"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - LLM Integration",
          "ExpandedPath": "Enhanced Documentation System - LLM Integration",
          "Blocks": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 6,
          "PassedCount": 0,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 9,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 25731901,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 573,
            "Microseconds": 190,
            "Nanoseconds": 100,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.9782292824074074E-05,
            "TotalHours": 0.0007147750277777778,
            "TotalMilliseconds": 2573.1901,
            "TotalMicroseconds": 2573190.1,
            "TotalNanoseconds": 2573190100.0,
            "TotalMinutes": 0.04288650166666667,
            "TotalSeconds": 2.5731901
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "LLM",
            "Integration"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "98403d94-7f80-4824-bc48-8d5eea700a8b",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[!] Ollama API Integration",
            "[-] Prompt Templates",
            "[-] Response Cache"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:36.8567353-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 1104343,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 110,
            "Microseconds": 434,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.2781747685185185E-06,
            "TotalHours": 3.067619444444444E-05,
            "TotalMilliseconds": 110.4343,
            "TotalMicroseconds": 110434.3,
            "TotalNanoseconds": 110434300.0,
            "TotalMinutes": 0.0018405716666666666,
            "TotalSeconds": 0.1104343
          },
          "UserDuration": {
            "Ticks": 24627558,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 462,
            "Microseconds": 755,
            "Nanoseconds": 800,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.8504118055555556E-05,
            "TotalHours": 0.0006840988333333333,
            "TotalMilliseconds": 2462.7558,
            "TotalMicroseconds": 2462755.8,
            "TotalNanoseconds": 2462755800.0,
            "TotalMinutes": 0.04104593,
            "TotalSeconds": 2.4627558
          },
          "OwnDuration": {
            "Ticks": 24341397,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 434,
            "Microseconds": 139,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.8172913194444444E-05,
            "TotalHours": 0.0006761499166666666,
            "TotalMilliseconds": 2434.1397,
            "TotalMicroseconds": 2434139.7,
            "TotalNanoseconds": 2434139700.0,
            "TotalMinutes": 0.040568995,
            "TotalSeconds": 2.4341397
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "7f9521e2-2f25-4240-adf6-b2bf7560a756",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-LLM] LLM Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-LLM] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing LLM test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Check Ollama availability (variable already initialized at script level)\r\n            try {\r\n                $response = Invoke-RestMethod -Uri \"http://localhost:11434/api/version\" -Method Get -TimeoutSec 5\r\n                if ($response) {\r\n                    $script:OllamaAvailable = $true\r\n                    Write-Host \"    Ollama service detected: Available\" -ForegroundColor Green\r\n                }\r\n            }\r\n            catch {\r\n                Write-Warning \"Ollama service not available: $_\"\r\n            }\r\n            \r\n            # LLM module paths\r\n            $llmModulePaths = @{\r\n                'LLM-PromptTemplates' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-PromptTemplates.psm1\"\r\n                'LLM-ResponseCache' = \"$PSScriptRoot\\Modules\\Unity-Claude-LLM\\Core\\LLM-ResponseCache.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-LLM] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($llmModulePaths -and $llmModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-LLM] Testing availability for $($llmModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $llmModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-LLM] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-LLM] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $llmModulePaths[$moduleName]\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-LLM] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-LLM] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-LLM] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-LLM] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:LLMModulesAvailable -and $script:LLMModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:LLMModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-LLM] ERROR: llmModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Ollama API Integration\" {\r\n            It \"Should connect to Ollama service\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Connection\" -ScriptBlock {\r\n                    $health = Test-OllamaConnection\r\n                    $health | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should list available models\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-Models\" -ScriptBlock {\r\n                    $models = Get-OllamaModels\r\n                    $models | Should -Not -BeNullOrEmpty\r\n                    $models | Should -BeOfType [array]\r\n                }\r\n            }\r\n            \r\n            It \"Should generate responses for code analysis\" -Skip:(-not $script:OllamaAvailable) {\r\n                Measure-TestPerformance -TestName \"Ollama-CodeAnalysis\" -ScriptBlock {\r\n                    $testCode = \"function Get-Example { return 'Hello World' }\"\r\n                    $prompt = \"Analyze this PowerShell function and provide documentation\"\r\n                    \r\n                    $response = Invoke-OllamaQuery -Prompt $prompt -Context $testCode -MaxTokens 100\r\n                    $response | Should -Not -BeNullOrEmpty\r\n                    $response.Length | Should -BeGreaterThan 10\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Prompt Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-PromptTemplates module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create function documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Function\" -ScriptBlock {\r\n                    $template = Get-FunctionDocumentationPrompt -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Test-Function\"\r\n                    $template | Should -Match \"Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should create module documentation prompts\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Module\" -ScriptBlock {\r\n                    $template = Get-ModuleDocumentationPrompt -ModuleName \"TestModule\" -Functions @(\"Func1\", \"Func2\")\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"TestModule\"\r\n                    $template | Should -Match \"Func1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should support variable substitution\" -Skip:(-not $script:LLMModulesAvailable['LLM-PromptTemplates']) {\r\n                Measure-TestPerformance -TestName \"Prompt-Substitution\" -ScriptBlock {\r\n                    $variables = @{\r\n                        'FunctionName' = 'Get-TestData'\r\n                        'Description' = 'Retrieves test data'\r\n                    }\r\n                    \r\n                    $result = Expand-PromptTemplate -Template \"Function: {FunctionName} - {Description}\" -Variables $variables\r\n                    $result | Should -Be \"Function: Get-TestData - Retrieves test data\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Response Cache\" {\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 425,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 29752,
            "Length": 206,
            "StartLine": 550,
            "StartColumn": 23,
            "EndLine": 554,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "0de2609b-7ecf-4fcc-b3d8-ce27d3f00545",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }",
            "Parent": "{\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }"
          }
        },
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should cache and retrieve responses",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should cache and retrieve responses",
            "Data": null,
            "ExpandedName": "Should cache and retrieve responses",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should cache and retrieve responses",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 556,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle TTL expiration",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should handle TTL expiration",
            "Data": null,
            "ExpandedName": "Should handle TTL expiration",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should handle TTL expiration",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 568,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should provide cache statistics",
            "Path": "Enhanced Documentation System - LLM Integration Response Cache Should provide cache statistics",
            "Data": null,
            "ExpandedName": "Should provide cache statistics",
            "ExpandedPath": "Enhanced Documentation System - LLM Integration.Response Cache.Should provide cache statistics",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Response Cache",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 581,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": false,
        "Last": true,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:46:39.2749456-04:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 534179,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 53,
          "Microseconds": 417,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.182627314814815E-07,
          "TotalHours": 1.4838305555555556E-05,
          "TotalMilliseconds": 53.4179,
          "TotalMicroseconds": 53417.9,
          "TotalNanoseconds": 53417900.0,
          "TotalMinutes": 0.0008902983333333334,
          "TotalSeconds": 0.0534179
        },
        "UserDuration": {
          "Ticks": 23578,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 2,
          "Microseconds": 357,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.7289351851851853E-08,
          "TotalHours": 6.549444444444445E-07,
          "TotalMilliseconds": 2.3578,
          "TotalMicroseconds": 2357.8,
          "TotalNanoseconds": 2357800.0,
          "TotalMinutes": 3.9296666666666666E-05,
          "TotalSeconds": 0.0023578
        },
        "OwnDuration": {
          "Ticks": 557757,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 55,
          "Microseconds": 775,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.455520833333333E-07,
          "TotalHours": 1.549325E-05,
          "TotalMilliseconds": 55.7757,
          "TotalMicroseconds": 55775.7,
          "TotalNanoseconds": 55775700.0,
          "TotalMinutes": 0.000929595,
          "TotalSeconds": 0.0557757
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 29727,
            "Length": 2033,
            "StartLine": 549,
            "StartColumn": 34,
            "EndLine": 590,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "0ea067c2-0220-4bb3-bd45-894af95956a3",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            BeforeAll {\r\n                if (-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                    Set-ItResult -Skipped -Because \"LLM-ResponseCache module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should cache and retrieve responses\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Store-Retrieve\" -ScriptBlock {\r\n                    $key = \"test-prompt-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"This is a test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 300\r\n                    $cached = Get-LLMCache -Key $key\r\n                    \r\n                    $cached | Should -Be $response\r\n                }\r\n            }\r\n            \r\n            It \"Should handle TTL expiration\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-TTL\" -ScriptBlock {\r\n                    $key = \"ttl-test-$(Get-Date -Format 'yyyyMMddHHmmss')\"\r\n                    $response = \"TTL test response\"\r\n                    \r\n                    Set-LLMCache -Key $key -Response $response -TTL 1  # 1 second\r\n                    Start-Sleep -Seconds 2\r\n                    $expired = Get-LLMCache -Key $key\r\n                    \r\n                    $expired | Should -BeNullOrEmpty\r\n                }\r\n            }\r\n            \r\n            It \"Should provide cache statistics\" -Skip:(-not $script:LLMModulesAvailable['LLM-ResponseCache']) {\r\n                Measure-TestPerformance -TestName \"Cache-Stats\" -ScriptBlock {\r\n                    $stats = Get-LLMCacheStats\r\n                    $stats | Should -Not -BeNullOrEmpty\r\n                    $stats.Hits | Should -BeOfType [int]\r\n                    $stats.Misses | Should -BeOfType [int]\r\n                    $stats.HitRate | Should -BeOfType [double]\r\n                }\r\n            }\r\n        }"
          }
        },
        "StartLine": 549,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 3,
        "OwnPassedCount": 0,
        "OwnFailedCount": 3,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": false,
      "Last": true,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 581,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should generate PowerShell documentation templates",
      "Path": [
        "Enhanced Documentation System - Templates & Automation",
        "Language-Specific Templates",
        "Should generate PowerShell documentation templates"
      ],
      "Data": null,
      "ExpandedName": "Should generate PowerShell documentation templates",
      "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate PowerShell documentation templates",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }",
          "Type": 19,
          "Start": 35429,
          "Length": 523,
          "StartLine": 650,
          "StartColumn": 140,
          "EndLine": 658,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "e2eb0bda-d9a7-4add-bb8a-4c32af7eccd3",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }",
            "Traps": null,
            "Extent": "Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 650,
            "StartColumnNumber": 140,
            "EndLineNumber": 658,
            "EndColumnNumber": 14,
            "Text": "{\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }",
            "StartOffset": 35429,
            "EndOffset": 35952
          },
          "Parent": {
            "ScriptBlock": "{\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }",
            "Parent": "It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Language-Specific Templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates"
        ],
        "Data": null,
        "ExpandedName": "Language-Specific Templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should generate PowerShell documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate PowerShell documentation templates",
            "Data": null,
            "ExpandedName": "Should generate PowerShell documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate PowerShell documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 650,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate Python documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate Python documentation templates",
            "Data": null,
            "ExpandedName": "Should generate Python documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate Python documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 660,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate C# documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate C# documentation templates",
            "Data": null,
            "ExpandedName": "Should generate C# documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate C# documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 670,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate JavaScript documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate JavaScript documentation templates",
            "Data": null,
            "ExpandedName": "Should generate JavaScript documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate JavaScript documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 680,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should detect language from file extensions",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should detect language from file extensions",
            "Data": null,
            "ExpandedName": "Should detect language from file extensions",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should detect language from file extensions",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 691,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 5,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 5,
        "ErrorRecord": [
          {
            "Exception": "System.Management.Automation.RuntimeException: Cannot index into a null array.\r\n   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
            "TargetObject": null,
            "CategoryInfo": "InvalidOperation: (:) [], RuntimeException",
            "FullyQualifiedErrorId": "NullArray",
            "ErrorDetails": null,
            "InvocationInfo": "System.Management.Automation.InvocationInfo",
            "ScriptStackTrace": "at <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 645\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1975\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60",
            "PipelineIterationInfo": ""
          }
        ],
        "Duration": {
          "Ticks": 73185,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 7,
          "Microseconds": 318,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 8.470486111111111E-08,
          "TotalHours": 2.0329166666666668E-06,
          "TotalMilliseconds": 7.3185,
          "TotalMicroseconds": 7318.5,
          "TotalNanoseconds": 7318500.0,
          "TotalMinutes": 0.000121975,
          "TotalSeconds": 0.0073185
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 50196,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T20:43:17.6686205-04:00",
            "CreationTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LastAccessTime": "2025-08-28T20:44:27.0013384-04:00",
            "LastAccessTimeUtc": "2025-08-29T00:44:27.0013384Z",
            "LastWriteTime": "2025-08-28T20:43:17.6686205-04:00",
            "LastWriteTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 23,
          "PassedCount": 2,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 46809013,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 680,
            "Microseconds": 901,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.417709837962963E-05,
            "TotalHours": 0.001300250361111111,
            "TotalMilliseconds": 4680.9013,
            "TotalMicroseconds": 4680901.3,
            "TotalNanoseconds": 4680901300.0,
            "TotalMinutes": 0.07801502166666667,
            "TotalSeconds": 4.6809013
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_987e9a83-43a0-4852-b50b-7810e03bd040",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "27908d1f-3444-4a7c-aad4-e951b25f7123",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1199199,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 119,
            "Microseconds": 919,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3879618055555555E-06,
            "TotalHours": 3.331108333333333E-05,
            "TotalMilliseconds": 119.9199,
            "TotalMicroseconds": 119919.9,
            "TotalNanoseconds": 119919900.0,
            "TotalMinutes": 0.001998665,
            "TotalSeconds": 0.1199199
          },
          "FrameworkDuration": {
            "Ticks": 3338424,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 333,
            "Microseconds": 842,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.863916666666666E-06,
            "TotalHours": 9.2734E-05,
            "TotalMilliseconds": 333.8424,
            "TotalMicroseconds": 333842.4,
            "TotalNanoseconds": 333842400.0,
            "TotalMinutes": 0.00556404,
            "TotalSeconds": 0.3338424
          },
          "UserDuration": {
            "Ticks": 42271390,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 227,
            "Microseconds": 139,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.8925219907407405E-05,
            "TotalHours": 0.0011742052777777778,
            "TotalMilliseconds": 4227.139,
            "TotalMicroseconds": 4227139.0,
            "TotalNanoseconds": 4227139000.0,
            "TotalMinutes": 0.07045231666666667,
            "TotalSeconds": 4.227139
          },
          "OwnDuration": {
            "Ticks": -50602521,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -60,
            "Microseconds": -252,
            "Nanoseconds": -100,
            "Minutes": 0,
            "Seconds": -5,
            "TotalDays": -5.856773263888889E-05,
            "TotalHours": -0.0014056255833333334,
            "TotalMilliseconds": -5060.2521,
            "TotalMicroseconds": -5060252.1,
            "TotalNanoseconds": -5060252100.0,
            "TotalMinutes": -0.084337535,
            "TotalSeconds": -5.0602521
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "00f170e2-f378-4dc1-850d-470bbf038648",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable",
            "Mock": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - Templates & Automation",
          "Path": [
            "Enhanced Documentation System - Templates & Automation"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - Templates & Automation",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
          "Blocks": [
            "[-] Language-Specific Templates",
            "[-] Automation Triggers"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 7,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 7,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 26240217,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 624,
            "Microseconds": 21,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 3.0370621527777777E-05,
            "TotalHours": 0.0007288949166666666,
            "TotalMilliseconds": 2624.0217,
            "TotalMicroseconds": 2624021.7,
            "TotalNanoseconds": 2624021700.0,
            "TotalMinutes": 0.043733695,
            "TotalSeconds": 2.6240217
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "Templates",
            "Automation"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "9aebbe4f-77f8-43fc-8462-7a510848301d",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($templateModulePaths -and $templateModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-Templates] Testing availability for $($templateModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $templateModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-Templates] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-Templates] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-Templates] ERROR: templateModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Language-Specific Templates",
            "[-] Automation Triggers"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.2883087-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 1295474,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 129,
            "Microseconds": 547,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4993912037037037E-06,
            "TotalHours": 3.598538888888889E-05,
            "TotalMilliseconds": 129.5474,
            "TotalMicroseconds": 129547.4,
            "TotalNanoseconds": 129547400.0,
            "TotalMinutes": 0.0021591233333333334,
            "TotalSeconds": 0.1295474
          },
          "UserDuration": {
            "Ticks": 24944743,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 494,
            "Microseconds": 474,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.8871230324074075E-05,
            "TotalHours": 0.0006929095277777778,
            "TotalMilliseconds": 2494.4743,
            "TotalMicroseconds": 2494474.3,
            "TotalNanoseconds": 2494474300.0,
            "TotalMinutes": 0.041574571666666664,
            "TotalSeconds": 2.4944743
          },
          "OwnDuration": {
            "Ticks": 26014926,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 601,
            "Microseconds": 492,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 3.0109868055555556E-05,
            "TotalHours": 0.0007226368333333334,
            "TotalMilliseconds": 2601.4926,
            "TotalMicroseconds": 2601492.6,
            "TotalNanoseconds": 2601492600.0,
            "TotalMinutes": 0.04335821,
            "TotalSeconds": 2.6014926
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "1a2eb108-5bb3-4c06-8cce-621ad9c222ab",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($templateModulePaths -and $templateModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-Templates] Testing availability for $($templateModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $templateModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-Templates] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-Templates] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-Templates] ERROR: templateModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 597,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 35055,
            "Length": 219,
            "StartLine": 644,
            "StartColumn": 23,
            "EndLine": 648,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "e2b490e5-fc4a-4142-9693-fc3c85e7c933",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }",
            "Parent": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }"
          }
        },
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should generate PowerShell documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate PowerShell documentation templates",
            "Data": null,
            "ExpandedName": "Should generate PowerShell documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate PowerShell documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 650,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate Python documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate Python documentation templates",
            "Data": null,
            "ExpandedName": "Should generate Python documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate Python documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 660,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate C# documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate C# documentation templates",
            "Data": null,
            "ExpandedName": "Should generate C# documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate C# documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 670,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate JavaScript documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate JavaScript documentation templates",
            "Data": null,
            "ExpandedName": "Should generate JavaScript documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate JavaScript documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 680,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should detect language from file extensions",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should detect language from file extensions",
            "Data": null,
            "ExpandedName": "Should detect language from file extensions",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should detect language from file extensions",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 691,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": true,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:46:39.3194679-04:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 66028,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 6,
          "Microseconds": 602,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 7.64212962962963E-08,
          "TotalHours": 1.8341111111111111E-06,
          "TotalMilliseconds": 6.6028,
          "TotalMicroseconds": 6602.8,
          "TotalNanoseconds": 6602800.0,
          "TotalMinutes": 0.00011004666666666666,
          "TotalSeconds": 0.0066028
        },
        "UserDuration": {
          "Ticks": 7157,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 715,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 8.283564814814815E-09,
          "TotalHours": 1.9880555555555556E-07,
          "TotalMilliseconds": 0.7157,
          "TotalMicroseconds": 715.7,
          "TotalNanoseconds": 715700.0,
          "TotalMinutes": 1.1928333333333334E-05,
          "TotalSeconds": 0.0007157
        },
        "OwnDuration": {
          "Ticks": 73185,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 7,
          "Microseconds": 318,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 8.470486111111111E-08,
          "TotalHours": 2.0329166666666668E-06,
          "TotalMilliseconds": 7.3185,
          "TotalMicroseconds": 7318.5,
          "TotalNanoseconds": 7318500.0,
          "TotalMinutes": 0.000121975,
          "TotalSeconds": 0.0073185
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 35030,
            "Length": 3714,
            "StartLine": 643,
            "StartColumn": 47,
            "EndLine": 700,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "e53643a8-6890-49a5-b3bb-487df2abc1b0",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }"
          }
        },
        "StartLine": 643,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 5,
        "OwnPassedCount": 0,
        "OwnFailedCount": 5,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": true,
      "Last": false,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 650,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should generate Python documentation templates",
      "Path": [
        "Enhanced Documentation System - Templates & Automation",
        "Language-Specific Templates",
        "Should generate Python documentation templates"
      ],
      "Data": null,
      "ExpandedName": "Should generate Python documentation templates",
      "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate Python documentation templates",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }",
          "Type": 19,
          "Start": 36103,
          "Length": 508,
          "StartLine": 660,
          "StartColumn": 136,
          "EndLine": 668,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "d3e572e7-b517-4403-9b41-6f9dcf95cd8d",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }",
            "Traps": null,
            "Extent": "Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 660,
            "StartColumnNumber": 136,
            "EndLineNumber": 668,
            "EndColumnNumber": 14,
            "Text": "{\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }",
            "StartOffset": 36103,
            "EndOffset": 36611
          },
          "Parent": {
            "ScriptBlock": "{\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }",
            "Parent": "It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Language-Specific Templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates"
        ],
        "Data": null,
        "ExpandedName": "Language-Specific Templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should generate PowerShell documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate PowerShell documentation templates",
            "Data": null,
            "ExpandedName": "Should generate PowerShell documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate PowerShell documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 650,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate Python documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate Python documentation templates",
            "Data": null,
            "ExpandedName": "Should generate Python documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate Python documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 660,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate C# documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate C# documentation templates",
            "Data": null,
            "ExpandedName": "Should generate C# documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate C# documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 670,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate JavaScript documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate JavaScript documentation templates",
            "Data": null,
            "ExpandedName": "Should generate JavaScript documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate JavaScript documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 680,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should detect language from file extensions",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should detect language from file extensions",
            "Data": null,
            "ExpandedName": "Should detect language from file extensions",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should detect language from file extensions",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 691,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 5,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 5,
        "ErrorRecord": [
          {
            "Exception": "System.Management.Automation.RuntimeException: Cannot index into a null array.\r\n   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
            "TargetObject": null,
            "CategoryInfo": "InvalidOperation: (:) [], RuntimeException",
            "FullyQualifiedErrorId": "NullArray",
            "ErrorDetails": null,
            "InvocationInfo": "System.Management.Automation.InvocationInfo",
            "ScriptStackTrace": "at <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 645\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1975\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60",
            "PipelineIterationInfo": ""
          }
        ],
        "Duration": {
          "Ticks": 73185,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 7,
          "Microseconds": 318,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 8.470486111111111E-08,
          "TotalHours": 2.0329166666666668E-06,
          "TotalMilliseconds": 7.3185,
          "TotalMicroseconds": 7318.5,
          "TotalNanoseconds": 7318500.0,
          "TotalMinutes": 0.000121975,
          "TotalSeconds": 0.0073185
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 50196,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T20:43:17.6686205-04:00",
            "CreationTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LastAccessTime": "2025-08-28T20:44:27.0013384-04:00",
            "LastAccessTimeUtc": "2025-08-29T00:44:27.0013384Z",
            "LastWriteTime": "2025-08-28T20:43:17.6686205-04:00",
            "LastWriteTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 23,
          "PassedCount": 2,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 46809013,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 680,
            "Microseconds": 901,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.417709837962963E-05,
            "TotalHours": 0.001300250361111111,
            "TotalMilliseconds": 4680.9013,
            "TotalMicroseconds": 4680901.3,
            "TotalNanoseconds": 4680901300.0,
            "TotalMinutes": 0.07801502166666667,
            "TotalSeconds": 4.6809013
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_987e9a83-43a0-4852-b50b-7810e03bd040",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "27908d1f-3444-4a7c-aad4-e951b25f7123",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1199199,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 119,
            "Microseconds": 919,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3879618055555555E-06,
            "TotalHours": 3.331108333333333E-05,
            "TotalMilliseconds": 119.9199,
            "TotalMicroseconds": 119919.9,
            "TotalNanoseconds": 119919900.0,
            "TotalMinutes": 0.001998665,
            "TotalSeconds": 0.1199199
          },
          "FrameworkDuration": {
            "Ticks": 3338424,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 333,
            "Microseconds": 842,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.863916666666666E-06,
            "TotalHours": 9.2734E-05,
            "TotalMilliseconds": 333.8424,
            "TotalMicroseconds": 333842.4,
            "TotalNanoseconds": 333842400.0,
            "TotalMinutes": 0.00556404,
            "TotalSeconds": 0.3338424
          },
          "UserDuration": {
            "Ticks": 42271390,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 227,
            "Microseconds": 139,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.8925219907407405E-05,
            "TotalHours": 0.0011742052777777778,
            "TotalMilliseconds": 4227.139,
            "TotalMicroseconds": 4227139.0,
            "TotalNanoseconds": 4227139000.0,
            "TotalMinutes": 0.07045231666666667,
            "TotalSeconds": 4.227139
          },
          "OwnDuration": {
            "Ticks": -50602521,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -60,
            "Microseconds": -252,
            "Nanoseconds": -100,
            "Minutes": 0,
            "Seconds": -5,
            "TotalDays": -5.856773263888889E-05,
            "TotalHours": -0.0014056255833333334,
            "TotalMilliseconds": -5060.2521,
            "TotalMicroseconds": -5060252.1,
            "TotalNanoseconds": -5060252100.0,
            "TotalMinutes": -0.084337535,
            "TotalSeconds": -5.0602521
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "00f170e2-f378-4dc1-850d-470bbf038648",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable",
            "Mock": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - Templates & Automation",
          "Path": [
            "Enhanced Documentation System - Templates & Automation"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - Templates & Automation",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
          "Blocks": [
            "[-] Language-Specific Templates",
            "[-] Automation Triggers"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 7,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 7,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 26240217,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 624,
            "Microseconds": 21,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 3.0370621527777777E-05,
            "TotalHours": 0.0007288949166666666,
            "TotalMilliseconds": 2624.0217,
            "TotalMicroseconds": 2624021.7,
            "TotalNanoseconds": 2624021700.0,
            "TotalMinutes": 0.043733695,
            "TotalSeconds": 2.6240217
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "Templates",
            "Automation"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "9aebbe4f-77f8-43fc-8462-7a510848301d",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($templateModulePaths -and $templateModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-Templates] Testing availability for $($templateModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $templateModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-Templates] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-Templates] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-Templates] ERROR: templateModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Language-Specific Templates",
            "[-] Automation Triggers"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.2883087-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 1295474,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 129,
            "Microseconds": 547,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4993912037037037E-06,
            "TotalHours": 3.598538888888889E-05,
            "TotalMilliseconds": 129.5474,
            "TotalMicroseconds": 129547.4,
            "TotalNanoseconds": 129547400.0,
            "TotalMinutes": 0.0021591233333333334,
            "TotalSeconds": 0.1295474
          },
          "UserDuration": {
            "Ticks": 24944743,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 494,
            "Microseconds": 474,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.8871230324074075E-05,
            "TotalHours": 0.0006929095277777778,
            "TotalMilliseconds": 2494.4743,
            "TotalMicroseconds": 2494474.3,
            "TotalNanoseconds": 2494474300.0,
            "TotalMinutes": 0.041574571666666664,
            "TotalSeconds": 2.4944743
          },
          "OwnDuration": {
            "Ticks": 26014926,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 601,
            "Microseconds": 492,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 3.0109868055555556E-05,
            "TotalHours": 0.0007226368333333334,
            "TotalMilliseconds": 2601.4926,
            "TotalMicroseconds": 2601492.6,
            "TotalNanoseconds": 2601492600.0,
            "TotalMinutes": 0.04335821,
            "TotalSeconds": 2.6014926
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "1a2eb108-5bb3-4c06-8cce-621ad9c222ab",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($templateModulePaths -and $templateModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-Templates] Testing availability for $($templateModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $templateModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-Templates] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-Templates] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-Templates] ERROR: templateModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 597,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 35055,
            "Length": 219,
            "StartLine": 644,
            "StartColumn": 23,
            "EndLine": 648,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "e2b490e5-fc4a-4142-9693-fc3c85e7c933",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }",
            "Parent": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }"
          }
        },
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should generate PowerShell documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate PowerShell documentation templates",
            "Data": null,
            "ExpandedName": "Should generate PowerShell documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate PowerShell documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 650,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate Python documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate Python documentation templates",
            "Data": null,
            "ExpandedName": "Should generate Python documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate Python documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 660,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate C# documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate C# documentation templates",
            "Data": null,
            "ExpandedName": "Should generate C# documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate C# documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 670,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate JavaScript documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate JavaScript documentation templates",
            "Data": null,
            "ExpandedName": "Should generate JavaScript documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate JavaScript documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 680,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should detect language from file extensions",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should detect language from file extensions",
            "Data": null,
            "ExpandedName": "Should detect language from file extensions",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should detect language from file extensions",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 691,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": true,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:46:39.3194679-04:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 66028,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 6,
          "Microseconds": 602,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 7.64212962962963E-08,
          "TotalHours": 1.8341111111111111E-06,
          "TotalMilliseconds": 6.6028,
          "TotalMicroseconds": 6602.8,
          "TotalNanoseconds": 6602800.0,
          "TotalMinutes": 0.00011004666666666666,
          "TotalSeconds": 0.0066028
        },
        "UserDuration": {
          "Ticks": 7157,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 715,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 8.283564814814815E-09,
          "TotalHours": 1.9880555555555556E-07,
          "TotalMilliseconds": 0.7157,
          "TotalMicroseconds": 715.7,
          "TotalNanoseconds": 715700.0,
          "TotalMinutes": 1.1928333333333334E-05,
          "TotalSeconds": 0.0007157
        },
        "OwnDuration": {
          "Ticks": 73185,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 7,
          "Microseconds": 318,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 8.470486111111111E-08,
          "TotalHours": 2.0329166666666668E-06,
          "TotalMilliseconds": 7.3185,
          "TotalMicroseconds": 7318.5,
          "TotalNanoseconds": 7318500.0,
          "TotalMinutes": 0.000121975,
          "TotalSeconds": 0.0073185
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 35030,
            "Length": 3714,
            "StartLine": 643,
            "StartColumn": 47,
            "EndLine": 700,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "e53643a8-6890-49a5-b3bb-487df2abc1b0",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }"
          }
        },
        "StartLine": 643,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 5,
        "OwnPassedCount": 0,
        "OwnFailedCount": 5,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": false,
      "Last": false,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 660,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should generate C# documentation templates",
      "Path": [
        "Enhanced Documentation System - Templates & Automation",
        "Language-Specific Templates",
        "Should generate C# documentation templates"
      ],
      "Data": null,
      "ExpandedName": "Should generate C# documentation templates",
      "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate C# documentation templates",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }",
          "Type": 19,
          "Start": 36758,
          "Length": 523,
          "StartLine": 670,
          "StartColumn": 132,
          "EndLine": 678,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "9314d4a4-8e30-47ff-a19c-8f6a530e008f",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }",
            "Traps": null,
            "Extent": "Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 670,
            "StartColumnNumber": 132,
            "EndLineNumber": 678,
            "EndColumnNumber": 14,
            "Text": "{\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }",
            "StartOffset": 36758,
            "EndOffset": 37281
          },
          "Parent": {
            "ScriptBlock": "{\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }",
            "Parent": "It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Language-Specific Templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates"
        ],
        "Data": null,
        "ExpandedName": "Language-Specific Templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should generate PowerShell documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate PowerShell documentation templates",
            "Data": null,
            "ExpandedName": "Should generate PowerShell documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate PowerShell documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 650,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate Python documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate Python documentation templates",
            "Data": null,
            "ExpandedName": "Should generate Python documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate Python documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 660,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate C# documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate C# documentation templates",
            "Data": null,
            "ExpandedName": "Should generate C# documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate C# documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 670,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate JavaScript documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate JavaScript documentation templates",
            "Data": null,
            "ExpandedName": "Should generate JavaScript documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate JavaScript documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 680,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should detect language from file extensions",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should detect language from file extensions",
            "Data": null,
            "ExpandedName": "Should detect language from file extensions",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should detect language from file extensions",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 691,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 5,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 5,
        "ErrorRecord": [
          {
            "Exception": "System.Management.Automation.RuntimeException: Cannot index into a null array.\r\n   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
            "TargetObject": null,
            "CategoryInfo": "InvalidOperation: (:) [], RuntimeException",
            "FullyQualifiedErrorId": "NullArray",
            "ErrorDetails": null,
            "InvocationInfo": "System.Management.Automation.InvocationInfo",
            "ScriptStackTrace": "at <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 645\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1975\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60",
            "PipelineIterationInfo": ""
          }
        ],
        "Duration": {
          "Ticks": 73185,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 7,
          "Microseconds": 318,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 8.470486111111111E-08,
          "TotalHours": 2.0329166666666668E-06,
          "TotalMilliseconds": 7.3185,
          "TotalMicroseconds": 7318.5,
          "TotalNanoseconds": 7318500.0,
          "TotalMinutes": 0.000121975,
          "TotalSeconds": 0.0073185
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 50196,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T20:43:17.6686205-04:00",
            "CreationTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LastAccessTime": "2025-08-28T20:44:27.0013384-04:00",
            "LastAccessTimeUtc": "2025-08-29T00:44:27.0013384Z",
            "LastWriteTime": "2025-08-28T20:43:17.6686205-04:00",
            "LastWriteTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 23,
          "PassedCount": 2,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 46809013,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 680,
            "Microseconds": 901,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.417709837962963E-05,
            "TotalHours": 0.001300250361111111,
            "TotalMilliseconds": 4680.9013,
            "TotalMicroseconds": 4680901.3,
            "TotalNanoseconds": 4680901300.0,
            "TotalMinutes": 0.07801502166666667,
            "TotalSeconds": 4.6809013
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_987e9a83-43a0-4852-b50b-7810e03bd040",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "27908d1f-3444-4a7c-aad4-e951b25f7123",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1199199,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 119,
            "Microseconds": 919,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3879618055555555E-06,
            "TotalHours": 3.331108333333333E-05,
            "TotalMilliseconds": 119.9199,
            "TotalMicroseconds": 119919.9,
            "TotalNanoseconds": 119919900.0,
            "TotalMinutes": 0.001998665,
            "TotalSeconds": 0.1199199
          },
          "FrameworkDuration": {
            "Ticks": 3338424,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 333,
            "Microseconds": 842,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.863916666666666E-06,
            "TotalHours": 9.2734E-05,
            "TotalMilliseconds": 333.8424,
            "TotalMicroseconds": 333842.4,
            "TotalNanoseconds": 333842400.0,
            "TotalMinutes": 0.00556404,
            "TotalSeconds": 0.3338424
          },
          "UserDuration": {
            "Ticks": 42271390,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 227,
            "Microseconds": 139,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.8925219907407405E-05,
            "TotalHours": 0.0011742052777777778,
            "TotalMilliseconds": 4227.139,
            "TotalMicroseconds": 4227139.0,
            "TotalNanoseconds": 4227139000.0,
            "TotalMinutes": 0.07045231666666667,
            "TotalSeconds": 4.227139
          },
          "OwnDuration": {
            "Ticks": -50602521,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -60,
            "Microseconds": -252,
            "Nanoseconds": -100,
            "Minutes": 0,
            "Seconds": -5,
            "TotalDays": -5.856773263888889E-05,
            "TotalHours": -0.0014056255833333334,
            "TotalMilliseconds": -5060.2521,
            "TotalMicroseconds": -5060252.1,
            "TotalNanoseconds": -5060252100.0,
            "TotalMinutes": -0.084337535,
            "TotalSeconds": -5.0602521
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "00f170e2-f378-4dc1-850d-470bbf038648",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable",
            "Mock": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - Templates & Automation",
          "Path": [
            "Enhanced Documentation System - Templates & Automation"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - Templates & Automation",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
          "Blocks": [
            "[-] Language-Specific Templates",
            "[-] Automation Triggers"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 7,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 7,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 26240217,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 624,
            "Microseconds": 21,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 3.0370621527777777E-05,
            "TotalHours": 0.0007288949166666666,
            "TotalMilliseconds": 2624.0217,
            "TotalMicroseconds": 2624021.7,
            "TotalNanoseconds": 2624021700.0,
            "TotalMinutes": 0.043733695,
            "TotalSeconds": 2.6240217
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "Templates",
            "Automation"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "9aebbe4f-77f8-43fc-8462-7a510848301d",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($templateModulePaths -and $templateModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-Templates] Testing availability for $($templateModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $templateModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-Templates] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-Templates] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-Templates] ERROR: templateModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Language-Specific Templates",
            "[-] Automation Triggers"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.2883087-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 1295474,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 129,
            "Microseconds": 547,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4993912037037037E-06,
            "TotalHours": 3.598538888888889E-05,
            "TotalMilliseconds": 129.5474,
            "TotalMicroseconds": 129547.4,
            "TotalNanoseconds": 129547400.0,
            "TotalMinutes": 0.0021591233333333334,
            "TotalSeconds": 0.1295474
          },
          "UserDuration": {
            "Ticks": 24944743,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 494,
            "Microseconds": 474,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.8871230324074075E-05,
            "TotalHours": 0.0006929095277777778,
            "TotalMilliseconds": 2494.4743,
            "TotalMicroseconds": 2494474.3,
            "TotalNanoseconds": 2494474300.0,
            "TotalMinutes": 0.041574571666666664,
            "TotalSeconds": 2.4944743
          },
          "OwnDuration": {
            "Ticks": 26014926,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 601,
            "Microseconds": 492,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 3.0109868055555556E-05,
            "TotalHours": 0.0007226368333333334,
            "TotalMilliseconds": 2601.4926,
            "TotalMicroseconds": 2601492.6,
            "TotalNanoseconds": 2601492600.0,
            "TotalMinutes": 0.04335821,
            "TotalSeconds": 2.6014926
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "1a2eb108-5bb3-4c06-8cce-621ad9c222ab",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($templateModulePaths -and $templateModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-Templates] Testing availability for $($templateModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $templateModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-Templates] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-Templates] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-Templates] ERROR: templateModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 597,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 35055,
            "Length": 219,
            "StartLine": 644,
            "StartColumn": 23,
            "EndLine": 648,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "e2b490e5-fc4a-4142-9693-fc3c85e7c933",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }",
            "Parent": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }"
          }
        },
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should generate PowerShell documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate PowerShell documentation templates",
            "Data": null,
            "ExpandedName": "Should generate PowerShell documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate PowerShell documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 650,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate Python documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate Python documentation templates",
            "Data": null,
            "ExpandedName": "Should generate Python documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate Python documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 660,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate C# documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate C# documentation templates",
            "Data": null,
            "ExpandedName": "Should generate C# documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate C# documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 670,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate JavaScript documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate JavaScript documentation templates",
            "Data": null,
            "ExpandedName": "Should generate JavaScript documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate JavaScript documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 680,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should detect language from file extensions",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should detect language from file extensions",
            "Data": null,
            "ExpandedName": "Should detect language from file extensions",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should detect language from file extensions",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 691,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": true,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:46:39.3194679-04:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 66028,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 6,
          "Microseconds": 602,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 7.64212962962963E-08,
          "TotalHours": 1.8341111111111111E-06,
          "TotalMilliseconds": 6.6028,
          "TotalMicroseconds": 6602.8,
          "TotalNanoseconds": 6602800.0,
          "TotalMinutes": 0.00011004666666666666,
          "TotalSeconds": 0.0066028
        },
        "UserDuration": {
          "Ticks": 7157,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 715,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 8.283564814814815E-09,
          "TotalHours": 1.9880555555555556E-07,
          "TotalMilliseconds": 0.7157,
          "TotalMicroseconds": 715.7,
          "TotalNanoseconds": 715700.0,
          "TotalMinutes": 1.1928333333333334E-05,
          "TotalSeconds": 0.0007157
        },
        "OwnDuration": {
          "Ticks": 73185,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 7,
          "Microseconds": 318,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 8.470486111111111E-08,
          "TotalHours": 2.0329166666666668E-06,
          "TotalMilliseconds": 7.3185,
          "TotalMicroseconds": 7318.5,
          "TotalNanoseconds": 7318500.0,
          "TotalMinutes": 0.000121975,
          "TotalSeconds": 0.0073185
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 35030,
            "Length": 3714,
            "StartLine": 643,
            "StartColumn": 47,
            "EndLine": 700,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "e53643a8-6890-49a5-b3bb-487df2abc1b0",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }"
          }
        },
        "StartLine": 643,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 5,
        "OwnPassedCount": 0,
        "OwnFailedCount": 5,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": false,
      "Last": false,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 670,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should generate JavaScript documentation templates",
      "Path": [
        "Enhanced Documentation System - Templates & Automation",
        "Language-Specific Templates",
        "Should generate JavaScript documentation templates"
      ],
      "Data": null,
      "ExpandedName": "Should generate JavaScript documentation templates",
      "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate JavaScript documentation templates",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }",
          "Type": 19,
          "Start": 37436,
          "Length": 568,
          "StartLine": 680,
          "StartColumn": 140,
          "EndLine": 689,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "d0c2bf3f-e3c9-4445-bd23-5d3fb9044459",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }",
            "Traps": null,
            "Extent": "Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 680,
            "StartColumnNumber": 140,
            "EndLineNumber": 689,
            "EndColumnNumber": 14,
            "Text": "{\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }",
            "StartOffset": 37436,
            "EndOffset": 38004
          },
          "Parent": {
            "ScriptBlock": "{\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }",
            "Parent": "It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Language-Specific Templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates"
        ],
        "Data": null,
        "ExpandedName": "Language-Specific Templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should generate PowerShell documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate PowerShell documentation templates",
            "Data": null,
            "ExpandedName": "Should generate PowerShell documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate PowerShell documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 650,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate Python documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate Python documentation templates",
            "Data": null,
            "ExpandedName": "Should generate Python documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate Python documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 660,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate C# documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate C# documentation templates",
            "Data": null,
            "ExpandedName": "Should generate C# documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate C# documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 670,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate JavaScript documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate JavaScript documentation templates",
            "Data": null,
            "ExpandedName": "Should generate JavaScript documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate JavaScript documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 680,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should detect language from file extensions",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should detect language from file extensions",
            "Data": null,
            "ExpandedName": "Should detect language from file extensions",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should detect language from file extensions",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 691,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 5,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 5,
        "ErrorRecord": [
          {
            "Exception": "System.Management.Automation.RuntimeException: Cannot index into a null array.\r\n   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
            "TargetObject": null,
            "CategoryInfo": "InvalidOperation: (:) [], RuntimeException",
            "FullyQualifiedErrorId": "NullArray",
            "ErrorDetails": null,
            "InvocationInfo": "System.Management.Automation.InvocationInfo",
            "ScriptStackTrace": "at <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 645\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1975\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60",
            "PipelineIterationInfo": ""
          }
        ],
        "Duration": {
          "Ticks": 73185,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 7,
          "Microseconds": 318,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 8.470486111111111E-08,
          "TotalHours": 2.0329166666666668E-06,
          "TotalMilliseconds": 7.3185,
          "TotalMicroseconds": 7318.5,
          "TotalNanoseconds": 7318500.0,
          "TotalMinutes": 0.000121975,
          "TotalSeconds": 0.0073185
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 50196,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T20:43:17.6686205-04:00",
            "CreationTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LastAccessTime": "2025-08-28T20:44:27.0013384-04:00",
            "LastAccessTimeUtc": "2025-08-29T00:44:27.0013384Z",
            "LastWriteTime": "2025-08-28T20:43:17.6686205-04:00",
            "LastWriteTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 23,
          "PassedCount": 2,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 46809013,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 680,
            "Microseconds": 901,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.417709837962963E-05,
            "TotalHours": 0.001300250361111111,
            "TotalMilliseconds": 4680.9013,
            "TotalMicroseconds": 4680901.3,
            "TotalNanoseconds": 4680901300.0,
            "TotalMinutes": 0.07801502166666667,
            "TotalSeconds": 4.6809013
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_987e9a83-43a0-4852-b50b-7810e03bd040",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "27908d1f-3444-4a7c-aad4-e951b25f7123",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1199199,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 119,
            "Microseconds": 919,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3879618055555555E-06,
            "TotalHours": 3.331108333333333E-05,
            "TotalMilliseconds": 119.9199,
            "TotalMicroseconds": 119919.9,
            "TotalNanoseconds": 119919900.0,
            "TotalMinutes": 0.001998665,
            "TotalSeconds": 0.1199199
          },
          "FrameworkDuration": {
            "Ticks": 3338424,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 333,
            "Microseconds": 842,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.863916666666666E-06,
            "TotalHours": 9.2734E-05,
            "TotalMilliseconds": 333.8424,
            "TotalMicroseconds": 333842.4,
            "TotalNanoseconds": 333842400.0,
            "TotalMinutes": 0.00556404,
            "TotalSeconds": 0.3338424
          },
          "UserDuration": {
            "Ticks": 42271390,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 227,
            "Microseconds": 139,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.8925219907407405E-05,
            "TotalHours": 0.0011742052777777778,
            "TotalMilliseconds": 4227.139,
            "TotalMicroseconds": 4227139.0,
            "TotalNanoseconds": 4227139000.0,
            "TotalMinutes": 0.07045231666666667,
            "TotalSeconds": 4.227139
          },
          "OwnDuration": {
            "Ticks": -50602521,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -60,
            "Microseconds": -252,
            "Nanoseconds": -100,
            "Minutes": 0,
            "Seconds": -5,
            "TotalDays": -5.856773263888889E-05,
            "TotalHours": -0.0014056255833333334,
            "TotalMilliseconds": -5060.2521,
            "TotalMicroseconds": -5060252.1,
            "TotalNanoseconds": -5060252100.0,
            "TotalMinutes": -0.084337535,
            "TotalSeconds": -5.0602521
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "00f170e2-f378-4dc1-850d-470bbf038648",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable",
            "Mock": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - Templates & Automation",
          "Path": [
            "Enhanced Documentation System - Templates & Automation"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - Templates & Automation",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
          "Blocks": [
            "[-] Language-Specific Templates",
            "[-] Automation Triggers"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 7,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 7,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 26240217,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 624,
            "Microseconds": 21,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 3.0370621527777777E-05,
            "TotalHours": 0.0007288949166666666,
            "TotalMilliseconds": 2624.0217,
            "TotalMicroseconds": 2624021.7,
            "TotalNanoseconds": 2624021700.0,
            "TotalMinutes": 0.043733695,
            "TotalSeconds": 2.6240217
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "Templates",
            "Automation"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "9aebbe4f-77f8-43fc-8462-7a510848301d",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($templateModulePaths -and $templateModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-Templates] Testing availability for $($templateModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $templateModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-Templates] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-Templates] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-Templates] ERROR: templateModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Language-Specific Templates",
            "[-] Automation Triggers"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.2883087-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 1295474,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 129,
            "Microseconds": 547,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4993912037037037E-06,
            "TotalHours": 3.598538888888889E-05,
            "TotalMilliseconds": 129.5474,
            "TotalMicroseconds": 129547.4,
            "TotalNanoseconds": 129547400.0,
            "TotalMinutes": 0.0021591233333333334,
            "TotalSeconds": 0.1295474
          },
          "UserDuration": {
            "Ticks": 24944743,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 494,
            "Microseconds": 474,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.8871230324074075E-05,
            "TotalHours": 0.0006929095277777778,
            "TotalMilliseconds": 2494.4743,
            "TotalMicroseconds": 2494474.3,
            "TotalNanoseconds": 2494474300.0,
            "TotalMinutes": 0.041574571666666664,
            "TotalSeconds": 2.4944743
          },
          "OwnDuration": {
            "Ticks": 26014926,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 601,
            "Microseconds": 492,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 3.0109868055555556E-05,
            "TotalHours": 0.0007226368333333334,
            "TotalMilliseconds": 2601.4926,
            "TotalMicroseconds": 2601492.6,
            "TotalNanoseconds": 2601492600.0,
            "TotalMinutes": 0.04335821,
            "TotalSeconds": 2.6014926
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "1a2eb108-5bb3-4c06-8cce-621ad9c222ab",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($templateModulePaths -and $templateModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-Templates] Testing availability for $($templateModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $templateModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-Templates] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-Templates] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-Templates] ERROR: templateModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 597,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 35055,
            "Length": 219,
            "StartLine": 644,
            "StartColumn": 23,
            "EndLine": 648,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "e2b490e5-fc4a-4142-9693-fc3c85e7c933",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }",
            "Parent": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }"
          }
        },
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should generate PowerShell documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate PowerShell documentation templates",
            "Data": null,
            "ExpandedName": "Should generate PowerShell documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate PowerShell documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 650,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate Python documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate Python documentation templates",
            "Data": null,
            "ExpandedName": "Should generate Python documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate Python documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 660,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate C# documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate C# documentation templates",
            "Data": null,
            "ExpandedName": "Should generate C# documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate C# documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 670,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate JavaScript documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate JavaScript documentation templates",
            "Data": null,
            "ExpandedName": "Should generate JavaScript documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate JavaScript documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 680,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should detect language from file extensions",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should detect language from file extensions",
            "Data": null,
            "ExpandedName": "Should detect language from file extensions",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should detect language from file extensions",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 691,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": true,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:46:39.3194679-04:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 66028,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 6,
          "Microseconds": 602,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 7.64212962962963E-08,
          "TotalHours": 1.8341111111111111E-06,
          "TotalMilliseconds": 6.6028,
          "TotalMicroseconds": 6602.8,
          "TotalNanoseconds": 6602800.0,
          "TotalMinutes": 0.00011004666666666666,
          "TotalSeconds": 0.0066028
        },
        "UserDuration": {
          "Ticks": 7157,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 715,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 8.283564814814815E-09,
          "TotalHours": 1.9880555555555556E-07,
          "TotalMilliseconds": 0.7157,
          "TotalMicroseconds": 715.7,
          "TotalNanoseconds": 715700.0,
          "TotalMinutes": 1.1928333333333334E-05,
          "TotalSeconds": 0.0007157
        },
        "OwnDuration": {
          "Ticks": 73185,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 7,
          "Microseconds": 318,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 8.470486111111111E-08,
          "TotalHours": 2.0329166666666668E-06,
          "TotalMilliseconds": 7.3185,
          "TotalMicroseconds": 7318.5,
          "TotalNanoseconds": 7318500.0,
          "TotalMinutes": 0.000121975,
          "TotalSeconds": 0.0073185
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 35030,
            "Length": 3714,
            "StartLine": 643,
            "StartColumn": 47,
            "EndLine": 700,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "e53643a8-6890-49a5-b3bb-487df2abc1b0",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }"
          }
        },
        "StartLine": 643,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 5,
        "OwnPassedCount": 0,
        "OwnFailedCount": 5,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": false,
      "Last": false,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 680,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should detect language from file extensions",
      "Path": [
        "Enhanced Documentation System - Templates & Automation",
        "Language-Specific Templates",
        "Should detect language from file extensions"
      ],
      "Data": null,
      "ExpandedName": "Should detect language from file extensions",
      "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should detect language from file extensions",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }",
          "Type": 19,
          "Start": 38152,
          "Length": 581,
          "StartLine": 691,
          "StartColumn": 133,
          "EndLine": 699,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "910f5fab-ca74-45d9-9679-fb925b38bdd5",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }",
            "Traps": null,
            "Extent": "Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 691,
            "StartColumnNumber": 133,
            "EndLineNumber": 699,
            "EndColumnNumber": 14,
            "Text": "{\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }",
            "StartOffset": 38152,
            "EndOffset": 38733
          },
          "Parent": {
            "ScriptBlock": "{\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }",
            "Parent": "It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Language-Specific Templates",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Language-Specific Templates"
        ],
        "Data": null,
        "ExpandedName": "Language-Specific Templates",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should generate PowerShell documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate PowerShell documentation templates",
            "Data": null,
            "ExpandedName": "Should generate PowerShell documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate PowerShell documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 650,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate Python documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate Python documentation templates",
            "Data": null,
            "ExpandedName": "Should generate Python documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate Python documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 660,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate C# documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate C# documentation templates",
            "Data": null,
            "ExpandedName": "Should generate C# documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate C# documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 670,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate JavaScript documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate JavaScript documentation templates",
            "Data": null,
            "ExpandedName": "Should generate JavaScript documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate JavaScript documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 680,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should detect language from file extensions",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should detect language from file extensions",
            "Data": null,
            "ExpandedName": "Should detect language from file extensions",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should detect language from file extensions",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 691,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 5,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 5,
        "ErrorRecord": [
          {
            "Exception": "System.Management.Automation.RuntimeException: Cannot index into a null array.\r\n   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
            "TargetObject": null,
            "CategoryInfo": "InvalidOperation: (:) [], RuntimeException",
            "FullyQualifiedErrorId": "NullArray",
            "ErrorDetails": null,
            "InvocationInfo": "System.Management.Automation.InvocationInfo",
            "ScriptStackTrace": "at <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 645\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1975\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60",
            "PipelineIterationInfo": ""
          }
        ],
        "Duration": {
          "Ticks": 73185,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 7,
          "Microseconds": 318,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 8.470486111111111E-08,
          "TotalHours": 2.0329166666666668E-06,
          "TotalMilliseconds": 7.3185,
          "TotalMicroseconds": 7318.5,
          "TotalNanoseconds": 7318500.0,
          "TotalMinutes": 0.000121975,
          "TotalSeconds": 0.0073185
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 50196,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T20:43:17.6686205-04:00",
            "CreationTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LastAccessTime": "2025-08-28T20:44:27.0013384-04:00",
            "LastAccessTimeUtc": "2025-08-29T00:44:27.0013384Z",
            "LastWriteTime": "2025-08-28T20:43:17.6686205-04:00",
            "LastWriteTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 23,
          "PassedCount": 2,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 46809013,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 680,
            "Microseconds": 901,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.417709837962963E-05,
            "TotalHours": 0.001300250361111111,
            "TotalMilliseconds": 4680.9013,
            "TotalMicroseconds": 4680901.3,
            "TotalNanoseconds": 4680901300.0,
            "TotalMinutes": 0.07801502166666667,
            "TotalSeconds": 4.6809013
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_987e9a83-43a0-4852-b50b-7810e03bd040",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "27908d1f-3444-4a7c-aad4-e951b25f7123",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1199199,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 119,
            "Microseconds": 919,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3879618055555555E-06,
            "TotalHours": 3.331108333333333E-05,
            "TotalMilliseconds": 119.9199,
            "TotalMicroseconds": 119919.9,
            "TotalNanoseconds": 119919900.0,
            "TotalMinutes": 0.001998665,
            "TotalSeconds": 0.1199199
          },
          "FrameworkDuration": {
            "Ticks": 3338424,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 333,
            "Microseconds": 842,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.863916666666666E-06,
            "TotalHours": 9.2734E-05,
            "TotalMilliseconds": 333.8424,
            "TotalMicroseconds": 333842.4,
            "TotalNanoseconds": 333842400.0,
            "TotalMinutes": 0.00556404,
            "TotalSeconds": 0.3338424
          },
          "UserDuration": {
            "Ticks": 42271390,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 227,
            "Microseconds": 139,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.8925219907407405E-05,
            "TotalHours": 0.0011742052777777778,
            "TotalMilliseconds": 4227.139,
            "TotalMicroseconds": 4227139.0,
            "TotalNanoseconds": 4227139000.0,
            "TotalMinutes": 0.07045231666666667,
            "TotalSeconds": 4.227139
          },
          "OwnDuration": {
            "Ticks": -50602521,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -60,
            "Microseconds": -252,
            "Nanoseconds": -100,
            "Minutes": 0,
            "Seconds": -5,
            "TotalDays": -5.856773263888889E-05,
            "TotalHours": -0.0014056255833333334,
            "TotalMilliseconds": -5060.2521,
            "TotalMicroseconds": -5060252.1,
            "TotalNanoseconds": -5060252100.0,
            "TotalMinutes": -0.084337535,
            "TotalSeconds": -5.0602521
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "00f170e2-f378-4dc1-850d-470bbf038648",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable",
            "Mock": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - Templates & Automation",
          "Path": [
            "Enhanced Documentation System - Templates & Automation"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - Templates & Automation",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
          "Blocks": [
            "[-] Language-Specific Templates",
            "[-] Automation Triggers"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 7,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 7,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 26240217,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 624,
            "Microseconds": 21,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 3.0370621527777777E-05,
            "TotalHours": 0.0007288949166666666,
            "TotalMilliseconds": 2624.0217,
            "TotalMicroseconds": 2624021.7,
            "TotalNanoseconds": 2624021700.0,
            "TotalMinutes": 0.043733695,
            "TotalSeconds": 2.6240217
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "Templates",
            "Automation"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "9aebbe4f-77f8-43fc-8462-7a510848301d",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($templateModulePaths -and $templateModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-Templates] Testing availability for $($templateModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $templateModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-Templates] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-Templates] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-Templates] ERROR: templateModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Language-Specific Templates",
            "[-] Automation Triggers"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.2883087-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 1295474,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 129,
            "Microseconds": 547,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4993912037037037E-06,
            "TotalHours": 3.598538888888889E-05,
            "TotalMilliseconds": 129.5474,
            "TotalMicroseconds": 129547.4,
            "TotalNanoseconds": 129547400.0,
            "TotalMinutes": 0.0021591233333333334,
            "TotalSeconds": 0.1295474
          },
          "UserDuration": {
            "Ticks": 24944743,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 494,
            "Microseconds": 474,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.8871230324074075E-05,
            "TotalHours": 0.0006929095277777778,
            "TotalMilliseconds": 2494.4743,
            "TotalMicroseconds": 2494474.3,
            "TotalNanoseconds": 2494474300.0,
            "TotalMinutes": 0.041574571666666664,
            "TotalSeconds": 2.4944743
          },
          "OwnDuration": {
            "Ticks": 26014926,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 601,
            "Microseconds": 492,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 3.0109868055555556E-05,
            "TotalHours": 0.0007226368333333334,
            "TotalMilliseconds": 2601.4926,
            "TotalMicroseconds": 2601492.6,
            "TotalNanoseconds": 2601492600.0,
            "TotalMinutes": 0.04335821,
            "TotalSeconds": 2.6014926
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "1a2eb108-5bb3-4c06-8cce-621ad9c222ab",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($templateModulePaths -and $templateModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-Templates] Testing availability for $($templateModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $templateModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-Templates] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-Templates] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-Templates] ERROR: templateModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 597,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 35055,
            "Length": 219,
            "StartLine": 644,
            "StartColumn": 23,
            "EndLine": 648,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "e2b490e5-fc4a-4142-9693-fc3c85e7c933",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }",
            "Parent": "{\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }"
          }
        },
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should generate PowerShell documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate PowerShell documentation templates",
            "Data": null,
            "ExpandedName": "Should generate PowerShell documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate PowerShell documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 650,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate Python documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate Python documentation templates",
            "Data": null,
            "ExpandedName": "Should generate Python documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate Python documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 660,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate C# documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate C# documentation templates",
            "Data": null,
            "ExpandedName": "Should generate C# documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate C# documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 670,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should generate JavaScript documentation templates",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should generate JavaScript documentation templates",
            "Data": null,
            "ExpandedName": "Should generate JavaScript documentation templates",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should generate JavaScript documentation templates",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 680,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should detect language from file extensions",
            "Path": "Enhanced Documentation System - Templates & Automation Language-Specific Templates Should detect language from file extensions",
            "Data": null,
            "ExpandedName": "Should detect language from file extensions",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Language-Specific Templates.Should detect language from file extensions",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Language-Specific Templates",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 691,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": true,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:46:39.3194679-04:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 66028,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 6,
          "Microseconds": 602,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 7.64212962962963E-08,
          "TotalHours": 1.8341111111111111E-06,
          "TotalMilliseconds": 6.6028,
          "TotalMicroseconds": 6602.8,
          "TotalNanoseconds": 6602800.0,
          "TotalMinutes": 0.00011004666666666666,
          "TotalSeconds": 0.0066028
        },
        "UserDuration": {
          "Ticks": 7157,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 715,
          "Nanoseconds": 700,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 8.283564814814815E-09,
          "TotalHours": 1.9880555555555556E-07,
          "TotalMilliseconds": 0.7157,
          "TotalMicroseconds": 715.7,
          "TotalNanoseconds": 715700.0,
          "TotalMinutes": 1.1928333333333334E-05,
          "TotalSeconds": 0.0007157
        },
        "OwnDuration": {
          "Ticks": 73185,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 7,
          "Microseconds": 318,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 8.470486111111111E-08,
          "TotalHours": 2.0329166666666668E-06,
          "TotalMilliseconds": 7.3185,
          "TotalMicroseconds": 7318.5,
          "TotalNanoseconds": 7318500.0,
          "TotalMinutes": 0.000121975,
          "TotalSeconds": 0.0073185
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 35030,
            "Length": 3714,
            "StartLine": 643,
            "StartColumn": 47,
            "EndLine": 700,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "e53643a8-6890-49a5-b3bb-487df2abc1b0",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }"
          }
        },
        "StartLine": 643,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 5,
        "OwnPassedCount": 0,
        "OwnFailedCount": 5,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": false,
      "Last": true,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 691,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should initialize documentation triggers",
      "Path": [
        "Enhanced Documentation System - Templates & Automation",
        "Automation Triggers",
        "Should initialize documentation triggers"
      ],
      "Data": null,
      "ExpandedName": "Should initialize documentation triggers",
      "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should initialize documentation triggers",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }",
          "Type": 19,
          "Start": 39186,
          "Length": 235,
          "StartLine": 709,
          "StartColumn": 131,
          "EndLine": 714,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "b556afe0-65d4-4f6e-bf9f-a74293663ffa",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }",
            "Traps": null,
            "Extent": "Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 709,
            "StartColumnNumber": 131,
            "EndLineNumber": 714,
            "EndColumnNumber": 14,
            "Text": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }",
            "StartOffset": 39186,
            "EndOffset": 39421
          },
          "Parent": {
            "ScriptBlock": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }",
            "Parent": "It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Automation Triggers",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Automation Triggers"
        ],
        "Data": null,
        "ExpandedName": "Automation Triggers",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should initialize documentation triggers",
            "Path": "Enhanced Documentation System - Templates & Automation Automation Triggers Should initialize documentation triggers",
            "Data": null,
            "ExpandedName": "Should initialize documentation triggers",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should initialize documentation triggers",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Automation Triggers",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 709,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should log trigger activity",
            "Path": "Enhanced Documentation System - Templates & Automation Automation Triggers Should log trigger activity",
            "Data": null,
            "ExpandedName": "Should log trigger activity",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should log trigger activity",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Automation Triggers",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 716,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 2,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 2,
        "ErrorRecord": [
          {
            "Exception": "System.Management.Automation.RuntimeException: Cannot index into a null array.\r\n   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
            "TargetObject": null,
            "CategoryInfo": "InvalidOperation: (:) [], RuntimeException",
            "FullyQualifiedErrorId": "NullArray",
            "ErrorDetails": null,
            "InvocationInfo": "System.Management.Automation.InvocationInfo",
            "ScriptStackTrace": "at <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 704\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1975\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60",
            "PipelineIterationInfo": ""
          }
        ],
        "Duration": {
          "Ticks": 152106,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 15,
          "Microseconds": 210,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.7604861111111112E-07,
          "TotalHours": 4.225166666666666E-06,
          "TotalMilliseconds": 15.2106,
          "TotalMicroseconds": 15210.6,
          "TotalNanoseconds": 15210600.0,
          "TotalMinutes": 0.00025351,
          "TotalSeconds": 0.0152106
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 50196,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T20:43:17.6686205-04:00",
            "CreationTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LastAccessTime": "2025-08-28T20:44:27.0013384-04:00",
            "LastAccessTimeUtc": "2025-08-29T00:44:27.0013384Z",
            "LastWriteTime": "2025-08-28T20:43:17.6686205-04:00",
            "LastWriteTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 23,
          "PassedCount": 2,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 46809013,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 680,
            "Microseconds": 901,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.417709837962963E-05,
            "TotalHours": 0.001300250361111111,
            "TotalMilliseconds": 4680.9013,
            "TotalMicroseconds": 4680901.3,
            "TotalNanoseconds": 4680901300.0,
            "TotalMinutes": 0.07801502166666667,
            "TotalSeconds": 4.6809013
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_987e9a83-43a0-4852-b50b-7810e03bd040",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "27908d1f-3444-4a7c-aad4-e951b25f7123",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1199199,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 119,
            "Microseconds": 919,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3879618055555555E-06,
            "TotalHours": 3.331108333333333E-05,
            "TotalMilliseconds": 119.9199,
            "TotalMicroseconds": 119919.9,
            "TotalNanoseconds": 119919900.0,
            "TotalMinutes": 0.001998665,
            "TotalSeconds": 0.1199199
          },
          "FrameworkDuration": {
            "Ticks": 3338424,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 333,
            "Microseconds": 842,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.863916666666666E-06,
            "TotalHours": 9.2734E-05,
            "TotalMilliseconds": 333.8424,
            "TotalMicroseconds": 333842.4,
            "TotalNanoseconds": 333842400.0,
            "TotalMinutes": 0.00556404,
            "TotalSeconds": 0.3338424
          },
          "UserDuration": {
            "Ticks": 42271390,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 227,
            "Microseconds": 139,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.8925219907407405E-05,
            "TotalHours": 0.0011742052777777778,
            "TotalMilliseconds": 4227.139,
            "TotalMicroseconds": 4227139.0,
            "TotalNanoseconds": 4227139000.0,
            "TotalMinutes": 0.07045231666666667,
            "TotalSeconds": 4.227139
          },
          "OwnDuration": {
            "Ticks": -50602521,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -60,
            "Microseconds": -252,
            "Nanoseconds": -100,
            "Minutes": 0,
            "Seconds": -5,
            "TotalDays": -5.856773263888889E-05,
            "TotalHours": -0.0014056255833333334,
            "TotalMilliseconds": -5060.2521,
            "TotalMicroseconds": -5060252.1,
            "TotalNanoseconds": -5060252100.0,
            "TotalMinutes": -0.084337535,
            "TotalSeconds": -5.0602521
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "00f170e2-f378-4dc1-850d-470bbf038648",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable",
            "Mock": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - Templates & Automation",
          "Path": [
            "Enhanced Documentation System - Templates & Automation"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - Templates & Automation",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
          "Blocks": [
            "[-] Language-Specific Templates",
            "[-] Automation Triggers"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 7,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 7,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 26240217,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 624,
            "Microseconds": 21,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 3.0370621527777777E-05,
            "TotalHours": 0.0007288949166666666,
            "TotalMilliseconds": 2624.0217,
            "TotalMicroseconds": 2624021.7,
            "TotalNanoseconds": 2624021700.0,
            "TotalMinutes": 0.043733695,
            "TotalSeconds": 2.6240217
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "Templates",
            "Automation"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "9aebbe4f-77f8-43fc-8462-7a510848301d",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($templateModulePaths -and $templateModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-Templates] Testing availability for $($templateModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $templateModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-Templates] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-Templates] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-Templates] ERROR: templateModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Language-Specific Templates",
            "[-] Automation Triggers"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.2883087-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 1295474,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 129,
            "Microseconds": 547,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4993912037037037E-06,
            "TotalHours": 3.598538888888889E-05,
            "TotalMilliseconds": 129.5474,
            "TotalMicroseconds": 129547.4,
            "TotalNanoseconds": 129547400.0,
            "TotalMinutes": 0.0021591233333333334,
            "TotalSeconds": 0.1295474
          },
          "UserDuration": {
            "Ticks": 24944743,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 494,
            "Microseconds": 474,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.8871230324074075E-05,
            "TotalHours": 0.0006929095277777778,
            "TotalMilliseconds": 2494.4743,
            "TotalMicroseconds": 2494474.3,
            "TotalNanoseconds": 2494474300.0,
            "TotalMinutes": 0.041574571666666664,
            "TotalSeconds": 2.4944743
          },
          "OwnDuration": {
            "Ticks": 26014926,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 601,
            "Microseconds": 492,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 3.0109868055555556E-05,
            "TotalHours": 0.0007226368333333334,
            "TotalMilliseconds": 2601.4926,
            "TotalMicroseconds": 2601492.6,
            "TotalNanoseconds": 2601492600.0,
            "TotalMinutes": 0.04335821,
            "TotalSeconds": 2.6014926
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "1a2eb108-5bb3-4c06-8cce-621ad9c222ab",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($templateModulePaths -and $templateModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-Templates] Testing availability for $($templateModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $templateModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-Templates] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-Templates] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-Templates] ERROR: templateModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 597,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 38819,
            "Length": 221,
            "StartLine": 703,
            "StartColumn": 23,
            "EndLine": 707,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "26ca46cc-c279-4971-be3e-fde80f44d189",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }",
            "Parent": "{\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }"
          }
        },
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should initialize documentation triggers",
            "Path": "Enhanced Documentation System - Templates & Automation Automation Triggers Should initialize documentation triggers",
            "Data": null,
            "ExpandedName": "Should initialize documentation triggers",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should initialize documentation triggers",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Automation Triggers",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 709,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should log trigger activity",
            "Path": "Enhanced Documentation System - Templates & Automation Automation Triggers Should log trigger activity",
            "Data": null,
            "ExpandedName": "Should log trigger activity",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should log trigger activity",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Automation Triggers",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 716,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": false,
        "Last": true,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:46:39.3267849-04:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 138611,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 13,
          "Microseconds": 861,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.6042939814814815E-07,
          "TotalHours": 3.8503055555555555E-06,
          "TotalMilliseconds": 13.8611,
          "TotalMicroseconds": 13861.1,
          "TotalNanoseconds": 13861100.0,
          "TotalMinutes": 0.00023101833333333334,
          "TotalSeconds": 0.0138611
        },
        "UserDuration": {
          "Ticks": 13495,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 1,
          "Microseconds": 349,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.5619212962962962E-08,
          "TotalHours": 3.748611111111111E-07,
          "TotalMilliseconds": 1.3495,
          "TotalMicroseconds": 1349.5,
          "TotalNanoseconds": 1349500.0,
          "TotalMinutes": 2.2491666666666667E-05,
          "TotalSeconds": 0.0013495
        },
        "OwnDuration": {
          "Ticks": 152106,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 15,
          "Microseconds": 210,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.7604861111111112E-07,
          "TotalHours": 4.225166666666666E-06,
          "TotalMilliseconds": 15.2106,
          "TotalMicroseconds": 15210.6,
          "TotalNanoseconds": 15210600.0,
          "TotalMinutes": 0.00025351,
          "TotalSeconds": 0.0152106
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 38794,
            "Length": 1481,
            "StartLine": 702,
            "StartColumn": 39,
            "EndLine": 732,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "542dc787-f877-4bb0-8fad-d7e55eeb8dad",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }"
          }
        },
        "StartLine": 702,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 2,
        "OwnPassedCount": 0,
        "OwnFailedCount": 2,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": true,
      "Last": false,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 709,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should log trigger activity",
      "Path": [
        "Enhanced Documentation System - Templates & Automation",
        "Automation Triggers",
        "Should log trigger activity"
      ],
      "Data": null,
      "ExpandedName": "Should log trigger activity",
      "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should log trigger activity",
      "Result": "Failed",
      "ErrorRecord": [],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }",
          "Type": 19,
          "Start": 39554,
          "Length": 710,
          "StartLine": 716,
          "StartColumn": 118,
          "EndLine": 731,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "bf7c42c6-45e3-49fc-843d-432c38de348e",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }",
            "Traps": null,
            "Extent": "Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }",
            "Parent": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 716,
            "StartColumnNumber": 118,
            "EndLineNumber": 731,
            "EndColumnNumber": 14,
            "Text": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }",
            "StartOffset": 39554,
            "EndOffset": 40264
          },
          "Parent": {
            "ScriptBlock": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }",
            "Parent": "It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Automation Triggers",
        "Path": [
          "Enhanced Documentation System - Templates & Automation",
          "Automation Triggers"
        ],
        "Data": null,
        "ExpandedName": "Automation Triggers",
        "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should initialize documentation triggers",
            "Path": "Enhanced Documentation System - Templates & Automation Automation Triggers Should initialize documentation triggers",
            "Data": null,
            "ExpandedName": "Should initialize documentation triggers",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should initialize documentation triggers",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Automation Triggers",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 709,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should log trigger activity",
            "Path": "Enhanced Documentation System - Templates & Automation Automation Triggers Should log trigger activity",
            "Data": null,
            "ExpandedName": "Should log trigger activity",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should log trigger activity",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Automation Triggers",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 716,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 2,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 2,
        "ErrorRecord": [
          {
            "Exception": "System.Management.Automation.RuntimeException: Cannot index into a null array.\r\n   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
            "TargetObject": null,
            "CategoryInfo": "InvalidOperation: (:) [], RuntimeException",
            "FullyQualifiedErrorId": "NullArray",
            "ErrorDetails": null,
            "InvocationInfo": "System.Management.Automation.InvocationInfo",
            "ScriptStackTrace": "at <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 704\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1975\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60",
            "PipelineIterationInfo": ""
          }
        ],
        "Duration": {
          "Ticks": 152106,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 15,
          "Microseconds": 210,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.7604861111111112E-07,
          "TotalHours": 4.225166666666666E-06,
          "TotalMilliseconds": 15.2106,
          "TotalMicroseconds": 15210.6,
          "TotalNanoseconds": 15210600.0,
          "TotalMinutes": 0.00025351,
          "TotalSeconds": 0.0152106
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 50196,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T20:43:17.6686205-04:00",
            "CreationTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LastAccessTime": "2025-08-28T20:44:27.0013384-04:00",
            "LastAccessTimeUtc": "2025-08-29T00:44:27.0013384Z",
            "LastWriteTime": "2025-08-28T20:43:17.6686205-04:00",
            "LastWriteTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 23,
          "PassedCount": 2,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 46809013,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 680,
            "Microseconds": 901,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.417709837962963E-05,
            "TotalHours": 0.001300250361111111,
            "TotalMilliseconds": 4680.9013,
            "TotalMicroseconds": 4680901.3,
            "TotalNanoseconds": 4680901300.0,
            "TotalMinutes": 0.07801502166666667,
            "TotalSeconds": 4.6809013
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_987e9a83-43a0-4852-b50b-7810e03bd040",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "27908d1f-3444-4a7c-aad4-e951b25f7123",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1199199,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 119,
            "Microseconds": 919,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3879618055555555E-06,
            "TotalHours": 3.331108333333333E-05,
            "TotalMilliseconds": 119.9199,
            "TotalMicroseconds": 119919.9,
            "TotalNanoseconds": 119919900.0,
            "TotalMinutes": 0.001998665,
            "TotalSeconds": 0.1199199
          },
          "FrameworkDuration": {
            "Ticks": 3338424,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 333,
            "Microseconds": 842,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.863916666666666E-06,
            "TotalHours": 9.2734E-05,
            "TotalMilliseconds": 333.8424,
            "TotalMicroseconds": 333842.4,
            "TotalNanoseconds": 333842400.0,
            "TotalMinutes": 0.00556404,
            "TotalSeconds": 0.3338424
          },
          "UserDuration": {
            "Ticks": 42271390,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 227,
            "Microseconds": 139,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.8925219907407405E-05,
            "TotalHours": 0.0011742052777777778,
            "TotalMilliseconds": 4227.139,
            "TotalMicroseconds": 4227139.0,
            "TotalNanoseconds": 4227139000.0,
            "TotalMinutes": 0.07045231666666667,
            "TotalSeconds": 4.227139
          },
          "OwnDuration": {
            "Ticks": -50602521,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -60,
            "Microseconds": -252,
            "Nanoseconds": -100,
            "Minutes": 0,
            "Seconds": -5,
            "TotalDays": -5.856773263888889E-05,
            "TotalHours": -0.0014056255833333334,
            "TotalMilliseconds": -5060.2521,
            "TotalMicroseconds": -5060252.1,
            "TotalNanoseconds": -5060252100.0,
            "TotalMinutes": -0.084337535,
            "TotalSeconds": -5.0602521
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "00f170e2-f378-4dc1-850d-470bbf038648",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable",
            "Mock": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - Templates & Automation",
          "Path": [
            "Enhanced Documentation System - Templates & Automation"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - Templates & Automation",
          "ExpandedPath": "Enhanced Documentation System - Templates & Automation",
          "Blocks": [
            "[-] Language-Specific Templates",
            "[-] Automation Triggers"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 7,
          "PassedCount": 0,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 7,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 26240217,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 624,
            "Microseconds": 21,
            "Nanoseconds": 700,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 3.0370621527777777E-05,
            "TotalHours": 0.0007288949166666666,
            "TotalMilliseconds": 2624.0217,
            "TotalMicroseconds": 2624021.7,
            "TotalNanoseconds": 2624021700.0,
            "TotalMinutes": 0.043733695,
            "TotalSeconds": 2.6240217
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "Templates",
            "Automation"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "9aebbe4f-77f8-43fc-8462-7a510848301d",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($templateModulePaths -and $templateModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-Templates] Testing availability for $($templateModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $templateModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-Templates] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-Templates] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-Templates] ERROR: templateModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Language-Specific Templates",
            "[-] Automation Triggers"
          ],
          "Passed": false,
          "First": false,
          "Last": false,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.2883087-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 1295474,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 129,
            "Microseconds": 547,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.4993912037037037E-06,
            "TotalHours": 3.598538888888889E-05,
            "TotalMilliseconds": 129.5474,
            "TotalMicroseconds": 129547.4,
            "TotalNanoseconds": 129547400.0,
            "TotalMinutes": 0.0021591233333333334,
            "TotalSeconds": 0.1295474
          },
          "UserDuration": {
            "Ticks": 24944743,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 494,
            "Microseconds": 474,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.8871230324074075E-05,
            "TotalHours": 0.0006929095277777778,
            "TotalMilliseconds": 2494.4743,
            "TotalMicroseconds": 2494474.3,
            "TotalNanoseconds": 2494474300.0,
            "TotalMinutes": 0.041574571666666664,
            "TotalSeconds": 2.4944743
          },
          "OwnDuration": {
            "Ticks": 26014926,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 601,
            "Microseconds": 492,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 3.0109868055555556E-05,
            "TotalHours": 0.0007226368333333334,
            "TotalMilliseconds": 2601.4926,
            "TotalMicroseconds": 2601492.6,
            "TotalNanoseconds": 2601492600.0,
            "TotalMinutes": 0.04335821,
            "TotalSeconds": 2.6014926
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "1a2eb108-5bb3-4c06-8cce-621ad9c222ab",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-TEMPLATES] Templates Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-TEMPLATES] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Templates test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Template module paths\r\n            $templateModulePaths = @{\r\n                'Templates-PerLanguage' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\Templates-PerLanguage.psm1\"\r\n                'AutoGenerationTriggers' = \"$PSScriptRoot\\Modules\\Unity-Claude-Enhanced-DocumentationGenerators\\Core\\AutoGenerationTriggers.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Templates] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            if ($templateModulePaths -and $templateModulePaths.Keys) {\r\n                Write-Host \"[BeforeAll-Templates] Testing availability for $($templateModulePaths.Count) modules...\" -ForegroundColor Yellow\r\n                foreach ($moduleName in $templateModulePaths.Keys) {\r\n                    if ([string]::IsNullOrEmpty($moduleName)) {\r\n                        Write-Debug \"[BeforeAll-Templates] Skipping null/empty module name\"\r\n                        continue\r\n                    }\r\n                    \r\n                    try {\r\n                        Write-Host \"[BeforeAll-Templates] Testing module: $moduleName\" -ForegroundColor Gray\r\n                        $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $templateModulePaths[$moduleName]\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $moduleResult\r\n                            Write-Host \"[BeforeAll-Templates] Module $moduleName result: $moduleResult\" -ForegroundColor Green\r\n                        }\r\n                        Write-Debug \"[BeforeAll-Templates] Module $moduleName availability: $moduleResult\"\r\n                    }\r\n                    catch {\r\n                        Write-Host \"[BeforeAll-Templates] Exception testing $moduleName : $($_.Exception.Message)\" -ForegroundColor Red\r\n                        Write-Debug \"[BeforeAll-Templates] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                        if ($script:TemplateModulesAvailable -and $script:TemplateModulesAvailable.ContainsKey($moduleName)) {\r\n                            $script:TemplateModulesAvailable[$moduleName] = $false\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Write-Host \"[BeforeAll-Templates] ERROR: templateModulePaths not properly initialized\" -ForegroundColor Red\r\n            }\r\n        }\r\n        \r\n        Context \"Language-Specific Templates\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                    Set-ItResult -Skipped -Because \"Templates-PerLanguage module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate PowerShell documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-PowerShell\" -ScriptBlock {\r\n                    $template = Get-PowerShellDocTemplate -FunctionName \"Test-Function\" -Parameters @(\"Param1\", \"Param2\") -Synopsis \"Test function\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"\\.SYNOPSIS\"\r\n                    $template | Should -Match \"Test function\"\r\n                    $template | Should -Match \"\\.PARAMETER Param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate Python documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-Python\" -ScriptBlock {\r\n                    $template = Get-PythonDocTemplate -FunctionName \"test_function\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"Args:\"\r\n                    $template | Should -Match \"Returns:\"\r\n                    $template | Should -Match \"param1\"\r\n                }\r\n            }\r\n            \r\n            It \"Should generate C# documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-CSharp\" -ScriptBlock {\r\n                    $template = Get-CSharpDocTemplate -MethodName \"TestMethod\" -Parameters @(\"param1\", \"param2\") -Summary \"Test method summary\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"<summary>\"\r\n                    $template | Should -Match \"Test method summary\"\r\n                    $template | Should -Match '<param name=\"param1\">'\r\n                }\r\n            }\r\n            \r\n            It \"Should generate JavaScript documentation templates\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Template-JavaScript\" -ScriptBlock {\r\n                    $template = Get-JavaScriptDocTemplate -FunctionName \"testFunction\" -Parameters @(\"param1\", \"param2\") -Description \"Test function description\"\r\n                    $template | Should -Not -BeNullOrEmpty\r\n                    $template | Should -Match \"/\\*\\*\"\r\n                    $template | Should -Match \"@param\"\r\n                    $template | Should -Match \"@returns\"\r\n                    $template | Should -Match \"\\*/\"\r\n                }\r\n            }\r\n            \r\n            It \"Should detect language from file extensions\" -Skip:(-not $script:TemplateModulesAvailable['Templates-PerLanguage']) {\r\n                Measure-TestPerformance -TestName \"Language-Detection\" -ScriptBlock {\r\n                    Get-LanguageFromExtension -FilePath \"test.ps1\" | Should -Be \"PowerShell\"\r\n                    Get-LanguageFromExtension -FilePath \"test.py\" | Should -Be \"Python\" \r\n                    Get-LanguageFromExtension -FilePath \"test.cs\" | Should -Be \"CSharp\"\r\n                    Get-LanguageFromExtension -FilePath \"test.js\" | Should -Be \"JavaScript\"\r\n                    Get-LanguageFromExtension -FilePath \"test.ts\" | Should -Be \"TypeScript\"\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Automation Triggers\" {\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 597,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }",
            "Type": 19,
            "Start": 38819,
            "Length": 221,
            "StartLine": 703,
            "StartColumn": 23,
            "EndLine": 707,
            "EndColumn": 14
          },
          "DebuggerHidden": false,
          "Id": "26ca46cc-c279-4971-be3e-fde80f44d189",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }",
            "Parent": "{\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }"
          }
        },
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should initialize documentation triggers",
            "Path": "Enhanced Documentation System - Templates & Automation Automation Triggers Should initialize documentation triggers",
            "Data": null,
            "ExpandedName": "Should initialize documentation triggers",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should initialize documentation triggers",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Automation Triggers",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 709,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should log trigger activity",
            "Path": "Enhanced Documentation System - Templates & Automation Automation Triggers Should log trigger activity",
            "Data": null,
            "ExpandedName": "Should log trigger activity",
            "ExpandedPath": "Enhanced Documentation System - Templates & Automation.Automation Triggers.Should log trigger activity",
            "Result": "Failed",
            "ErrorRecord": "",
            "StandardOutput": null,
            "Duration": "00:00:00",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Automation Triggers",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 716,
            "Executed": false,
            "ExecutedAt": null,
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00",
            "FrameworkDuration": "00:00:00",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": false,
        "Last": true,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:46:39.3267849-04:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 138611,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 13,
          "Microseconds": 861,
          "Nanoseconds": 100,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.6042939814814815E-07,
          "TotalHours": 3.8503055555555555E-06,
          "TotalMilliseconds": 13.8611,
          "TotalMicroseconds": 13861.1,
          "TotalNanoseconds": 13861100.0,
          "TotalMinutes": 0.00023101833333333334,
          "TotalSeconds": 0.0138611
        },
        "UserDuration": {
          "Ticks": 13495,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 1,
          "Microseconds": 349,
          "Nanoseconds": 500,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.5619212962962962E-08,
          "TotalHours": 3.748611111111111E-07,
          "TotalMilliseconds": 1.3495,
          "TotalMicroseconds": 1349.5,
          "TotalNanoseconds": 1349500.0,
          "TotalMinutes": 2.2491666666666667E-05,
          "TotalSeconds": 0.0013495
        },
        "OwnDuration": {
          "Ticks": 152106,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 15,
          "Microseconds": 210,
          "Nanoseconds": 600,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 1.7604861111111112E-07,
          "TotalHours": 4.225166666666666E-06,
          "TotalMilliseconds": 15.2106,
          "TotalMicroseconds": 15210.6,
          "TotalNanoseconds": 15210600.0,
          "TotalMinutes": 0.00025351,
          "TotalSeconds": 0.0152106
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }",
            "Type": 19,
            "Start": 38794,
            "Length": 1481,
            "StartLine": 702,
            "StartColumn": 39,
            "EndLine": 732,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "542dc787-f877-4bb0-8fad-d7e55eeb8dad",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }",
            "Parent": "{\r\n            BeforeAll {\r\n                if (-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                    Set-ItResult -Skipped -Because \"AutoGenerationTriggers module not available\"\r\n                }\r\n            }\r\n            \r\n            It \"Should initialize documentation triggers\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Initialize\" -ScriptBlock {\r\n                    $result = Initialize-DocumentationTriggers\r\n                    $result | Should -Be $true\r\n                }\r\n            }\r\n            \r\n            It \"Should log trigger activity\" -Skip:(-not $script:TemplateModulesAvailable['AutoGenerationTriggers']) {\r\n                Measure-TestPerformance -TestName \"Triggers-Activity\" -ScriptBlock {\r\n                    $logEntry = @{\r\n                        Timestamp = Get-Date\r\n                        Trigger = 'Manual'\r\n                        FilePath = 'test.ps1'\r\n                        Language = 'PowerShell'\r\n                        ChangeType = 'Created'\r\n                    }\r\n                    \r\n                    Add-TriggerActivity -LogEntry $logEntry\r\n                    $activities = Get-TriggerActivity -Last 1 -TriggerType 'Manual'\r\n                    $activities | Should -Not -BeNullOrEmpty\r\n                    $activities[0].Trigger | Should -Be 'Manual'\r\n                }\r\n            }\r\n        }"
          }
        },
        "StartLine": 702,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": false,
        "OwnTotalCount": 2,
        "OwnPassedCount": 0,
        "OwnFailedCount": 2,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": false,
      "Last": true,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 716,
      "Executed": false,
      "ExecutedAt": null,
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "FrameworkDuration": {
        "Ticks": 0,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 0,
        "Microseconds": 0,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 0.0,
        "TotalHours": 0.0,
        "TotalMilliseconds": 0.0,
        "TotalMicroseconds": 0.0,
        "TotalNanoseconds": 0.0,
        "TotalMinutes": 0.0,
        "TotalSeconds": 0.0
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should meet cache performance benchmarks",
      "Path": [
        "Enhanced Documentation System - Performance",
        "Cache Performance",
        "Should meet cache performance benchmarks"
      ],
      "Data": null,
      "ExpandedName": "Should meet cache performance benchmarks",
      "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should meet cache performance benchmarks",
      "Result": "Failed",
      "ErrorRecord": [
        {
          "Exception": {
            "ErrorRecord": "The term 'New-PerformanceCache' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.",
            "CommandName": "New-PerformanceCache",
            "WasThrownFromThrowStatement": false,
            "TargetSite": "Void CheckActionPreference(System.Management.Automation.Language.FunctionContext, System.Exception)",
            "Message": "The term 'New-PerformanceCache' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": "System.Management.Automation",
            "HResult": -2146233087,
            "StackTrace": "   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)"
          },
          "TargetObject": "New-PerformanceCache",
          "CategoryInfo": {
            "Category": 13,
            "Activity": "",
            "Reason": "CommandNotFoundException",
            "TargetName": "New-PerformanceCache",
            "TargetType": "String"
          },
          "FullyQualifiedErrorId": "CommandNotFoundException",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 784,
            "OffsetInLine": 26,
            "HistoryId": 1,
            "ScriptName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Line": "                $cache = New-PerformanceCache -MaxSize 1000\r\n",
            "Statement": "New-PerformanceCache",
            "PositionMessage": "At C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1:784 char:26\r\n+                 $cache = New-PerformanceCache -MaxSize 1000\r\n+                          ~~~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "PSCommandPath": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "InvocationName": "New-PerformanceCache",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 784\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2157\r\nat Invoke-TestItem, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1199\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 835\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60",
          "PipelineIterationInfo": []
        }
      ],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 307272,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 30,
        "Microseconds": 727,
        "Nanoseconds": 200,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 3.556388888888889E-07,
        "TotalHours": 8.535333333333333E-06,
        "TotalMilliseconds": 30.7272,
        "TotalMicroseconds": 30727.2,
        "TotalNanoseconds": 30727200.0,
        "TotalMinutes": 0.00051212,
        "TotalSeconds": 0.0307272
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }",
          "Type": 19,
          "Start": 43152,
          "Length": 841,
          "StartLine": 783,
          "StartColumn": 122,
          "EndLine": 803,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "d6033451-b997-4c8c-b3d7-698ca8242304",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "$cache = New-PerformanceCache -MaxSize 1000 $operations = 100 $stopwatch = [System.Diagnostics.Stopwatch]::StartNew() 1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                } 1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                } $stopwatch.Stop() $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2) $avgTimePerOp | Should -BeLessThan 1.0",
            "Traps": null,
            "Extent": "$cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0",
            "Parent": "{\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 783,
            "StartColumnNumber": 122,
            "EndLineNumber": 803,
            "EndColumnNumber": 14,
            "Text": "{\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }",
            "StartOffset": 43152,
            "EndOffset": 43993
          },
          "Parent": {
            "ScriptBlock": "{\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }",
            "Parent": "It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Cache Performance",
        "Path": [
          "Enhanced Documentation System - Performance",
          "Cache Performance"
        ],
        "Data": null,
        "ExpandedName": "Cache Performance",
        "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should meet cache performance benchmarks",
            "Path": "Enhanced Documentation System - Performance Cache Performance Should meet cache performance benchmarks",
            "Data": null,
            "ExpandedName": "Should meet cache performance benchmarks",
            "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should meet cache performance benchmarks",
            "Result": "Failed",
            "ErrorRecord": "The term 'New-PerformanceCache' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.",
            "StandardOutput": null,
            "Duration": "00:00:00.0307272",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Cache Performance",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 783,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:39.3860851-04:00",
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00.0216227",
            "FrameworkDuration": "00:00:00.0091045",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle cache warming efficiently",
            "Path": "Enhanced Documentation System - Performance Cache Performance Should handle cache warming efficiently",
            "Data": null,
            "ExpandedName": "Should handle cache warming efficiently",
            "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should handle cache warming efficiently",
            "Result": "Failed",
            "ErrorRecord": "The term 'New-PerformanceCache' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.",
            "StandardOutput": null,
            "Duration": "00:00:00.0189533",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Cache Performance",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 805,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:39.4168867-04:00",
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00.0153837",
            "FrameworkDuration": "00:00:00.0035696",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 2,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 2,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 558568,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 55,
          "Microseconds": 856,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.464907407407407E-07,
          "TotalHours": 1.5515777777777777E-05,
          "TotalMilliseconds": 55.8568,
          "TotalMicroseconds": 55856.8,
          "TotalNanoseconds": 55856800.0,
          "TotalMinutes": 0.0009309466666666666,
          "TotalSeconds": 0.0558568
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 50196,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T20:43:17.6686205-04:00",
            "CreationTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LastAccessTime": "2025-08-28T20:44:27.0013384-04:00",
            "LastAccessTimeUtc": "2025-08-29T00:44:27.0013384Z",
            "LastWriteTime": "2025-08-28T20:43:17.6686205-04:00",
            "LastWriteTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 23,
          "PassedCount": 2,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 46809013,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 680,
            "Microseconds": 901,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.417709837962963E-05,
            "TotalHours": 0.001300250361111111,
            "TotalMilliseconds": 4680.9013,
            "TotalMicroseconds": 4680901.3,
            "TotalNanoseconds": 4680901300.0,
            "TotalMinutes": 0.07801502166666667,
            "TotalSeconds": 4.6809013
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_987e9a83-43a0-4852-b50b-7810e03bd040",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "27908d1f-3444-4a7c-aad4-e951b25f7123",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1199199,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 119,
            "Microseconds": 919,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3879618055555555E-06,
            "TotalHours": 3.331108333333333E-05,
            "TotalMilliseconds": 119.9199,
            "TotalMicroseconds": 119919.9,
            "TotalNanoseconds": 119919900.0,
            "TotalMinutes": 0.001998665,
            "TotalSeconds": 0.1199199
          },
          "FrameworkDuration": {
            "Ticks": 3338424,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 333,
            "Microseconds": 842,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.863916666666666E-06,
            "TotalHours": 9.2734E-05,
            "TotalMilliseconds": 333.8424,
            "TotalMicroseconds": 333842.4,
            "TotalNanoseconds": 333842400.0,
            "TotalMinutes": 0.00556404,
            "TotalSeconds": 0.3338424
          },
          "UserDuration": {
            "Ticks": 42271390,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 227,
            "Microseconds": 139,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.8925219907407405E-05,
            "TotalHours": 0.0011742052777777778,
            "TotalMilliseconds": 4227.139,
            "TotalMicroseconds": 4227139.0,
            "TotalNanoseconds": 4227139000.0,
            "TotalMinutes": 0.07045231666666667,
            "TotalSeconds": 4.227139
          },
          "OwnDuration": {
            "Ticks": -50602521,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -60,
            "Microseconds": -252,
            "Nanoseconds": -100,
            "Minutes": 0,
            "Seconds": -5,
            "TotalDays": -5.856773263888889E-05,
            "TotalHours": -0.0014056255833333334,
            "TotalMilliseconds": -5060.2521,
            "TotalMicroseconds": -5060252.1,
            "TotalNanoseconds": -5060252100.0,
            "TotalMinutes": -0.084337535,
            "TotalSeconds": -5.0602521
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "00f170e2-f378-4dc1-850d-470bbf038648",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable",
            "Mock": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - Performance",
          "Path": [
            "Enhanced Documentation System - Performance"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance",
          "Blocks": [
            "[-] Cache Performance",
            "[+] File Processing Performance",
            "[-] Parallel Processing Performance"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 44023146,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 402,
            "Microseconds": 314,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.095271527777778E-05,
            "TotalHours": 0.0012228651666666666,
            "TotalMilliseconds": 4402.3146,
            "TotalMicroseconds": 4402314.6,
            "TotalNanoseconds": 4402314600.0,
            "TotalMinutes": 0.07337191,
            "TotalSeconds": 4.4023146
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "Performance",
            "Benchmarking"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "00dd0dde-d10c-4db3-a81c-56d9b7a6e575",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "d9402bfe-2f33-43bd-be7e-8f21e5c6461c",
            "Ast": "{\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }"
          },
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Cache Performance",
            "[+] File Processing Performance",
            "[-] Parallel Processing Performance"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.3391867-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 1783972,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 178,
            "Microseconds": 397,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.0647824074074075E-06,
            "TotalHours": 4.955477777777778E-05,
            "TotalMilliseconds": 178.3972,
            "TotalMicroseconds": 178397.2,
            "TotalNanoseconds": 178397200.0,
            "TotalMinutes": 0.0029732866666666666,
            "TotalSeconds": 0.1783972
          },
          "UserDuration": {
            "Ticks": 42239174,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 223,
            "Microseconds": 917,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.888793287037037E-05,
            "TotalHours": 0.0011733103888888889,
            "TotalMilliseconds": 4223.9174,
            "TotalMicroseconds": 4223917.4,
            "TotalNanoseconds": 4223917400.0,
            "TotalMinutes": 0.07039862333333333,
            "TotalSeconds": 4.2239174
          },
          "OwnDuration": {
            "Ticks": 24730530,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 473,
            "Microseconds": 53,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.8623298611111112E-05,
            "TotalHours": 0.0006869591666666667,
            "TotalMilliseconds": 2473.053,
            "TotalMicroseconds": 2473053.0,
            "TotalNanoseconds": 2473053000.0,
            "TotalMinutes": 0.04121755,
            "TotalSeconds": 2.473053
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "8a36e972-dbb7-4b0f-837c-793c46840711",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 739,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": null,
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should meet cache performance benchmarks",
            "Path": "Enhanced Documentation System - Performance Cache Performance Should meet cache performance benchmarks",
            "Data": null,
            "ExpandedName": "Should meet cache performance benchmarks",
            "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should meet cache performance benchmarks",
            "Result": "Failed",
            "ErrorRecord": "The term 'New-PerformanceCache' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.",
            "StandardOutput": null,
            "Duration": "00:00:00.0307272",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Cache Performance",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 783,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:39.3860851-04:00",
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00.0216227",
            "FrameworkDuration": "00:00:00.0091045",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle cache warming efficiently",
            "Path": "Enhanced Documentation System - Performance Cache Performance Should handle cache warming efficiently",
            "Data": null,
            "ExpandedName": "Should handle cache warming efficiently",
            "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should handle cache warming efficiently",
            "Result": "Failed",
            "ErrorRecord": "The term 'New-PerformanceCache' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.",
            "StandardOutput": null,
            "Duration": "00:00:00.0189533",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Cache Performance",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 805,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:39.4168867-04:00",
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00.0153837",
            "FrameworkDuration": "00:00:00.0035696",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": true,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:46:39.3848329-04:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 186724,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 18,
          "Microseconds": 672,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.1611574074074075E-07,
          "TotalHours": 5.186777777777778E-06,
          "TotalMilliseconds": 18.6724,
          "TotalMicroseconds": 18672.4,
          "TotalNanoseconds": 18672400.0,
          "TotalMinutes": 0.00031120666666666666,
          "TotalSeconds": 0.0186724
        },
        "UserDuration": {
          "Ticks": 371844,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 37,
          "Microseconds": 184,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.30375E-07,
          "TotalHours": 1.0329E-05,
          "TotalMilliseconds": 37.1844,
          "TotalMicroseconds": 37184.4,
          "TotalNanoseconds": 37184400.0,
          "TotalMinutes": 0.00061974,
          "TotalSeconds": 0.0371844
        },
        "OwnDuration": {
          "Ticks": 61763,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 6,
          "Microseconds": 176,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 7.14849537037037E-08,
          "TotalHours": 1.7156388888888888E-06,
          "TotalMilliseconds": 6.1763,
          "TotalMicroseconds": 6176.3,
          "TotalNanoseconds": 6176300.0,
          "TotalMinutes": 0.00010293833333333333,
          "TotalSeconds": 0.0061763
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }",
            "Type": 19,
            "Start": 43014,
            "Length": 1766,
            "StartLine": 781,
            "StartColumn": 37,
            "EndLine": 817,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "31e410bb-bc7c-4f1c-8d17-b63458d59b16",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }",
            "Parent": "{\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }"
          }
        },
        "StartLine": 781,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": true,
        "OwnTotalCount": 2,
        "OwnPassedCount": 0,
        "OwnFailedCount": 2,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": true,
      "Last": false,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 783,
      "Executed": true,
      "ExecutedAt": "2025-08-28T20:46:39.3860851-04:00",
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 216227,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 21,
        "Microseconds": 622,
        "Nanoseconds": 700,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 2.502627314814815E-07,
        "TotalHours": 6.006305555555556E-06,
        "TotalMilliseconds": 21.6227,
        "TotalMicroseconds": 21622.7,
        "TotalNanoseconds": 21622700.0,
        "TotalMinutes": 0.00036037833333333333,
        "TotalSeconds": 0.0216227
      },
      "FrameworkDuration": {
        "Ticks": 91045,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 9,
        "Microseconds": 104,
        "Nanoseconds": 500,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 1.053761574074074E-07,
        "TotalHours": 2.529027777777778E-06,
        "TotalMilliseconds": 9.1045,
        "TotalMicroseconds": 9104.5,
        "TotalNanoseconds": 9104500.0,
        "TotalMinutes": 0.00015174166666666666,
        "TotalSeconds": 0.0091045
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should handle cache warming efficiently",
      "Path": [
        "Enhanced Documentation System - Performance",
        "Cache Performance",
        "Should handle cache warming efficiently"
      ],
      "Data": null,
      "ExpandedName": "Should handle cache warming efficiently",
      "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should handle cache warming efficiently",
      "Result": "Failed",
      "ErrorRecord": [
        {
          "Exception": {
            "ErrorRecord": "The term 'New-PerformanceCache' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.",
            "CommandName": "New-PerformanceCache",
            "WasThrownFromThrowStatement": false,
            "TargetSite": "Void CheckActionPreference(System.Management.Automation.Language.FunctionContext, System.Exception)",
            "Message": "The term 'New-PerformanceCache' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": "System.Management.Automation",
            "HResult": -2146233087,
            "StackTrace": "   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)"
          },
          "TargetObject": "New-PerformanceCache",
          "CategoryInfo": {
            "Category": 13,
            "Activity": "",
            "Reason": "CommandNotFoundException",
            "TargetName": "New-PerformanceCache",
            "TargetType": "String"
          },
          "FullyQualifiedErrorId": "CommandNotFoundException",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 806,
            "OffsetInLine": 26,
            "HistoryId": 1,
            "ScriptName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Line": "                $cache = New-PerformanceCache -MaxSize 500\r\n",
            "Statement": "New-PerformanceCache",
            "PositionMessage": "At C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1:806 char:26\r\n+                 $cache = New-PerformanceCache -MaxSize 500\r\n+                          ~~~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "PSCommandPath": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "InvocationName": "New-PerformanceCache",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 806\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2157\r\nat Invoke-TestItem, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1199\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 835\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60",
          "PipelineIterationInfo": []
        }
      ],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 189533,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 18,
        "Microseconds": 953,
        "Nanoseconds": 300,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 2.1936689814814814E-07,
        "TotalHours": 5.264805555555555E-06,
        "TotalMilliseconds": 18.9533,
        "TotalMicroseconds": 18953.3,
        "TotalNanoseconds": 18953300.0,
        "TotalMinutes": 0.00031588833333333333,
        "TotalSeconds": 0.0189533
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }",
          "Type": 19,
          "Start": 44129,
          "Length": 640,
          "StartLine": 805,
          "StartColumn": 121,
          "EndLine": 816,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "79d19557-2eeb-44df-8f89-1494acea802c",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "$cache = New-PerformanceCache -MaxSize 500 $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } } $stopwatch = [System.Diagnostics.Stopwatch]::StartNew() Start-CacheWarming -Cache $cache -Data $warmingData $stopwatch.Stop() $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100 Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100",
            "Traps": null,
            "Extent": "$cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100",
            "Parent": "{\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 805,
            "StartColumnNumber": 121,
            "EndLineNumber": 816,
            "EndColumnNumber": 14,
            "Text": "{\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }",
            "StartOffset": 44129,
            "EndOffset": 44769
          },
          "Parent": {
            "ScriptBlock": "{\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }",
            "Parent": "It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Cache Performance",
        "Path": [
          "Enhanced Documentation System - Performance",
          "Cache Performance"
        ],
        "Data": null,
        "ExpandedName": "Cache Performance",
        "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should meet cache performance benchmarks",
            "Path": "Enhanced Documentation System - Performance Cache Performance Should meet cache performance benchmarks",
            "Data": null,
            "ExpandedName": "Should meet cache performance benchmarks",
            "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should meet cache performance benchmarks",
            "Result": "Failed",
            "ErrorRecord": "The term 'New-PerformanceCache' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.",
            "StandardOutput": null,
            "Duration": "00:00:00.0307272",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Cache Performance",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 783,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:39.3860851-04:00",
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00.0216227",
            "FrameworkDuration": "00:00:00.0091045",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle cache warming efficiently",
            "Path": "Enhanced Documentation System - Performance Cache Performance Should handle cache warming efficiently",
            "Data": null,
            "ExpandedName": "Should handle cache warming efficiently",
            "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should handle cache warming efficiently",
            "Result": "Failed",
            "ErrorRecord": "The term 'New-PerformanceCache' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.",
            "StandardOutput": null,
            "Duration": "00:00:00.0189533",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Cache Performance",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 805,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:39.4168867-04:00",
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00.0153837",
            "FrameworkDuration": "00:00:00.0035696",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 2,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 2,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 558568,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 55,
          "Microseconds": 856,
          "Nanoseconds": 800,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 6.464907407407407E-07,
          "TotalHours": 1.5515777777777777E-05,
          "TotalMilliseconds": 55.8568,
          "TotalMicroseconds": 55856.8,
          "TotalNanoseconds": 55856800.0,
          "TotalMinutes": 0.0009309466666666666,
          "TotalSeconds": 0.0558568
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 50196,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T20:43:17.6686205-04:00",
            "CreationTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LastAccessTime": "2025-08-28T20:44:27.0013384-04:00",
            "LastAccessTimeUtc": "2025-08-29T00:44:27.0013384Z",
            "LastWriteTime": "2025-08-28T20:43:17.6686205-04:00",
            "LastWriteTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 23,
          "PassedCount": 2,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 46809013,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 680,
            "Microseconds": 901,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.417709837962963E-05,
            "TotalHours": 0.001300250361111111,
            "TotalMilliseconds": 4680.9013,
            "TotalMicroseconds": 4680901.3,
            "TotalNanoseconds": 4680901300.0,
            "TotalMinutes": 0.07801502166666667,
            "TotalSeconds": 4.6809013
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_987e9a83-43a0-4852-b50b-7810e03bd040",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "27908d1f-3444-4a7c-aad4-e951b25f7123",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1199199,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 119,
            "Microseconds": 919,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3879618055555555E-06,
            "TotalHours": 3.331108333333333E-05,
            "TotalMilliseconds": 119.9199,
            "TotalMicroseconds": 119919.9,
            "TotalNanoseconds": 119919900.0,
            "TotalMinutes": 0.001998665,
            "TotalSeconds": 0.1199199
          },
          "FrameworkDuration": {
            "Ticks": 3338424,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 333,
            "Microseconds": 842,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.863916666666666E-06,
            "TotalHours": 9.2734E-05,
            "TotalMilliseconds": 333.8424,
            "TotalMicroseconds": 333842.4,
            "TotalNanoseconds": 333842400.0,
            "TotalMinutes": 0.00556404,
            "TotalSeconds": 0.3338424
          },
          "UserDuration": {
            "Ticks": 42271390,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 227,
            "Microseconds": 139,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.8925219907407405E-05,
            "TotalHours": 0.0011742052777777778,
            "TotalMilliseconds": 4227.139,
            "TotalMicroseconds": 4227139.0,
            "TotalNanoseconds": 4227139000.0,
            "TotalMinutes": 0.07045231666666667,
            "TotalSeconds": 4.227139
          },
          "OwnDuration": {
            "Ticks": -50602521,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -60,
            "Microseconds": -252,
            "Nanoseconds": -100,
            "Minutes": 0,
            "Seconds": -5,
            "TotalDays": -5.856773263888889E-05,
            "TotalHours": -0.0014056255833333334,
            "TotalMilliseconds": -5060.2521,
            "TotalMicroseconds": -5060252.1,
            "TotalNanoseconds": -5060252100.0,
            "TotalMinutes": -0.084337535,
            "TotalSeconds": -5.0602521
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "00f170e2-f378-4dc1-850d-470bbf038648",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable",
            "Mock": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - Performance",
          "Path": [
            "Enhanced Documentation System - Performance"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance",
          "Blocks": [
            "[-] Cache Performance",
            "[+] File Processing Performance",
            "[-] Parallel Processing Performance"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 44023146,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 402,
            "Microseconds": 314,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.095271527777778E-05,
            "TotalHours": 0.0012228651666666666,
            "TotalMilliseconds": 4402.3146,
            "TotalMicroseconds": 4402314.6,
            "TotalNanoseconds": 4402314600.0,
            "TotalMinutes": 0.07337191,
            "TotalSeconds": 4.4023146
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "Performance",
            "Benchmarking"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "00dd0dde-d10c-4db3-a81c-56d9b7a6e575",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "d9402bfe-2f33-43bd-be7e-8f21e5c6461c",
            "Ast": "{\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }"
          },
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Cache Performance",
            "[+] File Processing Performance",
            "[-] Parallel Processing Performance"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.3391867-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 1783972,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 178,
            "Microseconds": 397,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.0647824074074075E-06,
            "TotalHours": 4.955477777777778E-05,
            "TotalMilliseconds": 178.3972,
            "TotalMicroseconds": 178397.2,
            "TotalNanoseconds": 178397200.0,
            "TotalMinutes": 0.0029732866666666666,
            "TotalSeconds": 0.1783972
          },
          "UserDuration": {
            "Ticks": 42239174,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 223,
            "Microseconds": 917,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.888793287037037E-05,
            "TotalHours": 0.0011733103888888889,
            "TotalMilliseconds": 4223.9174,
            "TotalMicroseconds": 4223917.4,
            "TotalNanoseconds": 4223917400.0,
            "TotalMinutes": 0.07039862333333333,
            "TotalSeconds": 4.2239174
          },
          "OwnDuration": {
            "Ticks": 24730530,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 473,
            "Microseconds": 53,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.8623298611111112E-05,
            "TotalHours": 0.0006869591666666667,
            "TotalMilliseconds": 2473.053,
            "TotalMicroseconds": 2473053.0,
            "TotalNanoseconds": 2473053000.0,
            "TotalMinutes": 0.04121755,
            "TotalSeconds": 2.473053
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "8a36e972-dbb7-4b0f-837c-793c46840711",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 739,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": null,
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should meet cache performance benchmarks",
            "Path": "Enhanced Documentation System - Performance Cache Performance Should meet cache performance benchmarks",
            "Data": null,
            "ExpandedName": "Should meet cache performance benchmarks",
            "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should meet cache performance benchmarks",
            "Result": "Failed",
            "ErrorRecord": "The term 'New-PerformanceCache' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.",
            "StandardOutput": null,
            "Duration": "00:00:00.0307272",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Cache Performance",
            "First": true,
            "Last": false,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 783,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:39.3860851-04:00",
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00.0216227",
            "FrameworkDuration": "00:00:00.0091045",
            "PluginData": null,
            "FrameworkData": null
          },
          {
            "Name": "Should handle cache warming efficiently",
            "Path": "Enhanced Documentation System - Performance Cache Performance Should handle cache warming efficiently",
            "Data": null,
            "ExpandedName": "Should handle cache warming efficiently",
            "ExpandedPath": "Enhanced Documentation System - Performance.Cache Performance.Should handle cache warming efficiently",
            "Result": "Failed",
            "ErrorRecord": "The term 'New-PerformanceCache' is not recognized as a name of a cmdlet, function, script file, or executable program.\r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.",
            "StandardOutput": null,
            "Duration": "00:00:00.0189533",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Cache Performance",
            "First": false,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 805,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:39.4168867-04:00",
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:00.0153837",
            "FrameworkDuration": "00:00:00.0035696",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": true,
        "Last": false,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:46:39.3848329-04:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 186724,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 18,
          "Microseconds": 672,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.1611574074074075E-07,
          "TotalHours": 5.186777777777778E-06,
          "TotalMilliseconds": 18.6724,
          "TotalMicroseconds": 18672.4,
          "TotalNanoseconds": 18672400.0,
          "TotalMinutes": 0.00031120666666666666,
          "TotalSeconds": 0.0186724
        },
        "UserDuration": {
          "Ticks": 371844,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 37,
          "Microseconds": 184,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.30375E-07,
          "TotalHours": 1.0329E-05,
          "TotalMilliseconds": 37.1844,
          "TotalMicroseconds": 37184.4,
          "TotalNanoseconds": 37184400.0,
          "TotalMinutes": 0.00061974,
          "TotalSeconds": 0.0371844
        },
        "OwnDuration": {
          "Ticks": 61763,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 6,
          "Microseconds": 176,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 7.14849537037037E-08,
          "TotalHours": 1.7156388888888888E-06,
          "TotalMilliseconds": 6.1763,
          "TotalMicroseconds": 6176.3,
          "TotalNanoseconds": 6176300.0,
          "TotalMinutes": 0.00010293833333333333,
          "TotalSeconds": 0.0061763
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }",
            "Type": 19,
            "Start": 43014,
            "Length": 1766,
            "StartLine": 781,
            "StartColumn": 37,
            "EndLine": 817,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "31e410bb-bc7c-4f1c-8d17-b63458d59b16",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }",
            "Parent": "{\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }"
          }
        },
        "StartLine": 781,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": true,
        "OwnTotalCount": 2,
        "OwnPassedCount": 0,
        "OwnFailedCount": 2,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": false,
      "Last": true,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 805,
      "Executed": true,
      "ExecutedAt": "2025-08-28T20:46:39.4168867-04:00",
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 153837,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 15,
        "Microseconds": 383,
        "Nanoseconds": 700,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 1.7805208333333332E-07,
        "TotalHours": 4.27325E-06,
        "TotalMilliseconds": 15.3837,
        "TotalMicroseconds": 15383.7,
        "TotalNanoseconds": 15383700.0,
        "TotalMinutes": 0.000256395,
        "TotalSeconds": 0.0153837
      },
      "FrameworkDuration": {
        "Ticks": 35696,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 3,
        "Microseconds": 569,
        "Nanoseconds": 600,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 4.1314814814814815E-08,
        "TotalHours": 9.915555555555556E-07,
        "TotalMilliseconds": 3.5696,
        "TotalMicroseconds": 3569.6,
        "TotalNanoseconds": 3569600.0,
        "TotalMinutes": 5.9493333333333335E-05,
        "TotalSeconds": 0.0035696
      },
      "PluginData": null,
      "FrameworkData": null
    },
    {
      "Name": "Should demonstrate parallel processing benefits",
      "Path": [
        "Enhanced Documentation System - Performance",
        "Parallel Processing Performance",
        "Should demonstrate parallel processing benefits"
      ],
      "Data": null,
      "ExpandedName": "Should demonstrate parallel processing benefits",
      "ExpandedPath": "Enhanced Documentation System - Performance.Parallel Processing Performance.Should demonstrate parallel processing benefits",
      "Result": "Failed",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected the actual value to be less than 403.0951, but got 680.5131.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected the actual value to be less than 403.0951, but got 680.5131.",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Line": "924",
            "LineText": "                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)",
            "Terminating": true,
            "ShouldResult": "Pester.ShouldResult"
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8250,
            "OffsetInLine": 13,
            "HistoryId": 1,
            "ScriptName": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1:8250 char:13\r\n+             throw $errorRecord\r\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1",
            "PSCommandPath": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 8250\r\nat Should<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 8193\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1: line 924\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2157\r\nat Invoke-TestItem, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1199\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 835\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 893\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2024\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1985\r\nat Invoke-ScriptBlock, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2160\r\nat Invoke-Block, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 940\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1688\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.ps1: line 3\r\nat <ScriptBlock>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3260\r\nat Invoke-InNewScriptScope, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 3267\r\nat Run-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 1691\r\nat Invoke-Test, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 2512\r\nat Invoke-Pester<End>, C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1: line 4960\r\nat <ScriptBlock>, C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Run-EnhancedDocumentationTests.ps1: line 60",
          "PipelineIterationInfo": []
        }
      ],
      "StandardOutput": null,
      "Duration": {
        "Ticks": 15123201,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 512,
        "Microseconds": 320,
        "Nanoseconds": 100,
        "Minutes": 0,
        "Seconds": 1,
        "TotalDays": 1.750370486111111E-05,
        "TotalHours": 0.00042008891666666667,
        "TotalMilliseconds": 1512.3201,
        "TotalMicroseconds": 1512320.1,
        "TotalNanoseconds": 1512320100.0,
        "TotalMinutes": 0.025205335,
        "TotalSeconds": 1.5123201
      },
      "ItemType": "Test",
      "Id": "",
      "GroupId": "",
      "ScriptBlock": {
        "Attributes": [],
        "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
        "IsFilter": false,
        "IsConfiguration": false,
        "Module": null,
        "StartPosition": {
          "Content": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }",
          "Type": 19,
          "Start": 48797,
          "Length": 1070,
          "StartLine": 905,
          "StartColumn": 130,
          "EndLine": 925,
          "EndColumn": 14
        },
        "DebuggerHidden": false,
        "Id": "a5664aac-4fc4-4d27-a295-8a52da871e52",
        "Ast": {
          "Attributes": [],
          "UsingStatements": [],
          "ParamBlock": null,
          "BeginBlock": null,
          "ProcessBlock": null,
          "EndBlock": {
            "Unnamed": true,
            "BlockKind": 130,
            "Statements": "$sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                } $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                } Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)",
            "Traps": null,
            "Extent": "$sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)",
            "Parent": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }"
          },
          "CleanBlock": null,
          "DynamicParamBlock": null,
          "ScriptRequirements": null,
          "Extent": {
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "StartScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "EndScriptPosition": "System.Management.Automation.Language.InternalScriptPosition",
            "StartLineNumber": 905,
            "StartColumnNumber": 130,
            "EndLineNumber": 925,
            "EndColumnNumber": 14,
            "Text": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }",
            "StartOffset": 48797,
            "EndOffset": 49867
          },
          "Parent": {
            "ScriptBlock": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }",
            "StaticType": "scriptblock",
            "Extent": "{\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }",
            "Parent": "It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }"
          }
        }
      },
      "Tag": null,
      "Focus": false,
      "Skip": false,
      "Block": {
        "Name": "Parallel Processing Performance",
        "Path": [
          "Enhanced Documentation System - Performance",
          "Parallel Processing Performance"
        ],
        "Data": null,
        "ExpandedName": "Parallel Processing Performance",
        "ExpandedPath": "Enhanced Documentation System - Performance.Parallel Processing Performance",
        "Blocks": [],
        "Tests": [
          {
            "Name": "Should demonstrate parallel processing benefits",
            "Path": "Enhanced Documentation System - Performance Parallel Processing Performance Should demonstrate parallel processing benefits",
            "Data": null,
            "ExpandedName": "Should demonstrate parallel processing benefits",
            "ExpandedPath": "Enhanced Documentation System - Performance.Parallel Processing Performance.Should demonstrate parallel processing benefits",
            "Result": "Failed",
            "ErrorRecord": "Expected the actual value to be less than 403.0951, but got 680.5131.",
            "StandardOutput": null,
            "Duration": "00:00:01.5123201",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Parallel Processing Performance",
            "First": true,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 905,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:39.5635945-04:00",
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:01.5001840",
            "FrameworkDuration": "00:00:00.0121361",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Result": "Failed",
        "FailedCount": 1,
        "PassedCount": 0,
        "SkippedCount": 0,
        "NotRunCount": 0,
        "TotalCount": 1,
        "ErrorRecord": [],
        "Duration": {
          "Ticks": 16958313,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 695,
          "Microseconds": 831,
          "Nanoseconds": 300,
          "Minutes": 0,
          "Seconds": 1,
          "TotalDays": 1.9627677083333333E-05,
          "TotalHours": 0.00047106425,
          "TotalMilliseconds": 1695.8313,
          "TotalMicroseconds": 1695831.3,
          "TotalNanoseconds": 1695831300.0,
          "TotalMinutes": 0.028263855,
          "TotalSeconds": 1.6958313
        },
        "Id": "",
        "GroupId": "",
        "Tag": [],
        "Focus": false,
        "Skip": false,
        "ItemType": "Block",
        "BlockContainer": {
          "Type": "File",
          "Item": {
            "Name": "Test-EnhancedDocumentationSystem.ps1",
            "Length": 50196,
            "DirectoryName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "Directory": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation",
            "IsReadOnly": false,
            "Exists": true,
            "FullName": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Extension": ".ps1",
            "CreationTime": "2025-08-28T20:43:17.6686205-04:00",
            "CreationTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LastAccessTime": "2025-08-28T20:44:27.0013384-04:00",
            "LastAccessTimeUtc": "2025-08-29T00:44:27.0013384Z",
            "LastWriteTime": "2025-08-28T20:43:17.6686205-04:00",
            "LastWriteTimeUtc": "2025-08-29T00:43:17.6686205Z",
            "LinkTarget": null,
            "UnixFileMode": -1,
            "Attributes": 32
          },
          "Data": {}
        },
        "Root": {
          "Name": "Root",
          "Path": [
            "Path"
          ],
          "Data": {},
          "ExpandedName": "Root",
          "ExpandedPath": ".Root",
          "Blocks": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Tests": [],
          "Result": "NotRun",
          "FailedCount": 23,
          "PassedCount": 2,
          "SkippedCount": 3,
          "NotRunCount": 0,
          "TotalCount": 28,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 46809013,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 680,
            "Microseconds": 901,
            "Nanoseconds": 300,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.417709837962963E-05,
            "TotalHours": 0.001300250361111111,
            "TotalMilliseconds": 4680.9013,
            "TotalMicroseconds": 4680901.3,
            "TotalNanoseconds": 4680901300.0,
            "TotalMinutes": 0.07801502166666667,
            "TotalSeconds": 4.6809013
          },
          "Id": null,
          "GroupId": null,
          "Tag": null,
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": true,
          "Parent": null,
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": "__DynamicModule_987e9a83-43a0-4852-b50b-7810e03bd040",
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "27908d1f-3444-4a7c-aad4-e951b25f7123",
            "Ast": "{\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": null,
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Enhanced Documentation System - CPG Components",
            "[-] Enhanced Documentation System - LLM Integration",
            "[-] Enhanced Documentation System - Templates & Automation",
            "[-] Enhanced Documentation System - Performance"
          ],
          "Passed": false,
          "First": true,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 1199199,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 119,
            "Microseconds": 919,
            "Nanoseconds": 900,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 1.3879618055555555E-06,
            "TotalHours": 3.331108333333333E-05,
            "TotalMilliseconds": 119.9199,
            "TotalMicroseconds": 119919.9,
            "TotalNanoseconds": 119919900.0,
            "TotalMinutes": 0.001998665,
            "TotalSeconds": 0.1199199
          },
          "FrameworkDuration": {
            "Ticks": 3338424,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 333,
            "Microseconds": 842,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 3.863916666666666E-06,
            "TotalHours": 9.2734E-05,
            "TotalMilliseconds": 333.8424,
            "TotalMicroseconds": 333842.4,
            "TotalNanoseconds": 333842400.0,
            "TotalMinutes": 0.00556404,
            "TotalSeconds": 0.3338424
          },
          "UserDuration": {
            "Ticks": 42271390,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 227,
            "Microseconds": 139,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.8925219907407405E-05,
            "TotalHours": 0.0011742052777777778,
            "TotalMilliseconds": 4227.139,
            "TotalMicroseconds": 4227139.0,
            "TotalNanoseconds": 4227139000.0,
            "TotalMinutes": 0.07045231666666667,
            "TotalSeconds": 4.227139
          },
          "OwnDuration": {
            "Ticks": -50602521,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": -60,
            "Microseconds": -252,
            "Nanoseconds": -100,
            "Minutes": 0,
            "Seconds": -5,
            "TotalDays": -5.856773263888889E-05,
            "TotalHours": -0.0014056255833333334,
            "TotalMilliseconds": -5060.2521,
            "TotalMicroseconds": -5060252.1,
            "TotalNanoseconds": -5060252100.0,
            "TotalMinutes": -0.084337535,
            "TotalSeconds": -5.0602521
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\Users\\georg\\Documents\\PowerShell\\Modules\\Pester\\5.7.1\\Pester.psm1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "00f170e2-f378-4dc1-850d-470bbf038648",
            "Ast": "{}"
          },
          "StartLine": 0,
          "FrameworkData": {
            "MissingParametersProcessed": true
          },
          "PluginData": {
            "TestDrive": "System.Collections.Hashtable",
            "TestRegistry": "System.Collections.Hashtable",
            "Mock": "System.Collections.Hashtable"
          },
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "IsRoot": false,
        "Parent": {
          "Name": "Enhanced Documentation System - Performance",
          "Path": [
            "Enhanced Documentation System - Performance"
          ],
          "Data": null,
          "ExpandedName": "Enhanced Documentation System - Performance",
          "ExpandedPath": "Enhanced Documentation System - Performance",
          "Blocks": [
            "[-] Cache Performance",
            "[+] File Processing Performance",
            "[-] Parallel Processing Performance"
          ],
          "Tests": [],
          "Result": "Failed",
          "FailedCount": 3,
          "PassedCount": 2,
          "SkippedCount": 0,
          "NotRunCount": 0,
          "TotalCount": 5,
          "ErrorRecord": [],
          "Duration": {
            "Ticks": 44023146,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 402,
            "Microseconds": 314,
            "Nanoseconds": 600,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 5.095271527777778E-05,
            "TotalHours": 0.0012228651666666666,
            "TotalMilliseconds": 4402.3146,
            "TotalMicroseconds": 4402314.6,
            "TotalNanoseconds": 4402314600.0,
            "TotalMinutes": 0.07337191,
            "TotalSeconds": 4.4023146
          },
          "Id": "",
          "GroupId": "",
          "Tag": [
            "Performance",
            "Benchmarking"
          ],
          "Focus": false,
          "Skip": false,
          "ItemType": "Block",
          "BlockContainer": {
            "Type": "File",
            "Item": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Data": "System.Collections.Hashtable"
          },
          "Root": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "IsRoot": false,
          "Parent": {
            "Name": "Root",
            "Path": "Path",
            "Data": "System.Collections.Hashtable",
            "ExpandedName": "Root",
            "ExpandedPath": ".Root",
            "Blocks": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Tests": "",
            "Result": "NotRun",
            "FailedCount": 23,
            "PassedCount": 2,
            "SkippedCount": 3,
            "NotRunCount": 0,
            "TotalCount": 28,
            "ErrorRecord": "",
            "Duration": "00:00:04.6809013",
            "Id": null,
            "GroupId": null,
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "ItemType": "Block",
            "BlockContainer": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "Root": "[ ] Root",
            "IsRoot": true,
            "Parent": null,
            "EachTestSetup": null,
            "OneTimeTestSetup": "\r\n                    . $action $parameters\r\n                    if ($null -ne $setup) {\r\n                        . $setup\r\n                    }\r\n                ",
            "EachTestTeardown": null,
            "OneTimeTestTeardown": null,
            "EachBlockSetup": null,
            "OneTimeBlockSetup": null,
            "EachBlockTeardown": null,
            "OneTimeBlockTeardown": null,
            "Order": "[-] Enhanced Documentation System - CPG Components [-] Enhanced Documentation System - LLM Integration [-] Enhanced Documentation System - Templates & Automation [-] Enhanced Documentation System - Performance",
            "Passed": false,
            "First": true,
            "Last": true,
            "StandardOutput": null,
            "ShouldRun": true,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:36.6405195-04:00",
            "Exclude": false,
            "Include": false,
            "Explicit": false,
            "DiscoveryDuration": "00:00:00.1199199",
            "FrameworkDuration": "00:00:00.3338424",
            "UserDuration": "00:00:04.2271390",
            "OwnDuration": "-00:00:05.0602521",
            "ScriptBlock": "",
            "StartLine": 0,
            "FrameworkData": "System.Collections.Hashtable",
            "PluginData": "System.Collections.Hashtable",
            "PendingCount": 0,
            "InconclusiveCount": 0,
            "OwnPassed": true,
            "OwnTotalCount": 0,
            "OwnPassedCount": 0,
            "OwnFailedCount": 0,
            "OwnSkippedCount": 0,
            "OwnPendingCount": 0,
            "OwnNotRunCount": 0,
            "OwnInconclusiveCount": 0
          },
          "EachTestSetup": null,
          "OneTimeTestSetup": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "00dd0dde-d10c-4db3-a81c-56d9b7a6e575",
            "Ast": "{\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }"
          },
          "EachTestTeardown": null,
          "OneTimeTestTeardown": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "d9402bfe-2f33-43bd-be7e-8f21e5c6461c",
            "Ast": "{\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }"
          },
          "EachBlockSetup": null,
          "OneTimeBlockSetup": null,
          "EachBlockTeardown": null,
          "OneTimeBlockTeardown": null,
          "Order": [
            "[-] Cache Performance",
            "[+] File Processing Performance",
            "[-] Parallel Processing Performance"
          ],
          "Passed": false,
          "First": false,
          "Last": true,
          "StandardOutput": null,
          "ShouldRun": true,
          "Executed": true,
          "ExecutedAt": "2025-08-28T20:46:39.3391867-04:00",
          "Exclude": false,
          "Include": false,
          "Explicit": false,
          "DiscoveryDuration": {
            "Ticks": 0,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 0,
            "Microseconds": 0,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 0.0,
            "TotalHours": 0.0,
            "TotalMilliseconds": 0.0,
            "TotalMicroseconds": 0.0,
            "TotalNanoseconds": 0.0,
            "TotalMinutes": 0.0,
            "TotalSeconds": 0.0
          },
          "FrameworkDuration": {
            "Ticks": 1783972,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 178,
            "Microseconds": 397,
            "Nanoseconds": 200,
            "Minutes": 0,
            "Seconds": 0,
            "TotalDays": 2.0647824074074075E-06,
            "TotalHours": 4.955477777777778E-05,
            "TotalMilliseconds": 178.3972,
            "TotalMicroseconds": 178397.2,
            "TotalNanoseconds": 178397200.0,
            "TotalMinutes": 0.0029732866666666666,
            "TotalSeconds": 0.1783972
          },
          "UserDuration": {
            "Ticks": 42239174,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 223,
            "Microseconds": 917,
            "Nanoseconds": 400,
            "Minutes": 0,
            "Seconds": 4,
            "TotalDays": 4.888793287037037E-05,
            "TotalHours": 0.0011733103888888889,
            "TotalMilliseconds": 4223.9174,
            "TotalMicroseconds": 4223917.4,
            "TotalNanoseconds": 4223917400.0,
            "TotalMinutes": 0.07039862333333333,
            "TotalSeconds": 4.2239174
          },
          "OwnDuration": {
            "Ticks": 24730530,
            "Days": 0,
            "Hours": 0,
            "Milliseconds": 473,
            "Microseconds": 53,
            "Nanoseconds": 0,
            "Minutes": 0,
            "Seconds": 2,
            "TotalDays": 2.8623298611111112E-05,
            "TotalHours": 0.0006869591666666667,
            "TotalMilliseconds": 2473.053,
            "TotalMicroseconds": 2473053.0,
            "TotalNanoseconds": 2473053000.0,
            "TotalMinutes": 0.04121755,
            "TotalSeconds": 2.473053
          },
          "ScriptBlock": {
            "Attributes": "",
            "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
            "IsFilter": false,
            "IsConfiguration": false,
            "Module": null,
            "StartPosition": "System.Management.Automation.PSToken",
            "DebuggerHidden": false,
            "Id": "8a36e972-dbb7-4b0f-837c-793c46840711",
            "Ast": "{\r\n        Write-Host \">>>>>> [DESCRIBE-PERFORMANCE] Performance Describe block ENTERED <<<<<<\" -ForegroundColor Magenta\r\n        \r\n        BeforeAll {\r\n            Write-Host \"!!!!!! [BeforeAll-PERFORMANCE] BEFOREALL BLOCK REACHED DURING RUN PHASE !!!!!!\" -ForegroundColor Red\r\n            Write-Host \"  Initializing Performance test environment...\" -ForegroundColor Yellow\r\n            \r\n            # Performance module paths  \r\n            $perfModulePaths = @{\r\n                'Performance-Cache' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-Cache.psm1\"\r\n                'Performance-IncrementalUpdates' = \"$PSScriptRoot\\Modules\\Unity-Claude-CPG\\Core\\Performance-IncrementalUpdates.psm1\"\r\n                'ParallelProcessing' = \"$PSScriptRoot\\Modules\\Unity-Claude-ParallelProcessing\\Unity-Claude-ParallelProcessing.psm1\"\r\n            }\r\n            \r\n            Write-Debug \"[BeforeAll-Performance] Script variables already initialized at top level for discovery phase\"\r\n            \r\n            # Test and update module availability (variables already initialized at script level)\r\n            foreach ($moduleName in $perfModulePaths.Keys) {\r\n                if ([string]::IsNullOrEmpty($moduleName)) {\r\n                    Write-Debug \"[BeforeAll-Performance] Skipping null/empty module name\"\r\n                    continue\r\n                }\r\n                \r\n                Write-Debug \"[BeforeAll-Performance] Testing availability for module: $moduleName\"\r\n                try {\r\n                    $moduleResult = Test-ModuleAvailable -ModuleName $moduleName -ModulePath $perfModulePaths[$moduleName]\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $moduleResult\r\n                        Write-Debug \"[BeforeAll-Performance] Module $moduleName availability: $moduleResult\"\r\n                    } else {\r\n                        Write-Debug \"[BeforeAll-Performance] WARNING: PerfModulesAvailable hashtable not properly initialized\"\r\n                    }\r\n                }\r\n                catch {\r\n                    Write-Debug \"[BeforeAll-Performance] Exception testing module $moduleName : $($_.Exception.Message)\"\r\n                    if ($script:PerfModulesAvailable -and $script:PerfModulesAvailable.ContainsKey($moduleName)) {\r\n                        $script:PerfModulesAvailable[$moduleName] = $false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        Context \"Cache Performance\" {\r\n            \r\n            It \"Should meet cache performance benchmarks\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 1000\r\n                \r\n                # Benchmark cache operations\r\n                $operations = 100\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Set-CacheItem -Cache $cache -Key \"key$_\" -Value \"value$_\"\r\n                }\r\n                \r\n                1..$operations | ForEach-Object {\r\n                    Get-CacheItem -Cache $cache -Key \"key$_\"\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $avgTimePerOp = $stopwatch.ElapsedMilliseconds / ($operations * 2)\r\n                \r\n                # Should complete operations in under 1ms each\r\n                $avgTimePerOp | Should -BeLessThan 1.0\r\n            }\r\n            \r\n            It \"Should handle cache warming efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-Cache']) {\r\n                $cache = New-PerformanceCache -MaxSize 500\r\n                $warmingData = 1..100 | ForEach-Object { @{ Key = \"warmup$_\"; Value = \"data$_\" } }\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                Start-CacheWarming -Cache $cache -Data $warmingData\r\n                $stopwatch.Stop()\r\n                \r\n                # Cache warming should complete in under 100ms for 100 items\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100\r\n                Get-CacheStats -Cache $cache | Select-Object -ExpandProperty Size | Should -Be 100\r\n            }\r\n        }\r\n        \r\n        Context \"File Processing Performance\" {\r\n            BeforeAll {\r\n                # Create test files for performance testing\r\n                $testOutputRoot = if ($PSScriptRoot) { $PSScriptRoot } else { \".\" }\r\n                $script:TestFilesPath = \"$testOutputRoot\\TestOutput\\TestFiles\"\r\n                if (-not (Test-Path $script:TestFilesPath)) {\r\n                    New-Item -ItemType Directory -Path $script:TestFilesPath -Force | Out-Null\r\n                }\r\n                \r\n                # Generate test files with varying sizes\r\n                $script:TestFiles = @()\r\n                1..50 | ForEach-Object {\r\n                    $filePath = \"$script:TestFilesPath\\test$_.ps1\"\r\n                    $content = @'\r\n# Test PowerShell file $_\r\nfunction Test-Function$_ {\r\n    param([string]$Input)\r\n    Write-Output \"Processing: $Input\"\r\n    return $Input\r\n}\r\n\r\nfunction Helper-Function$_ {\r\n    param([int]$Number)\r\n    return $Number * 2\r\n}\r\n'@\r\n                    Set-Content -Path $filePath -Value $content\r\n                    $script:TestFiles += $filePath\r\n                }\r\n                \r\n                Write-Host \"    Generated $($script:TestFiles.Count) test files\" -ForegroundColor Green\r\n            }\r\n            \r\n            It \"Should process files at 100+ files per second\" {\r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                $processed = 0\r\n                \r\n                if ($script:TestFiles -and $script:TestFiles.Count -gt 0) {\r\n                    foreach ($file in $script:TestFiles) {\r\n                        if (Test-Path $file) {\r\n                            # Simulate file processing (read + basic analysis)\r\n                            $content = Get-Content -Path $file -Raw\r\n                            $functions = ($content | Select-String -Pattern \"function\\s+\\w+\" -AllMatches).Matches\r\n                            $processed++\r\n                        }\r\n                    }\r\n                } else {\r\n                    Write-Host \"    WARNING: No test files available for processing test\" -ForegroundColor Yellow\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                $filesPerSecond = $processed / ($stopwatch.ElapsedMilliseconds / 1000)\r\n                \r\n                Write-Host \"    Processed $processed files in $($stopwatch.ElapsedMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Rate: $([math]::Round($filesPerSecond, 2)) files/second\" -ForegroundColor Cyan\r\n                \r\n                # Must meet 100+ files/second requirement\r\n                $filesPerSecond | Should -BeGreaterThan 100\r\n            }\r\n            \r\n            It \"Should handle incremental updates efficiently\" -Skip:(-not $script:PerfModulesAvailable['Performance-IncrementalUpdates']) {\r\n                # Modify a subset of files\r\n                $filesToModify = $script:TestFiles | Select-Object -First 10\r\n                \r\n                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\r\n                \r\n                $changes = @()\r\n                foreach ($file in $filesToModify) {\r\n                    Add-Content -Path $file -Value \"`n# Modified at $(Get-Date)\"\r\n                    # Simple change detection - just record that file was modified\r\n                    $changes += @{\r\n                        FilePath = $file\r\n                        ChangeType = \"Modified\"\r\n                        Timestamp = Get-Date\r\n                    }\r\n                }\r\n                \r\n                $stopwatch.Stop()\r\n                \r\n                $changes.Count | Should -Be 10\r\n                $stopwatch.ElapsedMilliseconds | Should -BeLessThan 100  # Should detect changes quickly\r\n            }\r\n        }\r\n        \r\n        Context \"Parallel Processing Performance\" {\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }\r\n        \r\n        AfterAll {\r\n            # Cleanup test files\r\n            if (Test-Path $script:TestFilesPath) {\r\n                Remove-Item -Path $script:TestFilesPath -Recurse -Force\r\n                Write-Host \"    Cleaned up test files\" -ForegroundColor Yellow\r\n            }\r\n        }\r\n    }"
          },
          "StartLine": 739,
          "FrameworkData": null,
          "PluginData": null,
          "PendingCount": 0,
          "InconclusiveCount": 0,
          "OwnPassed": true,
          "OwnTotalCount": 0,
          "OwnPassedCount": 0,
          "OwnFailedCount": 0,
          "OwnSkippedCount": 0,
          "OwnPendingCount": 0,
          "OwnNotRunCount": 0,
          "OwnInconclusiveCount": 0
        },
        "EachTestSetup": null,
        "OneTimeTestSetup": null,
        "EachTestTeardown": null,
        "OneTimeTestTeardown": null,
        "EachBlockSetup": null,
        "OneTimeBlockSetup": null,
        "EachBlockTeardown": null,
        "OneTimeBlockTeardown": null,
        "Order": [
          {
            "Name": "Should demonstrate parallel processing benefits",
            "Path": "Enhanced Documentation System - Performance Parallel Processing Performance Should demonstrate parallel processing benefits",
            "Data": null,
            "ExpandedName": "Should demonstrate parallel processing benefits",
            "ExpandedPath": "Enhanced Documentation System - Performance.Parallel Processing Performance.Should demonstrate parallel processing benefits",
            "Result": "Failed",
            "ErrorRecord": "Expected the actual value to be less than 403.0951, but got 680.5131.",
            "StandardOutput": null,
            "Duration": "00:00:01.5123201",
            "ItemType": "Test",
            "Id": "",
            "GroupId": "",
            "ScriptBlock": "\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            ",
            "Tag": null,
            "Focus": false,
            "Skip": false,
            "Block": "[-] Parallel Processing Performance",
            "First": true,
            "Last": true,
            "Include": false,
            "Exclude": false,
            "Explicit": false,
            "ShouldRun": true,
            "StartLine": 905,
            "Executed": true,
            "ExecutedAt": "2025-08-28T20:46:39.5635945-04:00",
            "Passed": false,
            "Skipped": false,
            "Inconclusive": false,
            "UserDuration": "00:00:01.5001840",
            "FrameworkDuration": "00:00:00.0121361",
            "PluginData": null,
            "FrameworkData": null
          }
        ],
        "Passed": false,
        "First": false,
        "Last": true,
        "StandardOutput": null,
        "ShouldRun": true,
        "Executed": true,
        "ExecutedAt": "2025-08-28T20:46:39.5624052-04:00",
        "Exclude": false,
        "Include": false,
        "Explicit": false,
        "DiscoveryDuration": {
          "Ticks": 0,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 0,
          "Microseconds": 0,
          "Nanoseconds": 0,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 0.0,
          "TotalHours": 0.0,
          "TotalMilliseconds": 0.0,
          "TotalMicroseconds": 0.0,
          "TotalNanoseconds": 0.0,
          "TotalMinutes": 0.0,
          "TotalSeconds": 0.0
        },
        "FrameworkDuration": {
          "Ticks": 430819,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 43,
          "Microseconds": 81,
          "Nanoseconds": 900,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 4.986331018518518E-07,
          "TotalHours": 1.1967194444444445E-05,
          "TotalMilliseconds": 43.0819,
          "TotalMicroseconds": 43081.9,
          "TotalNanoseconds": 43081900.0,
          "TotalMinutes": 0.0007180316666666667,
          "TotalSeconds": 0.0430819
        },
        "UserDuration": {
          "Ticks": 16527494,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 652,
          "Microseconds": 749,
          "Nanoseconds": 400,
          "Minutes": 0,
          "Seconds": 1,
          "TotalDays": 1.912904398148148E-05,
          "TotalHours": 0.00045909705555555554,
          "TotalMilliseconds": 1652.7494,
          "TotalMicroseconds": 1652749.4,
          "TotalNanoseconds": 1652749400.0,
          "TotalMinutes": 0.027545823333333334,
          "TotalSeconds": 1.6527494
        },
        "OwnDuration": {
          "Ticks": 1835112,
          "Days": 0,
          "Hours": 0,
          "Milliseconds": 183,
          "Microseconds": 511,
          "Nanoseconds": 200,
          "Minutes": 0,
          "Seconds": 0,
          "TotalDays": 2.123972222222222E-06,
          "TotalHours": 5.097533333333333E-05,
          "TotalMilliseconds": 183.5112,
          "TotalMicroseconds": 183511.2,
          "TotalNanoseconds": 183511200.0,
          "TotalMinutes": 0.00305852,
          "TotalSeconds": 0.1835112
        },
        "ScriptBlock": {
          "Attributes": [],
          "File": "C:\\UnityProjects\\Sound-and-Shoal\\Unity-Claude-Automation\\Test-EnhancedDocumentationSystem.ps1",
          "IsFilter": false,
          "IsConfiguration": false,
          "Module": null,
          "StartPosition": {
            "Content": "{\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }",
            "Type": 19,
            "Start": 48651,
            "Length": 1227,
            "StartLine": 903,
            "StartColumn": 51,
            "EndLine": 926,
            "EndColumn": 10
          },
          "DebuggerHidden": false,
          "Id": "b635d68a-77fe-4913-9cfa-0372621b2a90",
          "Ast": {
            "Attributes": "",
            "UsingStatements": "",
            "ParamBlock": null,
            "BeginBlock": null,
            "ProcessBlock": null,
            "EndBlock": "It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }",
            "CleanBlock": null,
            "DynamicParamBlock": null,
            "ScriptRequirements": null,
            "Extent": "{\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }",
            "Parent": "{\r\n            \r\n            It \"Should demonstrate parallel processing benefits\" -Skip:(-not $script:PerfModulesAvailable['ParallelProcessing']) {\r\n                # Sequential processing baseline\r\n                $sequentialTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    }\r\n                }\r\n                \r\n                # Parallel processing comparison\r\n                $parallelTime = Measure-Command {\r\n                    $script:TestFiles | ForEach-Object -Parallel {\r\n                        Start-Sleep -Milliseconds 10  # Simulate processing time\r\n                    } -ThrottleLimit 8\r\n                }\r\n                \r\n                Write-Host \"    Sequential: $($sequentialTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                Write-Host \"    Parallel: $($parallelTime.TotalMilliseconds)ms\" -ForegroundColor Cyan\r\n                \r\n                # Parallel should be significantly faster (at least 2x improvement)\r\n                $parallelTime.TotalMilliseconds | Should -BeLessThan ($sequentialTime.TotalMilliseconds / 2)\r\n            }\r\n        }"
          }
        },
        "StartLine": 903,
        "FrameworkData": null,
        "PluginData": null,
        "PendingCount": 0,
        "InconclusiveCount": 0,
        "OwnPassed": true,
        "OwnTotalCount": 1,
        "OwnPassedCount": 0,
        "OwnFailedCount": 1,
        "OwnSkippedCount": 0,
        "OwnPendingCount": 0,
        "OwnNotRunCount": 0,
        "OwnInconclusiveCount": 0
      },
      "First": true,
      "Last": true,
      "Include": false,
      "Exclude": false,
      "Explicit": false,
      "ShouldRun": true,
      "StartLine": 905,
      "Executed": true,
      "ExecutedAt": "2025-08-28T20:46:39.5635945-04:00",
      "Passed": false,
      "Skipped": false,
      "Inconclusive": false,
      "UserDuration": {
        "Ticks": 15001840,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 500,
        "Microseconds": 184,
        "Nanoseconds": 0,
        "Minutes": 0,
        "Seconds": 1,
        "TotalDays": 1.736324074074074E-05,
        "TotalHours": 0.00041671777777777777,
        "TotalMilliseconds": 1500.184,
        "TotalMicroseconds": 1500184.0,
        "TotalNanoseconds": 1500184000.0,
        "TotalMinutes": 0.025003066666666667,
        "TotalSeconds": 1.500184
      },
      "FrameworkDuration": {
        "Ticks": 121361,
        "Days": 0,
        "Hours": 0,
        "Milliseconds": 12,
        "Microseconds": 136,
        "Nanoseconds": 100,
        "Minutes": 0,
        "Seconds": 0,
        "TotalDays": 1.4046412037037036E-07,
        "TotalHours": 3.371138888888889E-06,
        "TotalMilliseconds": 12.1361,
        "TotalMicroseconds": 12136.1,
        "TotalNanoseconds": 12136100.0,
        "TotalMinutes": 0.00020226833333333334,
        "TotalSeconds": 0.0121361
      },
      "PluginData": null,
      "FrameworkData": null
    }
  ],
  "Summary": {
    "TestScope": "All",
    "Failed": 23,
    "StartTime": "2025-08-28T20:46:41.7342461-04:00",
    "TotalTests": 28,
    "SuccessRate": 7.1,
    "Duration": 4.7314606,
    "Passed": 2,
    "Skipped": 3,
    "TestScript": "Test-EnhancedDocumentationSystem.ps1"
  }
}
